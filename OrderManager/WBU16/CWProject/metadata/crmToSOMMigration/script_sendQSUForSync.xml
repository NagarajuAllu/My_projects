<?xml version="1.0" encoding="UTF-8" ?>
<script name="crmToSOMMigration.sendQSUForSync">
  <highlight>14</highlight>
  <label>Send QSU For Sync</label>
  <metaVersion>25</metaVersion>
  <script><![CDATA[
    var debugMsg = " SendQSUForSync - ";

    var searchDoc = new Document("stcc.genericSearchDocWithInteger1");
    searchDoc.integer1 = 0;
    var synchDataFound = Finder.runFinder("crmToSOMMigration.findSTCW_DATA_FOR_QSU_SYNC", "select", searchDoc);

    var found = 0;
    var processedSuccessfully = 0;

    if(synchDataFound != null) {
        found = synchDataFound.length;
        for(var i=0; i<synchDataFound.length; i++) {
            debugPrintln(stcc.getSysdateForLog() + debugMsg + "Sending QSU for WO " + synchDataFound[i].WO_NAME);

            var qsuMsg = prepareQSUEvent_(synchDataFound[i]);
            var quoteItem = stcw.getLineItemByWorkOrderNumberAndProvFlag(qsuMsg.quoteNumber, "PROVISIONING");

            if(quoteItem != null) {
                fixMissingValuesInIncomingFlow_(qsuMsg, quoteItem);

                var wosuUnifiedModel = stcw.convertWBUQSUToUnifiedModel(qsuMsg, synchDataFound[i].PARENT_QUOTE_NUMBER, quoteItem.lineItemIdentifier);

                var orchestrationRecord = stcw.getRecordInOrchestrationTableByLineItemId(quoteItem.id);
                if(orchestrationRecord != null) {
                    var provisioningProcessId = orchestrationRecord.provisioningProcessId;
                    if(provisioningProcessId != null) {

                        var processInstance = Process.getProcessInfo(provisioningProcessId);
                        if(processInstance != null) {
                            if(processInstance.processStatus == 8) {
                                // the process is in status 8, so STALE; resume it
                                debugPrintln(stcc.getSysdateForLog() + debugMsg + "Resuming Stale process " + provisioningProcessId);
                                Process.resumeAllStaleProcesses(provisioningProcessId);
                            }
                        }

                        var wosuId = stcw.writeGraniteWOSUIntoDB(provisioningProcessId, wosuUnifiedModel);

                        var wosuNotificationDS = new DataStructure("stcw.wosuNotificationDS");
                        wosuNotificationDS.wosuId = wosuId;

                        debugPrintln(stcc.getSysdateForLog() + debugMsg + "Sending WOSU Notification for <" + qsuMsg.quoteNumber + "," + qsuMsg.reservationNumber + "> to process " + provisioningProcessId + "; wosuId = " + wosuId);
                        Process.sendMessageToProcess(provisioningProcessId, null, "stcw.xngServicesNotificationToProcesses/workOrderStatusUpdateNotification", wosuNotificationDS);

                        processedSuccessfully++;
                        synchDataFound[i].PROCESSED = 1;
                    }
                    else {
                        debugPrintln(stcc.getSysdateForLog() + debugMsg + "WARNING - Unable to find Provisioning Process for received granite WQSU for <" + qsuMsg.quoteNumber + "," + qsuMsg.reservationNumber + ">");
                        synchDataFound[i].PROCESSED = 2;
                    }
                }
                else {
                    debugPrintln(stcc.getSysdateForLog() + debugMsg + "WARNING - Unable to find Provisioning Process for received granite WQSU for <" + qsuMsg.quoteNumber + "," + qsuMsg.reservationNumber + ">");
                    synchDataFound[i].PROCESSED = 3;
                }
            }
            else {
                debugPrintln(stcc.getSysdateForLog() + debugMsg + "WARNING - Unable to find Quote with ChildNumber = '" + qsuMsg.quoteNumber + "' and provisioningFlag 'PROVISIONING'");
                synchDataFound[i].PROCESSED = 4;
            }

            synchDataFound[i].save();
        }
    }

    var statistics = new Array(2);
    statistics[0] = found;
    statistics[1] = processedSuccessfully;

    return statistics;




    function prepareQSUEvent_(dataFound) {
        var qsuEvent = new DataStructure("wgws.updateQuoteStatus");
        qsuEvent.businessUnit             = "Wholesale";
        qsuEvent.comments                 = dataFound.WO_COMMENTS;
        qsuEvent.feasibilityStatus        = dataFound.FEAS_STATUS.toUpperCase();
        qsuEvent.orderRowItemId           = dataFound.WO_NAME.substring(dataFound.WO_NAME.indexOf("#") + 1);
        qsuEvent.actualImplementationDays = dataFound.IMPL_DAYS;
        qsuEvent.plannedFeasibleDays      = dataFound.FEAS_DAYS;
        qsuEvent.quoteNumber              = dataFound.WO_NAME;
        qsuEvent.reservationDays          = dataFound.RESERV_DAYS;
        qsuEvent.reservationNumber        = dataFound.WO_NAME.replace("#", "-");
        qsuEvent.workOrderStatus          = dataFound.WO_STATUS;

        return qsuEvent;
    }


    function fixMissingValuesInIncomingFlow_ (input, quoteItem) {

        if(input.orderRowItemId != quoteItem.orderRowItemId) {
    debugPrintln(stcc.getSysdateForLog() + " Received wrong orderRowItemId = '" + input.orderRowItemId + "'; replacing with the correct one = '" + quoteItem.orderRowItemId + "'" );
              input.orderRowItemId = quoteItem.orderRowItemId;
        }

        input.reservationNumber = quoteItem.reservationNumber;
        input.businessUnit = "Wholesale";

    }
  ]]></script>
</script>