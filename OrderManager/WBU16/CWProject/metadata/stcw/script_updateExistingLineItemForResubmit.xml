<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.updateExistingLineItemForResubmit">
  <label>Update Existing LineItem For Resubmit</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="existingLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="receivedLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="elementTypeInOrderTree" type="rifp">
      <type>dtype_stcw.elementTypeInOrderTree</type>
    </parameter>
    <parameter name="existingOrder" type="rifp">
      <type>order_stcw.wholesaleBundleOrderSTC</type>
    </parameter>
    <parameter name="failureArray" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var validationErrors = null;

    // extract existingLineItem and receivedLineItem from the container according to the elementTypeInOrderTree parameter
    var existingLineItem = null;
    var receivedLineItem = null;

    var childElementTypeInOrderTree = null;
    var childExistingLineItemContainer = null;
    var childReceivedLineItemContainer = null;

    if(elementTypeInOrderTree == "B") {
        existingLineItem = existingLineItemContainer.parentLineItem;
        receivedLineItem = receivedLineItemContainer.parentLineItem;
        childElementTypeInOrderTree = "C";
        childExistingLineItemContainer = existingLineItemContainer.services;
        childReceivedLineItemContainer = receivedLineItemContainer.services;
    }
    else if(elementTypeInOrderTree == "C") {
        existingLineItem = existingLineItemContainer.serviceLineItem;
        receivedLineItem = receivedLineItemContainer.serviceLineItem;
        childElementTypeInOrderTree = "S";
        childExistingLineItemContainer = existingLineItemContainer.subServices;
        childReceivedLineItemContainer = receivedLineItemContainer.subServices;
    }
    else if(elementTypeInOrderTree == "S") {
        existingLineItem = existingLineItemContainer.subServiceLineItem;
        receivedLineItem = receivedLineItemContainer.subServiceLineItem;
        childElementTypeInOrderTree = "T";
        childExistingLineItemContainer = existingLineItemContainer.subSubServices;
        childReceivedLineItemContainer = receivedLineItemContainer.subSubServices;
    }
    else if(elementTypeInOrderTree == "T") {
        existingLineItem = existingLineItemContainer.subSubServiceLineItem;
        receivedLineItem = receivedLineItemContainer.subSubServiceLineItem;
    }


    if(existingLineItem != null && receivedLineItem != null) {

        // all line items attributes has to be updated if the status of the existing lineItem != COMPLETED/CANCELLED;
        // NOTE: if action is different, throws exception
        var lineItemAttributesToCheck = ["action"];

        if(! stcw.isLineItemCompleted(existingLineItem.lineItemStatus)) {
            if(lineItemAttributesToCheck != null) {
                for(var i=0; i<lineItemAttributesToCheck.length; i++) {
                    var attributeToCheck = lineItemAttributesToCheck[i];

                    compareValues_(receivedLineItem[attributeToCheck], existingLineItem[attributeToCheck], attributeToCheck, "Attribute");
                }
            }

            if(validationErrors != null) {
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingLineItem.lineItemIdentifier, failureArray, true);

            }
            else {
                if(! existingLineItem.sentAnytimeToGranite) {
                    // update if and only if the lineitem was not sent to Granite

                    var attributesToSkip = ["action", "workOrderNumber", "workOrderType", "alreadySentToGranite", "alreadyReceivedCancel", "sentAnytimeToGranite", "requestedActionIsA", "provisioningFlag", "completionDate",
                                            "cwDocId", "cwDocStamp", "cwOrderCreationDate", "cwOrderId", "cwParentId", "lastUpdatedDate", "updatedBy"];

                    if(existingOrder.orderHeader.orderType == "F") {
                        attributesToSkip.push("reservationNumber");
                    }

                    for(var i=0; i<existingLineItem.getLeafNames().length; i++) {
                        var attributeToCopy = existingLineItem.getLeafNames()[i];

                        if(notIn_(attributeToCopy, attributesToSkip)) {
                            existingLineItem[attributeToCopy] = receivedLineItem[attributeToCopy];
                        }
                    }

                    // checking nvPair & blockParameters
                    validationErrors = null;
                    if(elementTypeInOrderTree == "B") {
                        validationErrors = stcw.updateExistingNV_VASBundleParamsForResubmit(existingLineItemContainer, receivedLineItemContainer, validationErrors, existingLineItem.lineItemIdentifier, existingOrder);
                    }
                    else if(elementTypeInOrderTree == "C") {
                        validationErrors = stcw.updateExistingNV_VASServParamsForResubmit(existingLineItemContainer, receivedLineItemContainer, validationErrors, existingLineItem.lineItemIdentifier, existingOrder);
                    }
                    else if(elementTypeInOrderTree == "S") {
                        validationErrors = stcw.updateExistingNV_VASSubServParamsForResubmit(existingLineItemContainer, receivedLineItemContainer, validationErrors, existingLineItem.lineItemIdentifier, existingOrder);
                    }
                    else if(elementTypeInOrderTree == "T") {
                        validationErrors = stcw.updateExistingNV_VASSubSubSerParamsForResubmit(existingLineItemContainer, receivedLineItemContainer, validationErrors, existingLineItem.lineItemIdentifier, existingOrder);
                    }
                }
            }

            if(validationErrors != null) {
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingLineItem.lineItemIdentifier, failureArray, true);
            }
        }
        else {
            // do nothing because the lineItem is completed
        }


        // processing the child elements
        validationErrors = null;
        if(childExistingLineItemContainer != null) {
            var missingReceived = 0;
            for(var i=0; i<childExistingLineItemContainer.length; i++) {
                var existingChildLineItemId = null;
                if(childElementTypeInOrderTree == "C") {
                    existingChildLineItemId = childExistingLineItemContainer[i].serviceLineItem.lineItemIdentifier;
                }
                else if(childElementTypeInOrderTree == "S") {
                    existingChildLineItemId = childExistingLineItemContainer[i].subServiceLineItem.lineItemIdentifier;
                }
                else if(childElementTypeInOrderTree == "T") {
                    existingChildLineItemId = childExistingLineItemContainer[i].subSubServiceLineItem.lineItemIdentifier;
                }
                var found = false;

                // search child in received
                if(childReceivedLineItemContainer != null) {
                    for(var j=0; j<childReceivedLineItemContainer.length && !found; j++) {
                        var receivedChildLineItemId = null;
                        if(childElementTypeInOrderTree == "C") {
                            receivedChildLineItemId = childReceivedLineItemContainer[j].serviceLineItem.lineItemIdentifier;
                        }
                        else if(childElementTypeInOrderTree == "S") {
                            receivedChildLineItemId = childReceivedLineItemContainer[j].subServiceLineItem.lineItemIdentifier;
                        }
                        else if(childElementTypeInOrderTree == "T") {
                            receivedChildLineItemId = childReceivedLineItemContainer[j].subSubServiceLineItem.lineItemIdentifier;
                        }

                        if(existingChildLineItemId == receivedChildLineItemId) {
                            // found; comparing the 2 lineItems and the entire hierarchy
                            found = true;
                            failureArray = stcw.updateExistingLineItemForResubmit(childExistingLineItemContainer[i], childReceivedLineItemContainer[j], childElementTypeInOrderTree, existingOrder, failureArray);
                        }
                    }
                }

                if(!found) {
                    // not found child; adding error
                    validationErrors = stcw.appendToValidationErrors("AE0067", Global.translateText("AE0067", null, existingLineItem.lineItemIdentifier), validationErrors, "updateExistingLineItemForResubmit (" + existingChildLineItemId + ")");
                    missingReceived++;
                }
            }

            if(childReceivedLineItemContainer != null) {
                if((childReceivedLineItemContainer.length + missingReceived) != childExistingLineItemContainer.length) {
                    // it means that there are additional attributes in received that are not in existing! ERROR!
                    validationErrors = stcw.appendToValidationErrors("AE0059", Global.translateText("AE0059",  null, [childElementTypeInOrderTree, "existing"]), validationErrors, "updateExistingLineItemForResubmit (" + existingChildLineItemId + ")");
                }
            }
        }
        else {
            if(childReceivedLineItemContainer != null) {
                // it means that there are bundles in received that are not in existing! ERROR!
                validationErrors = stcw.appendToValidationErrors("AE0059", Global.translateText("AE0059",  null, [childElementTypeInOrderTree, "existing"]), validationErrors, "updateExistingLineItemForResubmit (" + existingLineItem.lineItemIdentifier + ")");
            }
        }

        if(validationErrors != null) {
            failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingLineItem.lineItemIdentifier, failureArray, false);
        }
    }
    else {
        validationErrors = ["AE0058", Global.translateText("AE0058", null, [(existingLineItem != null ? "Received" : "Existing"), existingLineItem.lineItemIdentifier])];
        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingLineItem.lineItemIdentifier, failureArray, false);
    }

    return failureArray;



    function notIn_(attributeName, attributesToSkipArray) {
        var exist = false;
        for(var i=0; i<attributesToSkipArray.length && !exist; i++) {
            exist = (attributesToSkipArray[i] == attributeName);
        }
        return (!exist);
    }


    function compareValues_(receivedAttribute, existingAttribute, attributeName, category) {
        var debugMsg = "updateExistingLineItemForResubmit (" + existingLineItem.lineItemIdentifier + ")";
        if(receivedAttribute == null) {
            if(existingAttribute != null) {
                validationErrors = stcw.appendToValidationErrors("AE0055", Global.translateText("AE0055", null, [category, attributeName, "existing"]), validationErrors, debugMsg);
            }
        }
        else {
            if(existingAttribute == null) {
                validationErrors = stcw.appendToValidationErrors("AE0057", Global.translateText("AE0057", null, [category, attributeName, "existing"]), validationErrors, debugMsg);
            }
            else {
                 if(attributeName == 'creationDate' || attributeName == 'serviceDate') {
                    var receivedDate = new Date(receivedAttribute.getFullYear(), receivedAttribute.getMonth(), receivedAttribute.getDate());
                    var existingDate = new Date(existingAttribute.getFullYear(), existingAttribute.getMonth(), existingAttribute.getDate());

                    if(receivedDate.getTime() != existingDate.getTime()) {
                        validationErrors = stcw.appendToValidationErrors("AE0056", Global.translateText("AE0056", null, [category, attributeName, receivedDate, existingDate, "existing"]), validationErrors, debugMsg);
                    }
                }
                else {
                    if(! receivedAttribute.toString().equals(existingAttribute.toString())) {
                        validationErrors = stcw.appendToValidationErrors("AE0056", Global.translateText("AE0056", null, [category, attributeName, receivedAttribute, existingAttribute, "existing"]), validationErrors, debugMsg);
                    }
                }
            }
        }
    }
  ]]></script>
</script>