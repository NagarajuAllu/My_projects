<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.mapOrderItemToHBUInputData">
  <label>Map OrderItem To HBU Input Data</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="bundleOrder" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="orderItemLinkedToProcess" type="rifp">
      <type>doc_stcw.lineItemDocument</type>
    </parameter>
    <parameter name="isSubmit" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var cim = "H";
    var quoteOrder = "O";

    var graniteInputData = new DataStructure("cimhJMS.orderMessage_el_HOME");

    var lineItemIds = null;

    /****
     *  ORDER HEADER
     ****/
    // extracting rules to map orderHeader attributes of the order into orderHeader of the DS
    var mappingRulesFound = stcw.getMappingFromCOMToGraniteData(cim, quoteOrder, "OH", "OH");
    if(mappingRulesFound != null) {
        for (var i=0; i<mappingRulesFound.length; i++) {
    debugPrintln(stcc.getSysdateForLog() + " mapOrderItemToHBUInputData - using mapping for OH-OH: " + mappingRulesFound[i].toXML());
            graniteInputData[mappingRulesFound[i].giName] = bundleOrder.orderHeader[mappingRulesFound[i].comName];
        }
    }

    // extracting rules to map lineItem attributes of the order into orderHeader of the DS
    mappingRulesFound = stcw.getMappingFromCOMToGraniteData(cim, quoteOrder, "LI", "OH");
    if(mappingRulesFound != null) {
        for (var i=0; i<mappingRulesFound.length; i++) {
    debugPrintln(stcc.getSysdateForLog() + " mapOrderItemToHBUInputData - using mapping for LI-OH:" + mappingRulesFound[i].toXML());
            var orderItem = null;
            if(mappingRulesFound[i].comServiceType == null) {
                orderItem = orderItemLinkedToProcess;
            }
            else {
                orderItem = getOrderItemByServiceType_(mappingRulesFound[i].comServiceType);
            }

            if(orderItem != null) {
                graniteInputData[mappingRulesFound[i].giName] = orderItem[mappingRulesFound[i].comName];
            }
        }
    }

    // extracting rules to map NV pair attributes of the orderItem into orderHeader of the DS
    mappingRulesFound = stcw.getMappingFromCOMToGraniteData(cim, quoteOrder, "NV", "OH");
    if(mappingRulesFound != null) {
        for (var i=0; i<mappingRulesFound.length; i++) {
    debugPrintln(stcc.getSysdateForLog() + " mapOrderItemToHBUInputData - using mapping for NV-OH:" + mappingRulesFound[i].toXML());
            var orderItem = null;
            if(mappingRulesFound[i].comServiceType == null) {
                orderItem = orderItemLinkedToProcess;
            }
            else {
                orderItem = getOrderItemByServiceType_(mappingRulesFound[i].comServiceType);
            }

            if(orderItem != null) {
                var nvPairList = stcw.getAllNameValuesByParentElementIdAndNameAndVASFlag(orderItem.id, false, mappingRulesFound[i].comName);
                if(nvPairList != null && nvPairList.length > 0) {
                    graniteInputData[mappingRulesFound[i].giName] = nvPairList[0].value;
                }
            }
        }
    }


    // overwriting orderStatus
    graniteInputData.orderStatus = (isSubmit ? "New" : (orderItemLinkedToProcess.isCancel ? "Cancel" : "Revise"));
    // overwriting businessUnit
    graniteInputData.businessUnit = "Home";
    // overwriting cctType
    graniteInputData.cctType = "FTTH_LINK";
    // overwriting orderDomain
    graniteInputData.orderDomain = "IWBU";
    // overwriting reservationExpiry
    graniteInputData.reservationExpiry = "30";

    /****
     *  Looping on all the lineItems
     ****/
    var serviceLineItemContainer = bundleOrder.parentLineItems[0].services;
    var countLineItems = 0;


    // init value set to null to avoid to propagate it in case of not "F" order!
    var computedFeasibilityFor = null;
    if(bundleOrder.orderHeader.orderType == "F") {
        computedFeasibilityFor = stcw.getFeasibilityForForFTTH(bundleOrder);
    }

    // loading generic mapping rules for lineItem
    var mappingRulesFound_OH_LI = stcw.getMappingFromCOMToGraniteData(cim, quoteOrder, "OH", "LI");
    var mappingRulesFound_LI_LI = stcw.getMappingFromCOMToGraniteData(cim, quoteOrder, "LI", "LI");
    var mappingRulesFound_NV_LI = stcw.getMappingFromCOMToGraniteData(cim, quoteOrder, "NV", "LI");
    var mappingRulesFound_OH_NV = stcw.getMappingFromCOMToGraniteData(cim, quoteOrder, "OH", "NV");
    var mappingRulesFound_LI_NV = stcw.getMappingFromCOMToGraniteData(cim, quoteOrder, "LI", "NV");
    var mappingRulesFound_NV_NV = stcw.getMappingFromCOMToGraniteData(cim, quoteOrder, "NV", "NV");
    var mappingRulesFound_NV_PLI_NV = stcw.getMappingFromCOMToGraniteData(cim, quoteOrder, "NV_PLI", "NV");


    for(var l=0; l<serviceLineItemContainer.length; l++) {
        if(stcw.isServiceProvisionable(serviceLineItemContainer[l].serviceLineItem.id)) {
            // lineItem is provisionable; adding it to the mapping

            var countNVPairs = 0;

            /****
             *  LINE ITEM
             ****/
            // managing orderHeader attributes that become serviceParameters attributes
            if(mappingRulesFound_OH_LI != null) {
                for (var i=0; i<mappingRulesFound_OH_LI.length; i++) {
                    debugPrintln(stcc.getSysdateForLog() + " mapOrderItemToHBUInputData - using mapping for OH-LI:" + mappingRulesFound_OH_LI[i].toXML());

                    graniteInputData.serviceParameters[countLineItems][mappingRulesFound_OH_LI[i].giName] = bundleOrder.orderHeader[mappingRulesFound_OH_LI[i].comName];
                }
            }
            // reetting feasibilityFor field in case of not "F" order
            if(bundleOrder.orderHeader.orderType != "F") {
                graniteInputData.serviceParameters[countLineItems].feasibilityFor = null;
            }

            // managing lineItem attributes that become serviceParameters attributes
            if(mappingRulesFound_LI_LI != null) {
                for (var i=0; i<mappingRulesFound_LI_LI.length; i++) {
                    debugPrintln(stcc.getSysdateForLog() + " mapOrderItemToHBUInputData - using mapping for LI-LI:" + mappingRulesFound_LI_LI[i].toXML());

                    var orderItem = null;
                    if(mappingRulesFound_LI_LI[i].comServiceType == null) {
                        // it means that mapping rule refers, as source, to the current lineItem
                        orderItem = serviceLineItemContainer[l].serviceLineItem;
                    }
                    else {
                        orderItem = getOrderItemByServiceType_(mappingRulesFound_LI_LI[i].comServiceType);
                    }

                    if(orderItem != null) {
                        graniteInputData.serviceParameters[countLineItems][mappingRulesFound_LI_LI[i].giName] = orderItem[mappingRulesFound_LI_LI[i].comName];
                    }
                }
            }

            // managing NV pairs that become serviceParameters attributes
            if(mappingRulesFound_NV_LI != null) {
                for (var i=0; i<mappingRulesFound_NV_LI.length; i++) {
                    debugPrintln(stcc.getSysdateForLog() + " mapOrderItemToHBUInputData - using mapping for NV-LI:" + mappingRulesFound_NV_LI[i].toXML());

                    var nvPairs = null;
                    if(mappingRulesFound_NV_LI[i].comServiceType == null) {
                        // it means that mapping rule refers, as source, to the current lineItem
                        nvPairs = serviceLineItemContainer[l].serviceLineItemNameValueParameters;
                    }
                    else {
                        var lineItem = getOrderItemByServiceType_(mappingRulesFound_NV_LI[i].comServiceType);
                        if(lineItem != null) {
                            nvPairs = stcw.getAllNameValuesByParentElementIdAndNameAndVASFlag(lineItem.id);
                        }
                    }

                    if(nvPairs != null) {
                        for(var n=0; n<nvPairs.length; n++) {
                            if(nvPairs[n].serviceLineItemNameValueParameter.name == mappingRulesFound_NV_LI[i].comName) {
                                graniteInputData.serviceParameters[countLineItems][mappingRulesFound_NV_LI[i].giName] = nvPairs[n].serviceLineItemNameValueParameter.value;
                            }
                        }
                    }
                }
            }

            /////////////////
            // 2019-01-21: Changed mapping for ServiceNumber as requested by Raj with email
            //             ServiceNumber from CRM to serviceNumber in CIMH for HSI & IPTV
            //             TelephoneNumber from CRM to serviceNumber in CIMH for VOIP
            //             OldPhoneNumber from CRM to oldServiceNumber in CIMH for VOIP
            /////////////////
            if((serviceLineItemContainer[l].serviceLineItem.serviceType == "FTTH_HSI") ||
                (serviceLineItemContainer[l].serviceLineItem.serviceType == "FTTH_IPTV")) {
                graniteInputData.serviceParameters[countLineItems].serviceNumber = serviceLineItemContainer[l].serviceLineItem.serviceNumber;
            }
            else if(serviceLineItemContainer[l].serviceLineItem.serviceType == "FTTH_VOIP") {
                var nvPairs = serviceLineItemContainer[l].serviceLineItemNameValueParameters;
                if(nvPairs != null) {
                    for(var n=0; n<nvPairs.length; n++) {
                        if(nvPairs[n].serviceLineItemNameValueParameter.name == "TelephoneNumber") {
                            graniteInputData.serviceParameters[countLineItems].serviceNumber = nvPairs[n].serviceLineItemNameValueParameter.value;
                        }
                        else if(nvPairs[n].serviceLineItemNameValueParameter.name == "OldPhoneNumber") {
                            graniteInputData.serviceParameters[countLineItems].oldServiceNumber = nvPairs[n].serviceLineItemNameValueParameter.value;
                        }
                    }
                }
            }

            graniteInputData.serviceParameters[countLineItems].feasibilityFor = computedFeasibilityFor;

            /****
             *  LINE ITEM - NV Pairs
             ****/
            // mapping NV pairs of the same lineItem; not using mapping table
            if(serviceLineItemContainer[l].serviceLineItemNameValueParameters != null) {
                for (var i=0; i<serviceLineItemContainer[l].serviceLineItemNameValueParameters.length; i++) {
                    mapNameValuePair_(graniteInputData.serviceParameters[countLineItems].nameValue[countNVPairs], serviceLineItemContainer[l].serviceLineItemNameValueParameters[i].serviceLineItemNameValueParameter);
                    countNVPairs++;
                }
            }

            // adding SOM_DOMAIN NV Pair
            mapNameValueIntoPair_(graniteInputData.serviceParameters[countLineItems].nameValue[countNVPairs], "SOM_DOMAIN", "WHOLESALE_G8");
            countNVPairs++;

            var isChangeONT = (serviceLineItemContainer[l].serviceLineItem.changeRequestType == "CHANGE_ONT");
            if(isChangeONT) {
                // adding SOM_DOMAIN NV Pair
                mapNameValueIntoPair_(graniteInputData.serviceParameters[countLineItems].nameValue[countNVPairs], "Change_ONT", "Y");
                countNVPairs++
            }


            // adding "Original WO Number" NV Pair in case of cancel of completed quotation
            if(bundleOrder.orderHeader.orderType == "F" &&
               serviceLineItemContainer[l].serviceLineItem.isCancel &&
               serviceLineItemContainer[l].serviceLineItem.previousWONumber != null) {
                mapNameValueIntoPair_(graniteInputData.serviceParameters[countLineItems].nameValue[countNVPairs], "Original WO Number", serviceLineItemContainer[l].serviceLineItem.previousWONumber);
                countNVPairs++;
            }

            // managing OH attributes that become NV pairs
            if(mappingRulesFound_OH_NV != null) {
                for (var i=0; i<mappingRulesFound_OH_NV.length; i++) {
                    debugPrintln(stcc.getSysdateForLog() + " mapOrderItemToHBUInputData - using mapping for OH-NV:" + mappingRulesFound_OH_NV[i].toXML());
                    mapNameValuePair_(graniteInputData.serviceParameters[countLineItems].nameValue[countNVPairs], mappingRulesFound_OH_NV[i].giName, bundleOrder.orderHeader[mappingRulesFound_OH_NV[i].comName]);
                    countNVPairs++;
                }
            }

            // managing lineItem attributes that become NV pairs
            if(mappingRulesFound_LI_NV != null) {
                for (var i=0; i<mappingRulesFound_LI_NV.length; i++) {
                    debugPrintln(stcc.getSysdateForLog() + " mapOrderItemToHBUInputData - using mapping for LI-NV:" + mappingRulesFound_LI_NV[i].toXML());

                    var orderItem = null;
                    if(mappingRulesFound_LI_NV[i].comServiceType == null) {
                        // it means that mapping rule refers, as source, to the current lineItem
                        orderItem = serviceLineItemContainer[l].serviceLineItem;
                    }
                    else {
                        orderItem = getOrderItemByServiceType_(mappingRulesFound_LI_NV[i].comServiceType);
                    }

                    if(orderItem != null) {
                        mapNameValueIntoPair_(graniteInputData.serviceParameters[countLineItems].nameValue[countNVPairs], mappingRulesFound_LI_NV[i].comName, orderItem[mappingRulesFound_LI_NV[i].comName]);
                        if(mappingRulesFound_LI_NV[i].giName != mappingRulesFound_LI_NV[i].comName) {
                            graniteInputData.serviceParameters[countLineItems].nameValue[countNVPairs].name =  mappingRulesFound_LI_NV[i].giName;
                        }
                        countNVPairs++;
                    }
                }
            }

            // managing NV pairs that become NV pairs
            if(mappingRulesFound_NV_NV != null) {
                for (var i=0; i<mappingRulesFound_NV_NV.length; i++) {
                    debugPrintln(stcc.getSysdateForLog() + " mapOrderItemToHBUInputData - using mapping for NV-NV:" + mappingRulesFound_NV_NV[i].toXML());

                    var nvPairs = null;
                    if(mappingRulesFound_NV_NV[i].comServiceType == null) {
                        // it means that mapping rule refers, as source, to the current lineItem
                        // so do nothing because already mapped
                    }
                    else {
                        var lineItem = getOrderItemByServiceType_(mappingRulesFound_NV_NV[i].comServiceType);
                        if(lineItem != null) {
                            nvPairs = stcw.getAllNameValuesByParentElementIdAndNameAndVASFlag(lineItem.id, false, mappingRulesFound_NV_NV[i].comName);
                        }
                    }

                    if(nvPairs != null) {
                        for(var n=0; n<nvPairs.length; n++) {
                            mapNameValuePair_(graniteInputData.serviceParameters[countLineItems].nameValue[countNVPairs], nvPairs[n]);
                            if(mappingRulesFound_NV_NV[i].giName != mappingRulesFound_NV_NV[i].comName) {
                                graniteInputData.serviceParameters[countLineItems].nameValue[countNVPairs].name =  mappingRulesFound_NV_NV[i].giName;
                            }
                            countNVPairs++;
                        }
                    }
                }
            }

            // managing NV pairs of the PLI that become NV pairs
            if(mappingRulesFound_NV_PLI_NV != null) {
                for (var i=0; i<mappingRulesFound_NV_PLI_NV.length; i++) {
                    debugPrintln(stcc.getSysdateForLog() + " mapOrderItemToHBUInputData - using mapping for NV_PLI-NV:" + mappingRulesFound_NV_PLI_NV[i].toXML());

                    var nvPairs = stcw.getAllNameValuesByParentElementIdAndNameAndVASFlag(bundleOrder.parentLineItems[0].parentLineItem.id, false, mappingRulesFound_NV_PLI_NV[i].comName);

                    if(nvPairs != null) {
                        for(var n=0; n<nvPairs.length; n++) {
                            mapNameValuePair_(graniteInputData.serviceParameters[countLineItems].nameValue[countNVPairs], nvPairs[n]);
                            if(mappingRulesFound_NV_PLI_NV[i].giName != mappingRulesFound_NV_PLI_NV[i].comName) {
                                graniteInputData.serviceParameters[countLineItems].nameValue[countNVPairs].name =  mappingRulesFound_NV_PLI_NV[i].giName;
                            }
                            countNVPairs++;
                        }
                    }
                }
            }
            countLineItems++;
        }
    }


    return graniteInputData;


    //
    //  mapNameValuePair_
    //
    function mapNameValuePair_ (output, input) {
        output.name  = stcw.convertCOMNameToGraniteOne(input.name);
        output.value = stcw.convertCOMValueToGraniteOne(input.name, input.value);
    }

    //
    //  mapNameValueIntoPair_
    //
    function mapNameValueIntoPair_ (output, inputName, inputValue) {
        output.name  = stcw.convertCOMNameToGraniteOne(inputName);
        output.value = stcw.convertCOMValueToGraniteOne(inputName, inputValue);
    }


    //
    //  getOrderItemByServiceType_
    //
    function getOrderItemByServiceType_(serviceType) {
        if(lineItemIds == null) {
            lineItemIds = {};
        }

        var orderItem = null;

        var foundLineItemId = lineItemIds[serviceType];
        if(foundLineItemId == null) {
            orderItem = stcw.getLineItemInOrderByServiceType_ElmTypeInOTree(bundleOrder.id, serviceType, "C");
            if(orderItem != null) {
                lineItemIds[serviceType] = orderItem.id;
            }
        }
        else {
            orderItem = Document.readDoc("stcw.lineItemDocument", foundLineItemId);
        }

        return orderItem;
    }

    //
    //  getWorkOrderTypeForAction_
    //
    function getWorkOrderTypeForAction_(serviceLineItemAction, changeRequestTypeReceived) {
        var xngOrderType = null;
        if(serviceLineItemAction == "A") {
            xngOrderType = "I";
        }
        else if(serviceLineItemAction == "D") {
            xngOrderType = "O";
        }
        else if(serviceLineItemAction == "M") {
            if(changeRequestTypeReceived == "RELOCATION" ||
               changeRequestTypeReceived == "RELOCATION_BW" ||
               changeRequestTypeReceived == "RELOCATION_NC") {
                xngOrderType = "T";
            }
            else {
                xngOrderType = "C";
            }
        }

        return xngOrderType;
    }
  ]]></script>
</script>