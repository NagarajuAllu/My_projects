<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.mappingIncomingDSIntoBundleOrder">
  <label>Mapping Incoming DS Into BundleOrder</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="inputDS" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="isSubmit" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
    <parameter name="isCancel" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var order = new Order("stcw.wholesaleBundleOrderSTC");


    // mapping orderHeader
    inputDS.mapTo(order.orderHeader);
    order.orderHeader.receiveDate = new Date();

    // mapping order parameters (NV)
    if(inputDS.OrderParameters != null) {
        if(inputDS.OrderParameters.NameValue != null) {
            for(var i=0; i<inputDS.OrderParameters.NameValue.length; i++) {
                var nvDoc = order.createOrderItemByPath("orderHeaderParameters." + (i+1) + ".orderHeaderParameter");
                inputDS.OrderParameters.NameValue[i].mapTo(nvDoc);
                nvDoc.isVAS = "N";
                nvDoc.parentElementId = order.orderHeader.id;
            }
        }
    }

    // mapping child elements
    if(inputDS.ParentLineItem != null) {
        for(var i=0; i<inputDS.ParentLineItem.length; i++) {
            var bundleDS = inputDS.ParentLineItem[i];
            var orderItemPathForBundle = "parentLineItems." + (i+1);
            // mapping bundle
            var bundleDoc = order.createOrderItemByPath(orderItemPathForBundle + ".parentLineItem");
            bundleDoc.lineItemIdentifier = bundleDS.ParentLineItemIdentifer;
            bundleDoc.elementTypeInOrderTree = "B";
            bundleDoc.isSubmit = isSubmit;
            bundleDoc.isCancel = (isCancel && bundleDS.Action == "C");
            bundleDoc.provisioningFlag = "PROVISIONING";
            bundleDoc.orderRowItemId = parseInt(bundleDS.OrderRowItemId);
            bundleDoc.quantity = getQuantity_(order.orderHeader.orderType, bundleDS.Quantity);
            bundleDoc.reservationDays = getReservationDays_(order.orderHeader.orderType, bundleDS.ReservationDays);
            bundleDS.mapTo(bundleDoc);
            // set provisioning business unit
            bundleDoc.provisioningBU = stcw.getProvisioningBU(bundleDoc.productCode, bundleDoc.serviceType);
            bundleDoc.priority = getPriority_(order.orderHeader.orderType, bundleDoc.productCode, bundleDoc.serviceType, bundleDoc.reasonCode, bundleDoc.priority);
            bundleDoc.isVAS = isVAS_(bundleDoc.lineItemType);

            // mapping bundle NV
            if(bundleDS.ParentLineItemNameValueParameters != null) {
                if(bundleDS.ParentLineItemNameValueParameters.NameValue != null) {
                    for(var j=0; j<bundleDS.ParentLineItemNameValueParameters.NameValue.length; j++) {
                        var nvDoc = order.createOrderItemByPath(orderItemPathForBundle + ".parentLineItemNameValueParameters." + (j+1) + ".parentLineItemNameValueParameter");
                        bundleDS.ParentLineItemNameValueParameters.NameValue[j].mapTo(nvDoc);
                        nvDoc.isVAS = "N";
                        nvDoc.parentElementId = bundleDoc.id;
                    }
                }
            }

            // mapping bundle VAS NV
            if(bundleDS.ParentLineItemVASNVParameters != null) {
                if(bundleDS.ParentLineItemVASNVParameters.VASNameValue != null) {
                    for(var j=0; j<bundleDS.ParentLineItemVASNVParameters.VASNameValue.length; j++) {
                        var nvDoc = order.createOrderItemByPath(orderItemPathForBundle + ".parentLineItemVASNVParameters." + (j+1) + ".parentLineItemVASNVParameter");
                        bundleDS.ParentLineItemVASNVParameters.VASNameValue[j].mapTo(nvDoc);
                        nvDoc.isVAS = "Y";
                        nvDoc.parentElementId = bundleDoc.id;
                    }
                }
            }

             // mapping bundle blockParameters
            if(bundleDS.ParentLineItemsBlockParameters != null) {
                if(bundleDS.ParentLineItemsBlockParameters.BlockNameValueParameter != null) {
                    for(var j=0; j<bundleDS.ParentLineItemsBlockParameters.BlockNameValueParameter.length; j++) {
                        var blockNVDoc = order.createOrderItemByPath(orderItemPathForBundle + ".parentLineItemBlockParameters." + (j+1) + ".parentLineItemBlockParameter");
                        bundleDS.ParentLineItemsBlockParameters.BlockNameValueParameter[j].mapTo(blockNVDoc);
                        blockNVDoc.parentElementId = bundleDoc.id;
                        if(bundleDS.ParentLineItemsBlockParameters.BlockNameValueParameter[j].BlockParameterValues != null) {
                            if(bundleDS.ParentLineItemsBlockParameters.BlockNameValueParameter[j].BlockParameterValues.BlockParameterValue != null) {
                                for(var z=0; z<bundleDS.ParentLineItemsBlockParameters.BlockNameValueParameter[j].BlockParameterValues.BlockParameterValue.length; z++) {
                                    createBlockValue_(bundleDS.ParentLineItemsBlockParameters.BlockNameValueParameter[j].BlockParameterValues.BlockParameterValue[z], blockNVDoc.id);
                                }
                            }
                        }
                    }
                }
            }

            // mapping services
            if(bundleDS.SVCLineItems != null) {
                for(var j=0; j<bundleDS.SVCLineItems.length; j++) {
                    var serviceDS = bundleDS.SVCLineItems[j];
                    var orderItemPathForCircuit = orderItemPathForBundle + ".services." + (j+1);
                    // mapping service
                    var serviceDoc = order.createOrderItemByPath(orderItemPathForCircuit + ".serviceLineItem");
                    serviceDoc.lineItemIdentifier = serviceDS.SvcLineItemInstanceIdentifier;
                    serviceDoc.elementTypeInOrderTree = "C";
                    serviceDoc.isSubmit = isSubmit;
                    serviceDoc.isCancel = (isCancel && serviceDS.Action == "C");
                    serviceDoc.orderRowItemId = parseInt(serviceDS.OrderRowItemId);
                    serviceDoc.quantity = getQuantity_(order.orderHeader.orderType, serviceDS.Quantity);
                    serviceDoc.reservationDays = getReservationDays_(order.orderHeader.orderType, serviceDS.ReservationDays);
                    serviceDS.mapTo(serviceDoc);
                    // set provisioning business unit
                    serviceDoc.provisioningBU = stcw.getProvisioningBU(bundleDoc.productCode, serviceDoc.serviceType);
                    serviceDoc.priority = getPriority_(order.orderHeader.orderType, bundleDoc.productCode, serviceDoc.serviceType, serviceDoc.reasonCode, serviceDoc.priority);
                    serviceDoc.isVAS = isVAS_(serviceDoc.lineItemType);


                    // mapping service NV
                    if(serviceDS.SvcLineItemNameValueParameters != null) {
                        if(serviceDS.SvcLineItemNameValueParameters.NameValue != null) {
                            for(var k=0; k<serviceDS.SvcLineItemNameValueParameters.NameValue.length; k++) {
                                var nvDoc = order.createOrderItemByPath(orderItemPathForCircuit + ".serviceLineItemNameValueParameters." + (k+1) + ".serviceLineItemNameValueParameter");
                                serviceDS.SvcLineItemNameValueParameters.NameValue[k].mapTo(nvDoc);
                                nvDoc.isVAS = "N";
                                nvDoc.parentElementId = serviceDoc.id;
                            }
                        }
                    }

                    // mapping service VAS NV
                    if(serviceDS.SvcLineItemVASNVParameters != null) {
                        if(serviceDS.SvcLineItemVASNVParameters.VASNameValue != null) {
                            for(var k=0; k<serviceDS.SvcLineItemVASNVParameters.VASNameValue.length; k++) {
                                var nvDoc = order.createOrderItemByPath(orderItemPathForCircuit + ".serviceLineItemVASNVParameters." + (k+1) + ".serviceLineItemVASNVParameter");
                                serviceDS.SvcLineItemVASNVParameters.VASNameValue[k].mapTo(nvDoc);
                                nvDoc.isVAS = "Y";
                                nvDoc.parentElementId = serviceDoc.id;
                            }
                        }
                    }

                    // mapping service blockParameters
                    if(serviceDS.SvcLineItemsBlockParameters != null) {
                        if(serviceDS.SvcLineItemsBlockParameters.BlockNameValueParameter != null) {
                            for(var k=0; k<serviceDS.SvcLineItemsBlockParameters.BlockNameValueParameter.length; k++) {
                                var blockNVDoc = order.createOrderItemByPath(orderItemPathForCircuit + ".serviceLineItemBlockParameters." + (k+1) + ".serviceLineItemBlockParameter");
                                serviceDS.SvcLineItemsBlockParameters.BlockNameValueParameter[k].mapTo(blockNVDoc);
                                blockNVDoc.parentElementId = serviceDoc.id;
                                if(serviceDS.SvcLineItemsBlockParameters.BlockNameValueParameter[k].BlockParameterValues != null) {
                                    if(serviceDS.SvcLineItemsBlockParameters.BlockNameValueParameter[k].BlockParameterValues.BlockParameterValue != null) {
                                        for(var z=0; z<serviceDS.SvcLineItemsBlockParameters.BlockNameValueParameter[k].BlockParameterValues.BlockParameterValue.length; z++) {
                                            createBlockValue_(serviceDS.SvcLineItemsBlockParameters.BlockNameValueParameter[k].BlockParameterValues.BlockParameterValue[z], blockNVDoc.id);
                                        }
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }
    }


    return order;


    function getPriority_(orderType, productCode, lineItemServiceType, lineItemReasonCode, lineItemPriority) {
        var computedPriority = null;

        var configuredPriority = stcw.getPriorityMappingByOType_SType_PCode_RCode(orderType, lineItemServiceType, productCode, lineItemReasonCode);
        if(configuredPriority != null) {
            computedPriority = configuredPriority.priority;
        }
        if (computedPriority == null) {
            computedPriority = lineItemPriority;
        }
        if(computedPriority == null) {
            computedPriority = 1;
        }

        return computedPriority;
    }

    function getQuantity_(orderType, receivedQuantity) {
        var quantity = (receivedQuantity != null ? parseInt(receivedQuantity) : null);
        if(orderType == "F" && (quantity == null || isNaN(quantity))) {
            quantity = 1;
        }
        return quantity;
    }

    function getReservationDays_(orderType, receivedReservationDays) {
        var reservDays = (receivedReservationDays != null ? parseInt(receivedReservationDays) : null);
        if(orderType == "F" && (reservDays == null || isNaN(reservDays))) {
            reservDays = 30;
        }
        return reservDays;
    }

    function createBlockValue_(value, parentDocId) {
        var blockValueDoc = new Document("stcw.blockValue");
        blockValueDoc.parentDocId = parentDocId;
        blockValueDoc.cwOrderId = order.id;
        blockValueDoc.blockValue = value;
        blockValueDoc.save();
    }

    function isVAS_(lineItemType) {
        var isVAS = (lineItemType == "VAS");
        return isVAS;
    }
  ]]></script>
</script>