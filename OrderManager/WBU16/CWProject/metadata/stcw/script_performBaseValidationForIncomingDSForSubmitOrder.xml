<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.performBaseValidationForIncomingDSForSubmitOrder">
  <label>Perform Base Validation For Incoming DS For SubmitOrder</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="inputDS" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var validationErrors = null;

    var orderStatus = inputDS.OrderStatus;
    if(orderStatus == null) {
        validationErrors = stcw.appendToValidationErrors("AE0008", Global.translateText("AE0008", null, ["Bundle Order STC", "'NULL'", "Submit Order"]), validationErrors);
    }
    else {
        var orderStatusUpperCase = orderStatus.toUpperCase();
        var isValid = (orderStatusUpperCase == "NEW");

        if(!isValid) {
    debugPrintln(stcc.getSysdateForLog() + " performBaseValidationForIncomingDSForSubmitOrder (" + inputDS.OrderNumber + ") - Invalid OrderStatus for SubmitOrder: " + orderStatusUpperCase);
            validationErrors = stcw.appendToValidationErrors("AE0008", Global.translateText("AE0008", null, ["Bundle Order STC", inputDS.OrderStatus, "Submit Order"]), validationErrors);
        }
    }


    var orderType = inputDS.OrderType;
    if(orderType == null) {
         validationErrors = stcw.appendToValidationErrors("AE0006", Global.translateText("AE0006", null, ["OrderType", inputDS.OrderNumber]), validationErrors);
    }

    // checking that the order doesn't exist
    var searchDoc = new Document("stcw.search_bundleOrder");
    searchDoc.orderNumber = inputDS.OrderNumber;
    var orderListFound = Finder.runFinder("stcw.findAllSTCBundleOrders_Script", "select", searchDoc);
    if(orderListFound != null && orderListFound.length > 0) {
        var orderId = orderListFound[0].id;
        var orderFound = Order.getOrderById(orderId);
        var existProcessKO = stcw.checkIfExistProcessKOInOrchestrationTable(orderId);
        if(!existProcessKO) {
            // there are no processes in KO status in Orchestration table, so rejecting the order
            validationErrors = stcw.appendToValidationErrors("AE0001", Global.translateText("AE0001"), validationErrors);
        }
        else {
            var allProcessesCompleted = stcw.checkAllProcessesInOrchestrationTableAreCompleted(orderId);
            if(!allProcessesCompleted) {
                validationErrors = stcw.appendToValidationErrors("AE0088", Global.translateText("AE0088"), validationErrors);
            }
        }
    }


    if(inputDS.ParentLineItem == null || inputDS.ParentLineItem.length == 0) {
        validationErrors = stcw.appendToValidationErrors("DE0292", Global.translateText("DE0292", null, "ParentLineItem"), validationErrors);
    }
    else {
        if(inputDS.ParentLineItem.length > 1) {
            validationErrors = stcw.appendToValidationErrors("AE0137", Global.translateText("AE0137", null, ["ParentLineItem", inputDS.ParentLineItem.length]), validationErrors);
        }
        else {
            // checking numeric attributes in DS
            for(var i=0; i<inputDS.ParentLineItem.length; i++) {
                var bundleDS = inputDS.ParentLineItem[i];
                if(bundleDS.Quantity != null && isNaN(parseInt(bundleDS.Quantity))) {
                     validationErrors = stcw.appendToValidationErrors("AE0136", Global.translateText("AE0136", null, ["Quantity", bundleDS.ParentLineItemIdentifer, bundleDS.Quantity]), validationErrors);
                }
                if(bundleDS.OrderRowItemId != null && isNaN(parseInt(bundleDS.OrderRowItemId))) {
                     validationErrors = stcw.appendToValidationErrors("AE0136", Global.translateText("AE0136", null, ["OrderRowItemId", bundleDS.ParentLineItemIdentifer, bundleDS.OrderRowItemId]), validationErrors);
                }
                if(bundleDS.ReservationDays != null && isNaN(parseInt(bundleDS.ReservationDays))) {
                     validationErrors = stcw.appendToValidationErrors("AE0136", Global.translateText("AE0136", null, ["ReservationDays", bundleDS.ParentLineItemIdentifer, bundleDS.ReservationDays]), validationErrors);
                }

                // checking services
                if(bundleDS.SVCLineItems != null) {
                    for(var j=0; j<bundleDS.SVCLineItems.length; j++) {
                        var serviceDS = bundleDS.SVCLineItems[j];
                        if(serviceDS.Quantity != null && isNaN(parseInt(serviceDS.Quantity))) {
                             validationErrors = stcw.appendToValidationErrors("AE0136", Global.translateText("AE0136", null, ["Quantity", serviceDS.SvcLineItemInstanceIdentifier, serviceDS.Quantity]), validationErrors);
                        }
                        if(serviceDS.OrderRowItemId != null && isNaN(parseInt(serviceDS.OrderRowItemId))) {
                             validationErrors = stcw.appendToValidationErrors("AE0136", Global.translateText("AE0136", null, ["OrderRowItemId", serviceDS.SvcLineItemInstanceIdentifier, serviceDS.OrderRowItemId]), validationErrors);
                        }
                        if(serviceDS.ReservationDays != null && isNaN(parseInt(serviceDS.ReservationDays))) {
                             validationErrors = stcw.appendToValidationErrors("AE0136", Global.translateText("AE0136", null, ["ReservationDays", serviceDS.SvcLineItemInstanceIdentifier, serviceDS.ReservationDays]), validationErrors);
                        }
                    }
                }
            }
        }
    }


    return validationErrors;
  ]]></script>
</script>