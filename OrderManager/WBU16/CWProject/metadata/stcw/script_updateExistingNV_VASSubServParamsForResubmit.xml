<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.updateExistingNV_VASSubServParamsForResubmit">
  <label>Update Existing NV Pair and VAS Parameters For SubServiceLineItem For Resubmit</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="existingLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="receivedLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="validationErrors" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="lineItemIdentifier" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="existingOrder" type="rifp">
      <type>order_stcw.wholesaleBundleOrderSTC</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    // nv check; it loops in existing NV pair and verifies if it exists also in received one
    if(receivedLineItemContainer.subServiceLineItemNameValueParameters != null) {
        for(var i=0; i<receivedLineItemContainer.subServiceLineItemNameValueParameters.length; i++) {
            var receivedNVName = receivedLineItemContainer.subServiceLineItemNameValueParameters[i].subServiceLineItemNameValueParameter.name;
            var found = false;

            if(existingLineItemContainer.subServiceLineItemNameValueParameters != null) {
                for(var j=0; j<existingLineItemContainer.subServiceLineItemNameValueParameters.length && !found; j++) {
                    if(receivedNVName == existingLineItemContainer.subServiceLineItemNameValueParameters[j].subServiceLineItemNameValueParameter.name) {
                        // found; comparing the values
                        found = true;
                        existingLineItemContainer.subServiceLineItemNameValueParameters[j].subServiceLineItemNameValueParameter.value = receivedLineItemContainer.subServiceLineItemNameValueParameters[i].subServiceLineItemNameValueParameter.value;
                        existingLineItemContainer.subServiceLineItemNameValueParameters[j].subServiceLineItemNameValueParameter.nvAction = receivedLineItemContainer.subServiceLineItemNameValueParameters[i].subServiceLineItemNameValueParameter.nvAction;
                    }
                }
            }

            if(!found) {
                var position = (existingLineItemContainer.subServiceLineItemNameValueParameters != null ? existingLineItemContainer.subServiceLineItemNameValueParameters.length : 0);
                var containerItemPath = (existingLineItemContainer.subServiceLineItemNameValueParameters != null ? existingLineItemContainer.subServiceLineItemNameValueParameters.orderDataPath : (existingLineItemContainer.orderDataPath + ".subServiceLineItemNameValueParameters"));
                var nvDoc = existingOrder.createOrderItemByPath(containerItemPath + "." + (position+1) + ".subServiceLineItemNameValueParameter");
                nvDoc.name = receivedLineItemContainer.subServiceLineItemNameValueParameters[i].subServiceLineItemNameValueParameter.name;
                nvDoc.value = receivedLineItemContainer.subServiceLineItemNameValueParameters[i].subServiceLineItemNameValueParameter.value;
                nvDoc.nvAction = receivedLineItemContainer.subServiceLineItemNameValueParameters[i].subServiceLineItemNameValueParameter.nvAction;
                nvDoc.parentElementId = existingLineItemContainer.subServiceLineItem.id;
            }
        }
    }

    // vas check; it loops in existing VAS pairs and verifies if it exists also in received one
    if(receivedLineItemContainer.subServiceLineItemVASNVParameters != null) {
        for(var i=0; i<receivedLineItemContainer.subServiceLineItemVASNVParameters.length; i++) {
            var receivedNVName = receivedLineItemContainer.subServiceLineItemVASNVParameters[i].subServiceLineItemVASNVParameter.name;
            var found = false;

            if(existingLineItemContainer.subServiceLineItemVASNVParameters != null) {
                for(var j=0; j<existingLineItemContainer.subServiceLineItemVASNVParameters.length && !found; j++) {
                    if(receivedNVName == existingLineItemContainer.subServiceLineItemVASNVParameters[j].subServiceLineItemVASNVParameter.name) {
                        // found; comparing the values
                        found = true;
                        existingLineItemContainer.subServiceLineItemVASNVParameters[j].subServiceLineItemVASNVParameter.value = receivedLineItemContainer.subServiceLineItemVASNVParameters[i].subServiceLineItemVASNVParameter.value;
                        existingLineItemContainer.subServiceLineItemVASNVParameters[j].subServiceLineItemVASNVParameter.nvAction = receivedLineItemContainer.subServiceLineItemVASNVParameters[i].subServiceLineItemVASNVParameter.nvAction;
                    }
                }
            }

            if(!found) {
                var position = (existingLineItemContainer.subServiceLineItemVASNVParameters != null ? existingLineItemContainer.subServiceLineItemVASNVParameters.length : 0);
                var containerItemPath = (existingLineItemContainer.subServiceLineItemVASNVParameters != null ? existingLineItemContainer.subServiceLineItemVASNVParameters.orderDataPath : (existingLineItemContainer.orderDataPath + ".subServiceLineItemVASNVParameters"));
                var vasDoc = existingOrder.createOrderItemByPath(containerItemPath + "." + (position+1) + ".subServiceLineItemVASNVParameter");
                vasDoc.name = receivedLineItemContainer.subServiceLineItemVASNVParameters[i].subServiceLineItemVASNVParameter.name;
                vasDoc.value = receivedLineItemContainer.subServiceLineItemVASNVParameters[i].subServiceLineItemVASNVParameter.value;
                vasDoc.nvAction = receivedLineItemContainer.subServiceLineItemVASNVParameters[i].subServiceLineItemVASNVParameter.nvAction;
                vasDoc.isVAS = "Y";
                vasDoc.parentElementId = existingLineItemContainer.subServiceLineItem.id;
            }
        }
    }

    return validationErrors;
  ]]></script>
</script>