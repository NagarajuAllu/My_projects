<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.getDependentSiblingChildServices">
  <label>Get Dependent Sibling Child Services</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="serviceType" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="orderUnderMgmt" type="rifp">
      <type>order_stcw.wholesaleBundleOrderSTC</type>
    </parameter>
    <parameter name="elementTypeInOrderTree" type="rifp">
      <type>dtype_stcw.elementTypeInOrderTree</type>
    </parameter>
    <parameter name="priority" type="rifp">
      <type>dtype_wsws.lineItemPriority</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var debugMsg = " getDependentChildServices - ";

    debugPrintln(stcc.getSysdateForLog() + debugMsg + "(" + serviceType + "," + orderUnderMgmt.id + "," + elementTypeInOrderTree + "," + priority + ")");

    var searchDoc = new Document("stcconf.search_serviceTypesHierarchy");
    searchDoc.parentServiceType = serviceType;

    var resultList = Finder.runFinder("stcconf.findServiceTypeHierarchyConf", "select", searchDoc);

    var childServiceIdList = null;

    if(resultList != null && resultList.length > 0) {
        for(var i=0; i<resultList.length; i++) {
            var childServiceType = resultList[i].childServiceType;

    debugPrintln(stcc.getSysdateForLog() + debugMsg + "Found ChildService <" + childServiceType + "> for service " + serviceType);

            var searchDocForLineItem = new Document("stcw.search_LineItemByServiceTypeAndPosition");
            searchDocForLineItem.orderId = orderUnderMgmt.id;
            searchDocForLineItem.receivedServiceType = childServiceType;
            searchDocForLineItem.elementTypeInOrderTree = (resultList[i].isSibling ? elementTypeInOrderTree : null);
            searchDocForLineItem.priority = (resultList[i].isSibling ? priority : null);

            var resultServiceList = Finder.runFinder("stcw.findLineItemInOrderByServiceTypeAndPosition", "select", searchDocForLineItem);
            if(resultServiceList != null && resultServiceList.length > 0) {
                for (var j=0; j<resultServiceList.length; j++) {
                    var foundServiceId = resultServiceList[j].id;
    debugPrintln(stcc.getSysdateForLog() + debugMsg + "Processing #" +  j + " instance of service <" + childServiceType + "> in order with given priority and position: " + foundServiceId);

                    var orchestrationRecord = stcw.getRecordInOrchestrationTableByLineItemId(foundServiceId);
                    if(orchestrationRecord != null && orchestrationRecord.provisionable) {
                        childServiceIdList = appendToChildServiceIdList_(childServiceIdList, foundServiceId);
    debugPrintln(stcc.getSysdateForLog() + debugMsg + "Found childService instance: " + foundServiceId);
                    }
                }
            }
            else {
    debugPrintln(stcc.getSysdateForLog() + debugMsg + "Not ChildServices <" + childServiceType + "> in order with given priority and position");
            }
        }
    }
    else {
    debugPrintln(stcc.getSysdateForLog() + debugMsg + "Not ChildServices for serviceType <" + serviceType + "> in hierarchy");
    }

    return childServiceIdList;



    function appendToChildServiceIdList_(childServiceIdList, foundServiceOd) {
        if(childServiceIdList == null) {
            childServiceIdList = new Array();
        }

        childServiceIdList.push(foundServiceId);

        return childServiceIdList;
    }
  ]]></script>
</script>