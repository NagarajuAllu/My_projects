<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.checkIfItemsInActiveOrderWereReceived">
  <label>Check If Items In ActiveOrder Were Received</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="cwActiveOrderId" type="rifp">
      <type>dtype_cwf.docId</type>
    </parameter>
    <parameter name="orderNumber" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="parentElementDocIdInActiveOrder" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="containerInCurrentOrder" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="elementTypeInOrderTree" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="failureArray" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var validationErrors = null;
    var debugMsg = "checkIfItemsInActiveOrderWereReceived (" + orderNumber + ")";

    var activeOrder = Order.getOrderById(cwActiveOrderId);

    var orchestrationRecordsForChildren = stcw.findRecordsInOrchTabByOrderId_ParentId(cwActiveOrderId, parentElementDocIdInActiveOrder);
    if(orchestrationRecordsForChildren != null && orchestrationRecordsForChildren.length > 0) {
        for(var i=0; i<orchestrationRecordsForChildren.length; i++) {
            var childIdentifierForActiveOrder = orchestrationRecordsForChildren[i].lineItemIdentifier;
            var childDocIdForActiveOrder = orchestrationRecordsForChildren[i].cwDocId;
    ///////////
    //  WBU Counterpart of STCSUP-1133
    //        if(orchestrationRecordsForChildren[i].provisionable) {
                var childDocInActiveOrder = Document.readDoc("stcw.lineItemDocument", childDocIdForActiveOrder);
                if(childDocInActiveOrder != null) {
                    if(childDocInActiveOrder.action != 'D') {
                        // search this childElement in the corresponding elements of the received order
                        var found = false;

                        if(elementTypeInOrderTree == "C") {
                            if(containerInCurrentOrder.services != null) {
                                for(var j=0; j<containerInCurrentOrder.services.length && !found; j++) {
                                    found = (containerInCurrentOrder.services[j].serviceLineItem.lineItemIdentifier == childIdentifierForActiveOrder);

                                    if(found) {
                                        failureArray = stcw.checkIfItemsInActiveOrderWereReceived(cwActiveOrderId, orderNumber, childDocIdForActiveOrder, containerInCurrentOrder.services[j], "S", failureArray);
                                    }
                                }

                                if(!found) {
                                    // Generate error for missing service
                                    validationErrors = stcw.appendToValidationErrors("AE0053", Global.translateText("AE0053", null, ["Service", childIdentifierForActiveOrder]), validationErrors, debugMsg);
                                }
                            }
                            else {
                                // according to the script i'm here because the activeOrder has some element but in the new order they are missing
                                validationErrors = stcw.appendToValidationErrors("AE0053", Global.translateText("AE0053", null, ["Service", childIdentifierForActiveOrder]), validationErrors, debugMsg);
                            }
                        }
                        else if(elementTypeInOrderTree == "S") {
                            if(containerInCurrentOrder.subServices != null) {
                                for(var j=0; j<containerInCurrentOrder.subServices.length && !found; j++) {
                                    found = (containerInCurrentOrder.subServices[j].subServiceLineItem.lineItemIdentifier == childIdentifierForActiveOrder);

                                    if(found) {
                                        failureArray = stcw.checkIfItemsInActiveOrderWereReceived(cwActiveOrderId, orderNumber, childDocIdForActiveOrder, containerInCurrentOrder.subServices[j], "T", failureArray);
                                    }
                                }

                                if(!found) {
                                    // Generate error for missing subService
                                    validationErrors = stcw.appendToValidationErrors("AE0053", Global.translateText("AE0053", null, ["SubService", childIdentifierForActiveOrder]), validationErrors, debugMsg);
                                }
                            }
                            else {
                                // according to the script i'm here because the activeOrder has some element but in the new order they are missing
                                validationErrors = stcw.appendToValidationErrors("AE0053", Global.translateText("AE0053", null, ["SubService", childIdentifierForActiveOrder]), validationErrors, debugMsg);
                            }
                        }
                        else if(elementTypeInOrderTree == "T") {
                            if(containerInCurrentOrder.subSubServices != null) {
                                for(var j=0; j<containerInCurrentOrder.subSubServices.length && !found; j++) {
                                    found = (containerInCurrentOrder.subSubServices[j].subSubServiceLineItem.lineItemIdentifier == childIdentifierForActiveOrder);
                                }

                                if(!found) {
                                    // Generate error for missing subSubService
                                    validationErrors = stcw.appendToValidationErrors("AE0053", Global.translateText("AE0053", null, ["Sub-SubService", childIdentifierForActiveOrder]), validationErrors, debugMsg);
                                }
                            }
                            else {
                                // according to the script i'm here because the activeOrder has some element but in the new order they are missing
                                validationErrors = stcw.appendToValidationErrors("AE0053", Global.translateText("AE0053", null, ["Sub-SubService", childIdentifierForActiveOrder]), validationErrors, debugMsg);
                            }
                        } // end else (elementTypeInOrderTree)
                    }
                    else {
                        // checking that the disconnected lineItem is not in the received order
                        var found = false;

                        if(elementTypeInOrderTree == "C") {
                            if(containerInCurrentOrder.services != null) {
                                for(var j=0; j<containerInCurrentOrder.services.length && !found; j++) {
                                    found = (containerInCurrentOrder.services[j].serviceLineItem.lineItemIdentifier == childIdentifierForActiveOrder);
                                }

                                if(found) {
                                    if(activeOrder.orderHeader.orderType == "F") {
                                        // ignoring it!
                                    }
                                    else {
                                        // Generate error because there is a service previously disconnected
                                        validationErrors = stcw.appendToValidationErrors("AE0073", Global.translateText("AE0073", null, ["Service", childIdentifierForActiveOrder]), validationErrors, debugMsg);
                                    }
                                }
                            }
                        }
                        else if(elementTypeInOrderTree == "S") {
                            if(containerInCurrentOrder.subServices != null) {
                                for(var j=0; j<containerInCurrentOrder.subServices.length && !found; j++) {
                                    found = (containerInCurrentOrder.subServices[j].subServiceLineItem.lineItemIdentifier == childIdentifierForActiveOrder);
                                }

                                if(found) {
                                    if(activeOrder.orderHeader.orderType == "F") {
                                        // ignoring it!
                                    }
                                    else {
                                        // Generate error because there is a subService previously disconnected
                                        validationErrors = stcw.appendToValidationErrors("AE0073", Global.translateText("AE0073", null, ["SubService", childIdentifierForActiveOrder]), validationErrors, debugMsg);
                                    }
                                }
                            }
                        }
                        else if(elementTypeInOrderTree == "T") {
                            if(containerInCurrentOrder.subSubServices != null) {
                                for(var j=0; j<containerInCurrentOrder.subSubServices.length && !found; j++) {
                                    found = (containerInCurrentOrder.subSubServices[j].subSubServiceLineItem.lineItemIdentifier == childIdentifierForActiveOrder);
                                }

                                if(found) {
                                    if(activeOrder.orderHeader.orderType == "F") {
                                        // ignoring it!
                                    }
                                    else {
                                        // Generate error because there is a subSubService previously disconnected
                                        validationErrors = stcw.appendToValidationErrors("AE0073", Global.translateText("AE0073", null, ["Sub-SubService", childIdentifierForActiveOrder]), validationErrors, debugMsg);
                                    }
                                }
                            }
                        } // end else (elementTypeInOrderTree)
                    }
                } // end if(childDocInActiveOrder != null)
    //        }
    //        else {
    //            // element is not provisionable
    //        }
    //
    // END CounterPart for STCSUP-1133
    /////////////////////////
        } // end for(orchestrationRecordsForChildren)
    }


    if(validationErrors != null) {
        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, orderNumber, failureArray, true);
    }
    return failureArray;
  ]]></script>
</script>