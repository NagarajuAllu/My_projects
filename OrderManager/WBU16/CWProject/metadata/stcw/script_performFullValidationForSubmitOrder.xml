<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.performFullValidationForSubmitOrder">
  <label>Perform Full Validation For SubmitOrder</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="bundleOrder" type="rifp">
      <type>order_stcw.wholesaleBundleOrderSTC</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var failureArray = null;

    // check number of bundles
    if(bundleOrder.parentLineItems.length > 1) {
        var validationError = ["AE0028", Global.translateText("AE0028")];
        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, bundleOrder.orderHeader.orderNumber, failureArray, true);
    }

    if(bundleOrder.parentLineItems[0].parentLineItem.provisioningBU == "M" && bundleOrder.orderHeader.orderType == "F") {
        var validationError = ["AE0010", Global.translateText("AE0010", null, ["orderType", bundleOrder.orderHeader.orderType, bundleOrder.parentLineItems[0].parentLineItem.provisioningBU])];
        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, bundleOrder.orderHeader.orderNumber, failureArray, true);
    }

    if(bundleOrder.orderHeader.orderType == "T") {
        var validationError = ["AE0010", Global.translateText("AE0010", null, ["orderType", bundleOrder.orderHeader.orderType, bundleOrder.parentLineItems[0].parentLineItem.provisioningBU])];
        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, bundleOrder.orderHeader.orderNumber, failureArray, true);
    }


    // perform full validation on the received order
    failureArray = stcw.performFullValidationOnOrder(bundleOrder, true, failureArray);

    // perform validation for reservationNumber
    failureArray = stcw.performValidationOnOrderForReservationNumber(bundleOrder, true, failureArray);

    // perform validation with Granite
    failureArray = stcw.performOrderValidationInGranite(bundleOrder, true, failureArray);


    // perform validations required by orderType <> 'I':
    // 1. all the lineItems in the active order with action <> 'D' have to be in the received orders
    // 2. in case the active orderType is 'O', no other orders can be received
    if(bundleOrder.orderHeader.orderType != null &&
        ((bundleOrder.orderHeader.orderType != "I" && bundleOrder.orderHeader.orderType != "F") ||
         (bundleOrder.orderHeader.orderType == "F" && bundleOrder.orderHeader.feasibilityFor == "CHANGE"))) {
        var validationErrors = null;

        var isQuote = (bundleOrder.orderHeader.orderType == "F");

        for(var i=0; i<bundleOrder.parentLineItems.length; i++) {
            var bundleIdentifier = bundleOrder.parentLineItems[i].parentLineItem.lineItemIdentifier;
            var activeBundle = stcw.getAllLineItemsByIdentifierAndProvisioningFlag(bundleIdentifier, "B", "ACTIVE");
            if(activeBundle != null && activeBundle.length > 0) {
                // 1. check that all the lineItems in the active order with action <> 'D' have to be in the received orders
                // use ds_ws.checkIfItemsInActiveOrderWereReceived(cwOrderId,orderNumber,parentElementDocIdInActiveOrder,containerInCurrentOrder,elementTypeInOrderTree,failureArray)
                failureArray = stcw.checkIfItemsInActiveOrderWereReceived(activeBundle[0].cwOrderId, bundleOrder.orderHeader.orderNumber, activeBundle[0].id, bundleOrder.parentLineItems[0], "C", failureArray);

                var activeBundleOrder = Order.getOrderById(activeBundle[0].cwOrderId);
                if(activeBundleOrder != null) {
                    // 2. perform validation on Resume: in case of orderType 'E', the active orderType has to be 'D'
                    if(bundleOrder.orderHeader.orderType == "E") {
                        if(activeBundleOrder.orderHeader.orderType != "D") {
                            // the "ACTIVE" bundle is in an order whose type is not "Tempo Disconnect"
                            validationErrors = ["AE0051", Global.translateText("AE0051", null, activeBundleOrder.orderHeader.orderType)];
                            failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, true);
                        }
                    }

                     // 3. in case the active orderType is 'D', only orders with orderType 'E' can be received
                    if(activeBundleOrder.orderHeader.orderType == "D") {
                        if(bundleOrder.orderHeader.orderType != "E" && bundleOrder.orderHeader.orderType != "O") {
                            // the "ACTIVE" bundle is in an order whose type is "Tempo Disconnect"; the next one can be only "Resume"
                            validationErrors = ["AE0069", Global.translateText("AE0069", null, bundleOrder.orderHeader.orderType)];
                            failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, true);
                        }
                    }

                    // 4. in case the active orderType is 'O', no other orders can be received
                    if(activeBundleOrder.orderHeader.orderType == "O") {
                        // the "ACTIVE" bundle is in an order whose type is "Permanent Disconnect"
                        validationErrors = ["AE0068", Global.translateText("AE0068", null, bundleOrder.orderHeader.orderType)];
                        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, true);
                    }
                }
                else {
                    validationErrors = ["AE0052", Global.translateText("AE0052", null, activeBundle[0].cwOrderId)];
                    failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, true);
                }

                // 6. setting the status of the elements with action = 'N' with the status of the corresponding element in active bundle
                stcw.setStatusOfLineItemsWithActionNFromActiveOrder(bundleOrder.parentLineItems[i], activeBundle[0].cwOrderId, isQuote);

                // 7. setting the status of the element with action = 'D' to completed in case is in a quote
    debugPrintln("Before setStatusOfLineItemsWithActionDForFChangeOrder; isQuote = " + isQuote);
                if(isQuote) {
                    stcw.setStatusOfLineItemsWithActionDForFChangeOrder(bundleOrder.parentLineItems[i]);
                }
    debugPrintln("after setStatusOfLineItemsWithActionDForFChangeOrder");
            }
            else {
                validationErrors = ["AE0046", Global.translateText("AE0046", null, bundleIdentifier)];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, true);
            }

            // managing the parentLineItem in case of VAS
            var isLegacyWithVAS = stcw.isLegacyService(bundleOrder.parentLineItems[i], true);
            if(isLegacyWithVAS) {
                var bundleContainer = bundleOrder.parentLineItems[i];
                var hasVAS = (bundleContainer.services != null);

                if(bundleContainer.parentLineItem.action == 'N') {
                    if(hasVAS) {
                        // this is to bypass a lot of possible errors - the default value is set to "COMPLETED"
                        var finalStatus = (isQuote ? "FEASIBLE" : "COMPLETED");
                        var finalCompletionDate = new Date();
                        var orchestrationRecordForLineItemInActiveBundle = stcw.getRecordInOrchTabByItemIdentifier_OrdNum_CwOrdId(null, activeBundle[0].cwOrderId, bundleContainer.parentLineItem.lineItemIdentifier);
                        if(orchestrationRecordForLineItemInActiveBundle != null) {
                            var activeLineItem = Document.readDoc("stcw.lineItemDocument", orchestrationRecordForLineItemInActiveBundle.cwDocId);
                            if(activeLineItem != null) {
                                finalStatus = (isQuote ? "FEASIBLE" :
                                                         ((activeLineItem.lineItemStatus == "FEASIBLE") ? "COMPLETED" : activeLineItem.lineItemStatus));
                                finalCompletionDate = activeLineItem.completionDate;
                            }
                        }
                        bundleContainer.parentLineItem.lineItemStatus = finalStatus;
                        bundleContainer.parentLineItem.completionDate = finalCompletionDate;
                    }
                    else {
                        // received wrong action
                        validationErrors = ["AE0044", Global.translateText("AE0044", null, [bundleOrder.orderHeader.orderType, bundleContainer.parentLineItem.action, bundleOrder.orderHeader.orderStatus])];
                        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleContainer.parentLineItem.lineItemIdentifier, failureArray, true);
                    }
                }
            }
        }
    }

    if(bundleOrder.parentLineItems[0].parentLineItem.provisioningBU == "H") {
        // perform validation for FTTH services
        failureArray = stcw.performFullValidationOnFTTHServices(bundleOrder, true, false, failureArray);
    }
    else if(bundleOrder.parentLineItems[0].parentLineItem.provisioningBU == "M") {
        // perform validation for FTTH services
        failureArray = stcw.performFullValidationOnLTEServices(bundleOrder, true, false, failureArray)
    }


    return failureArray;
  ]]></script>
</script>