<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.checkIfActionIsCorrectForLineItemIdentifier">
  <label>Check If Action Is Correct For LineItemIdentifier</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="bundleLineItemActive" type="rifp">
      <type>doc_stcw.lineItemDocument</type>
    </parameter>
    <parameter name="lineItemToCheck" type="rifp">
      <type>doc_stcw.lineItemDocument</type>
    </parameter>
    <parameter name="orderType" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="parentLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var validationErrors = null;

    if(lineItemToCheck.action == "A") {
        // the lineItem is accepted if:
        // - never received
        // - received but the active version of the lineItem is CANCELLED and the previous action of the lineItem was "Add"

        var foundLineItems = stcw.getAllLineItemsByIdentifierAndProvisioningFlag(lineItemToCheck.lineItemIdentifier);
        var error = false;
        if(foundLineItems != null && foundLineItems.length > 0) {
            error = true;
            // it means that the lineItem has been received previously; looking for the "active" version of the lineItem
            var foundLineItem = stcw.getLineItemByServiceNumberAndLIIdAndProvFlag(null, lineItemToCheck.lineItemIdentifier, "ACTIVE");
            if(foundLineItem == null) {
                // not found ... searching for "CANCELLED" version of the lineItem
                foundLineItem = stcw.getLineItemByServiceNumberAndLIIdAndProvFlag(null, lineItemToCheck.lineItemIdentifier, "CANCELLED");

                if(foundLineItem == null) {
                    // not found ... searching for "PROVISIONING" version of the lineItem hoping that it's a VAS!
                    var provisioningLineItem = stcw.getLineItemByServiceNumberAndLIIdAndProvFlag(null, lineItemToCheck.lineItemIdentifier, "PROVISIONING");
                    if(provisioningLineItem != null) {
                        if(stcw.checkIfItIsLegacy_F_WithVASNotFeasible(provisioningLineItem.orderId)) {
                            // it means that the existing lineItem belongs to a PROVISIONING "F" order in which the parentLineItem is Feasible and VAS is not Feasible
                            foundLineItem = provisioningLineItem;
                        }
                        else {
                            // belongs to a "generic" order so don't mask the error
                        }
                    }
                }
            }

            if(foundLineItem != null) {
                var orderRelatedToFoundLineItem = Order.getOrderById(foundLineItem.orderId);
                if(orderRelatedToFoundLineItem != null && orderRelatedToFoundLineItem.orderHeader.orderType == "F") {
                    // NO ERROR if the lineItem belong to a Feasibility
                    error = false;
                }
                else {
                    // NO ERROR if the status is CANCELLED and the "original" requested action was equals to "Add";
                    error = (foundLineItem.lineItemStatus != "CANCELLED" || foundLineItem.requestedActionIsA == false);
                }
            }
        }
        if(error) {
            validationErrors = stcw.appendToValidationErrors("AE0048", Global.translateText("AE0048", null, ["lineItem Identifier", lineItemToCheck.lineItemIdentifier]),
                                                             validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");
        }


        foundLineItems = stcw.getAllLineItemsByServiceNumber(lineItemToCheck.serviceNumber);
        error = false;
        if(foundLineItems != null && foundLineItems.length > 0) {
            error = true;
            // it means that the lineItem has been received previously; looking for the "active" version of the lineItem
            var foundLineItem = stcw.getLineItemByServiceNumberAndLIIdAndProvFlag(lineItemToCheck.serviceNumber, null, "ACTIVE");
            if(foundLineItem == null) {
                // not found ... searching for "CANCELLED" version of the lineItem
                foundLineItem = stcw.getLineItemByServiceNumberAndLIIdAndProvFlag(lineItemToCheck.serviceNumber, null, "CANCELLED");

                if(foundLineItem == null) {
                    // not found ... searching for "PROVISIONING" version of the lineItem hoping that it's a VAS!
                    var provisioningLineItem = stcw.getLineItemByServiceNumberAndLIIdAndProvFlag(lineItemToCheck.serviceNumber, null, "PROVISIONING");
                    if(provisioningLineItem != null) {
                        if(stcw.checkIfItIsLegacy_F_WithVASNotFeasible(provisioningLineItem.orderId)) {
                            // it means that the existing lineItem belongs to a PROVISIONING "F" order in which the parentLineItem is Feasible and VAS is not Feasible
                            foundLineItem = provisioningLineItem;
                        }
                        else {
                            // belongs to a "generic" order so don't mask the error
                        }
                    }
                }

            }

            if(foundLineItem != null) {
                var orderRelatedToFoundLineItem = Order.getOrderById(foundLineItem.orderId);
                if(orderRelatedToFoundLineItem != null && orderRelatedToFoundLineItem.orderHeader.orderType == "F") {
                    // NO ERROR if the lineItem belong to a Feasibility
                    error = false;
                }
                else {
                    // NO ERROR if the status is CANCELLED and the "original" requested action was equals to "Add";
                    error = (foundLineItem.lineItemStatus != "CANCELLED" || foundLineItem.requestedActionIsA == false);
                }
            }
        }
        if(error) {
            validationErrors = stcw.appendToValidationErrors("AE0048", Global.translateText("AE0048", null, ["serviceNumber", lineItemToCheck.serviceNumber]),
                                                             validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");
        }
    }
    else {
        if(bundleLineItemActive != null) {
            var lineItem = stcw.getLineItemInBundleWithIdentifier(bundleLineItemActive, lineItemToCheck.lineItemIdentifier);
            if(lineItem == null) {
                // lineItemIdentifier doesn't belong to the active instance of the bundle
                validationErrors = stcw.appendToValidationErrors("AE0049", Global.translateText("AE0049", null, [lineItemToCheck.lineItemIdentifier, bundleLineItemActive.lineItemIdentifier]),
                                                                 validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");
            }
            else {
                if(lineItem.elementTypeInOrderTree != lineItemToCheck.elementTypeInOrderTree) {
                    // lineItemIdentifier belong to the active instance of the bundle but for a different element
                    validationErrors = stcw.appendToValidationErrors("AE0050", Global.translateText("AE0050", null, [lineItemToCheck.lineItemIdentifier, "elementTypeInOrderTree", lineItem.elementTypeInOrderTree, lineItemToCheck.elementTypeInOrderTree]),
                                                                     validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");
                }

                if(lineItem.serviceNumber != lineItemToCheck.serviceNumber) {
                    // serviceNumber is different; checking if the oldServiceNumber is correct
                    var generateError = true;
                    if(lineItemToCheck.oldServiceNumber != null) {
                        generateError = (lineItem.serviceNumber != lineItemToCheck.oldServiceNumber);
                    }

                    if(generateError) {
                        validationErrors = stcw.appendToValidationErrors("AE0050", Global.translateText("AE0050", null, [lineItemToCheck.lineItemIdentifier, "serviceNumber", lineItem.serviceNumber, lineItemToCheck.serviceNumber]),
                                                                         validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");
                    }
                }

                if(lineItem.serviceType != lineItemToCheck.serviceType) {
                    // serviceType has been changed
                    validationErrors = stcw.appendToValidationErrors("AE0050", Global.translateText("AE0050", null, [lineItemToCheck.lineItemIdentifier, "serviceType", lineItem.serviceType, lineItemToCheck.serviceType]),
                                                                     validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");
                }

                if(lineItem.productCode != lineItemToCheck.productCode) {
                    // productCode has been changed; it's allowed only if it's a change order, the change occurs at parentLineItem level and the actions of all the children are different from "N"
                    var generateError = false;
                    if(orderType == "C" && lineItemToCheck.elementTypeInOrderTree == "B") {
                        // checking the action of all the children; it's ok if all of them are different from "N"
                        if(lineItemToCheck.action == 'N') {
                            generateError = true;
                        }
                        if(parentLineItemContainer != null && parentLineItemContainer.services  != null) {
                            for(var j=0; j<parentLineItemContainer.services.length; j++) {
                                if(parentLineItemContainer.services[j].serviceLineItem.action == 'N') {
                                    generateError = true;
                                }

                                if(parentLineItemContainer.services[j].subServices != null) {
                                    for(var k=0; k<parentLineItemContainer.services[j].subServices.length; k++) {
                                        if(parentLineItemContainer.services[j].subServices[k].subServiceLineItem.action == 'N') {
                                            generateError = true;
                                        }

                                        if(parentLineItemContainer.services[j].subServices[k].subSubServices != null) {
                                            for(var l=0; l<parentLineItemContainer.services[j].subServices[k].subSubServices.length; l++) {
                                                if(parentLineItemContainer.services[j].subServices[k].subSubServices[l].subSubServiceLineItem.action == 'N') {
                                                    generateError = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        // the orderType is different from "C" or it's not a parentLineItem!
                        generateError = true;
                    }

                    if(generateError) {
                        validationErrors = stcw.appendToValidationErrors("AE0050", Global.translateText("AE0050", null, [lineItemToCheck.lineItemIdentifier, "productCode", lineItem.productCode, lineItemToCheck.productCode]),
                                                                         validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");
                    }
                }


                // if the lineItem has been cancelled and requested action was equals to "A", it means that the lineItem has not to be received - because added and then cancelled
                if(lineItem.lineItemStatus == "CANCELLED" && lineItem.requestedActionIsA == true) {
                    // lineItem was added but then cancelled, so it doesn't "exist"
                    validationErrors = stcw.appendToValidationErrors("AE0075", Global.translateText("AE0075", null, lineItemToCheck.lineItemIdentifier),
                                                                     validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");

                }
            }
        }
    }

    return validationErrors;
  ]]></script>
</script>