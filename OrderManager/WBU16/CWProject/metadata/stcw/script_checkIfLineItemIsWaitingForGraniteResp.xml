<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.checkIfLineItemIsWaitingForGraniteResp">
  <label>Check If LineItem Is Waiting For GraniteResponse</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="existingBundleOrder" type="rifp">
      <type>order_stcw.wholesaleBundleOrderSTC</type>
    </parameter>
    <parameter name="failureArray" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var lineItemStatusForWaiting = "Waiting for Granite Resp";

    var foundLineItemWaiting = false;
    var validationErrors = null;

    for(var i=0; i<existingBundleOrder.parentLineItems.length; i++) {
        foundLineItemWaiting = (existingBundleOrder.parentLineItems[i].parentLineItem.lineItemStatus == lineItemStatusForWaiting);
        if(foundLineItemWaiting) {
            validationErrors = appendToValidationErrors_("ParentLineItem", existingBundleOrder.parentLineItems[i].parentLineItem.lineItemIdentifier);
        }

        if(existingBundleOrder.parentLineItems[i].services != null) {
            for(var j=0; j<existingBundleOrder.parentLineItems[i].services.length; j++) {
                foundLineItemWaiting = (existingBundleOrder.parentLineItems[i].services[j].serviceLineItem.lineItemStatus == lineItemStatusForWaiting);
                if(foundLineItemWaiting) {
                    validationErrors = appendToValidationErrors_("Service", existingBundleOrder.parentLineItems[i].services[j].serviceLineItem.lineItemIdentifier);
                }

                if(existingBundleOrder.parentLineItems[i].services[j].subServices != null) {
                    for(var k=0; k<existingBundleOrder.parentLineItems[i].services[j].subServices.length; k++) {
                        foundLineItemWaiting = (existingBundleOrder.parentLineItems[i].services[j].subServices[k].subServiceLineItem.lineItemStatus == lineItemStatusForWaiting);
                        if(foundLineItemWaiting) {
                            validationErrors = appendToValidationErrors_("SubService", existingBundleOrder.parentLineItems[i].services[j].subServices[k].subServiceLineItem.lineItemIdentifier);
                        }

                        if(existingBundleOrder.parentLineItems[i].services[j].subServices[k].subSubServices != null) {
                            for(var l=0; l<existingBundleOrder.parentLineItems[i].services[j].subServices[k].subSubServices.length; l++) {
                                foundLineItemWaiting = (existingBundleOrder.parentLineItems[i].services[j].subServices[k].subSubServices[l].subSubServiceLineItem.lineItemStatus == lineItemStatusForWaiting);
                                if(foundLineItemWaiting) {
                                    validationErrors = appendToValidationErrors_("Sub-SubService", existingBundleOrder.parentLineItems[i].services[j].subServices[k].subSubServices[l].subSubServiceLineItem.lineItemIdentifier);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    if(validationErrors != null) {
        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingBundleOrder.orderHeader.orderNumber, failureArray, false);
    }

    return failureArray;




    function appendToValidationErrors_(elementType, elementId) {
        var debugMsg = "checkIfThereIsALineItemWaitingForGraniteResp (" + existingBundleOrder.orderHeader.orderNumber + ")";
        return stcw.appendToValidationErrors("AE0086", Global.translateText("AE0086", null, [elementType, elementId]), validationErrors, debugMsg);
    }
  ]]></script>
</script>