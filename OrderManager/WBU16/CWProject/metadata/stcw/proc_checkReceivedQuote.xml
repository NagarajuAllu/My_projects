<?xml version="1.0" encoding="UTF-8" ?>
<process name="stcw.checkReceivedQuote">
  <activity name="start" type="seqActivity">
    <label>Start</label>
    <x>125.34473</x>
    <y>91.0</y>
    <childList>
      <child name="isLastService" type="switchActivity">
        <label>Is Last Service?</label>
        <x>124.34473</x>
        <y>211.0</y>
        <childList>
          <child name="no" type="caseActivity">
            <label>No</label>
            <x>0.0</x>
            <y>0.0</y>
            <childList>
              <child name="start" type="seqActivity">
                <label>Start</label>
                <x>231.34473</x>
                <y>218.0</y>
                <childList>
                  <child name="validateReceivedData" type="scriptActivity">
                    <label>Validate Received  Data</label>
                    <x>335.34473</x>
                    <y>206.0</y>
                    <methodList>
                      <method name="cwOnProcActBefore" type="action">
                        <category>before</category>
                        <system>true</system>
                        <script><![CDATA[
                          var debugHeader = "[" + this.process.id + "] CheckReceivedQuote - ";

                          // Update History Event
                          rpts.updateHistoryEvent (this);

                          var processDocument = this.process.processDocument;

                          // Update History Event assing it the stored entry in CWMESSAGEID
                          stcw.assignCWMsgIdToProcessEvent(this, processDocument.cwMsgId);

                          var crmInput = stcw.findGenericProcessMessageById (this.process.processDocument.genericProcessMsgDocId, "wsws:quoteValidation");

                          debugPrintln(stcc.getSysdateForLog() + debugHeader + "Received ValidateQuote with input = " + (crmInput == null ? "null" : crmInput.toXML()));

                                processDocument.quoteNumber = crmInput.quoteNumber;

                                var error = basicValidation_ (crmInput);
                                if (error == null) {

                                      var service  = crmInput.lineItems[processDocument.processedServices];

                          debugPrintln(stcc.getSysdateForLog() + debugHeader + "Managing Service = " + (service == null ? "null" : service.toXML()));

                                      if(service != null) {
                                            processDocument.orderRowItemId = service.orderRowItemId;

                                            if (stcw.isInstallQuoteRequest (crmInput)) {
                                                  error = validateInstallService_ (crmInput, service, processDocument);
                                            }
                                            else if (stcw.isChangeQuoteRequest (crmInput)) {
                                                  error = validateChangeQuote_ (crmInput);
                                            }
                                            else {
                                                  error = xcutl.createError ("UnsupportedQuoteType", crmInput.quoteType);
                                            }

                                            processDocument.serviceStatus = service.serviceStatus;
                                      }
                                      else {
                                            error = xcutl.creareError("InternalError");
                                      }
                                }

                                if(error == null) {
                                      processDocument.ackResult = "SUCCESS";
                                }
                                else {
                                      processDocument.ackResult = "ERROR";
                                      processDocument.ErrorCode = error.code;
                                      processDocument.ErrorText = error.text;
                                }

                          debugPrintln(stcc.getSysdateForLog() + debugHeader + "processDocument = " + processDocument.toXML());

                                //
                                //  basicValidation_
                                //
                                function basicValidation_ (input) {

                                      if (input.businessUnit != "Wholesale") {
                                            return (xcutl.createError ("InvalidBusinessUnit", input.businessUnit));
                                      }

                                      if (input.quoteStatus != "Feasibility" && input.quoteStatus != "Reservation") {
                                            return (xcutl.createError ("InvalidQuoteStatus", input.quoteStatus));
                                      }

                                      var validationResult = input.validate(1, true);
                                      if(validationResult != null) {
                                          var error = new DataStructure ("xcutl:Error");
                                          error.code = validationResult[0];
                                          error.text = validationResult[1];
                                          return error;
                                      }

                                      if(input.lineItems != null) {
                                          for(var j=0; j<input.lineItems.length; j++) {
                                              var lineItem = input.lineItems[j];
                                              var attributesToMonitor = ["segmentFlag"];
                                              for(var i=0; i<attributesToMonitor.length; i++) {
                                                  var valueFound = lineItem[attributesToMonitor[i]];
                                                  if(! stcw.validatePickListValue(attributesToMonitor[i], valueFound)) {
                                                      error      = new DataStructure ("xcutl:Error");
                                                      error.code = "DE1107";
                                                      error.text = Global.translateText("DE1107", null, attributesToMonitor[i]);
                                                      return error;
                                                  }
                                              }
                                          }
                                      }


                                      return (null);

                                }            // b a s i c V a l i d a t i o n _


                                //
                                // validateInstallService_
                                //
                                function validateInstallService_ (input, lineItem, processDocument) {

                                      if(lineItem.serviceStatus != "Add" &&
                                         lineItem.serviceStatus != "Cancel" &&
                                         lineItem.serviceStatus != "Revise" &&
                                         lineItem.serviceStatus != "Unchanged") {
                                            return (xcutl.createError ("InvalidServiceStatus", input.quoteNumber, lineItem.orderRowItemId, lineItem.serviceStatus));
                                      }

                                      if(processDocument.restorationFlag != null) {
                                            if(processDocument.restorationFlag != lineItem.restoration) {
                                                  return (xcutl.createError ("DifferentRestoration", input.quoteNumber, lineItem.orderRowItemId));
                                            }
                                      }
                                      else {
                                            processDocument.restorationFlag = lineItem.restoration;
                                      }


                                      // quote already exists
                                      var existingQuoteChild = stcw.findQuoteByParentQuoteNumberAndRowId (input.quoteNumber, lineItem.orderRowItemId);
                                      if(lineItem.serviceStatus == "Add") {
                                            // Quote Child Already Exists
                                            if (existingQuoteChild != null) {
                                                  return (xcutl.createError ("QuoteChildAlreadyExists", input.quoteNumber, lineItem.orderRowItemId));
                                            }

                                            // Quantity is not a number
                                            if(isNaN(parseInt(lineItem.quantity))) {
                                                  return (xcutl.createError ("QuantityNotNumber", input.quoteNumber, lineItem.orderRowItemId));
                                            }

                                            if(stcc.stringHasValue(lineItem.reservationDays)) {
                                                  // ReservationDays is not a number
                                                  if(isNaN(parseInt(lineItem.reservationDays))) {
                                                        return (xcutl.createError ("ReservationDaysNotNumber", input.quoteNumber, lineItem.orderRowItemId));
                                                  }
                                            }
                                      }
                                      else {
                                            if(lineItem.serviceStatus == "Cancel" || lineItem.serviceStatus == "Revise") {
                                                  // quote child doesn't exist
                                                  if (existingQuoteChild == null) {
                                                        return (xcutl.createError ("QuoteChildNotExists", input.quoteNumber, lineItem.orderRowItemId));
                                                  }

                                                  // quote child already COMPLETED
                                                  // removed as required by Rajakumar Mani - Call 22/05/2010
                                                  /******
                                                  if(existingQuoteChild.header.quoteStatus == "COMPLETED") {
                                                        return (xcutl.createError ("UpdQuoteComplete", input.quoteNumber, lineItem.orderRowItemId));
                                                  }
                                                  *****/

                                                  // quote child already CANCELLED
                                                  if(existingQuoteChild.header.quoteStatus == "CANCELLED") {
                                                        return (xcutl.createError ("UpdQuoteCancel", input.quoteNumber, lineItem.orderRowItemId));
                                                  }

                                                  // quote child is already managing a Cancel event...
                                                  if(stcw.isQuoteCancelled(existingQuoteChild)) {
                                                        return (xcutl.createError ("UpdQuoteCancel", input.quoteNumber, lineItem.orderRowItemId));
                                                  }

                                                  if(stcc.stringHasValue(lineItem.reservationDays)) {
                                                        // ReservationDays is not a number
                                                        if(isNaN(parseInt(lineItem.reservationDays))) {
                                                              return (xcutl.createError ("ReservationDaysNotNumber", input.quoteNumber, lineItem.orderRowItemId));
                                                        }
                                                  }

                                                  // quote child is Reservation ....
                                                  if (input.quoteStatus == "Reservation") {
                                                        // ... but doesn't have Reservation Number
                                                        if(!stcc.stringHasValue(lineItem.reservationNumber)) {
                                                              return (xcutl.createError ("UpdReservationWONumber", input.quoteStatus));
                                                        }

                                                        // ... but already exists an order for that reservation
                                                        var countOrder = stcw.countNotCancelledOrderByReservation(lineItem.reservationNumber);
                                                        if(countOrder > 0) {
                                                              return (xcutl.createError ("ExistOrderOnReservation", lineItem.reservationNumber));
                                                        }
                                                  }

                                                  if(lineItem.serviceStatus == "Revise") {
                                                        // running check for Revise
                                                        return validateReviseItem_(input, lineItem, existingQuoteChild);
                                                  }
                                            }
                                      }

                                      return (null);

                                }            // v a l i d a t e I n s t a l l S e r v i c e _


                                //
                                // validateReviseItem_
                                //
                                function validateReviseItem_(input, inputLineItem, existingQuoteChild) {
                                      var initialQuoteReceived = stcw.extractObjectFromInterfaceMessage(existingQuoteChild, 0, "CRM_QUOTE_VALIDATION", "wsws:quoteValidation");
                                      if(initialQuoteReceived == null) {
                                            return (xcutl.createError ("ErrorAccessInputData", input.quoteNumber));
                                      }

                                      var receivedLineItem = stcw.extractServiceFromReceivedQuote(initialQuoteReceived, inputLineItem.orderRowItemId);

                                      if(receivedLineItem == null) {
                                            return (xcutl.createError ("ErrorAccessServiceInputData", input.quoteNumber, inputLineItem.orderRowItemId));
                                      }

                                      // checking Location A
                                      if(!stcw.checkValueInLineItemNVPair("LOCATIONA", inputLineItem, receivedLineItem)) {
                                            return (xcutl.createError ("DifferentReceivedValue", "LOCATIONA"));
                                      }

                                      if(!stcw.checkValueInLineItemNVPair("COUNTRYA", inputLineItem, receivedLineItem)) {
                                            return (xcutl.createError ("DifferentReceivedValue", "COUNTRYA"));
                                      }

                                      if(!stcw.checkValueInLineItemNVPair("ADDONA", inputLineItem, receivedLineItem)) {
                                            return (xcutl.createError ("DifferentReceivedValue", "ADDONA"));
                                      }

                                      // checking Location Z
                                      if(!stcw.checkValueInLineItemNVPair("LOCATIONZ", inputLineItem, receivedLineItem)) {
                                            return (xcutl.createError ("DifferentReceivedValue", "LOCATIONZ"));
                                      }

                                      if(!stcw.checkValueInLineItemNVPair("COUNTRYZ", inputLineItem, receivedLineItem)) {
                                            return (xcutl.createError ("DifferentReceivedValue", "COUNTRYZ"));
                                      }

                                      if(!stcw.checkValueInLineItemNVPair("ADDONZ", inputLineItem, receivedLineItem)) {
                                            return (xcutl.createError ("DifferentReceivedValue", "ADDONZ"));
                                      }

                                      // checking Technology
                                      if(!stcw.checkValueInLineItemNVPair("ACCESS_SPEED", inputLineItem, receivedLineItem)) {
                                            return (xcutl.createError ("DifferentReceivedValue", "ACCESS_SPEED"));
                                      }

                                      if(!stcw.checkValueInLineItemNVPair("FACILITY_BW", inputLineItem, receivedLineItem)) {
                                            return (xcutl.createError ("DifferentReceivedValue", "FACILITY_BW"));
                                      }

                                      // checking Quantity
                                      if(!stcc.checkSameValue(inputLineItem.quantity, receivedLineItem.quantity)) {
                                            return (xcutl.createError ("DifferentReceivedValue", "Quantity"));
                                      }

                                      // checking SegmentFlag
                                      if(!stcc.checkSameValue(inputLineItem.segmentFlag, receivedLineItem.segmentFlag)) {
                                            return (xcutl.createError ("DifferentReceivedValue", "SegmentFlag"));
                                      }

                                      return null;

                                }            // v a l i d a t e R e v i s e I t e m _

                                //
                                // validateChangeQuote_
                                //
                                function validateChangeQuote_ (input) {
                                      if(input.lineItems.length > 1) {
                                            return (xcutl.createError ("TooManyServices", input.lineItems.length));
                                      }

                                      var lineItem =       input.lineItems[0];
                                      if(lineItem.serviceStatus != "Add" &&
                                         lineItem.serviceStatus != "Cancel" &&
                                         lineItem.serviceStatus != "Revise" &&
                                         lineItem.serviceStatus != "Unchanged") {
                                            return (xcutl.createError ("InvalidServiceStatus", input.quoteNumber, lineItem.orderRowItemId, lineItem.serviceStatus));
                                      }

                                      if(stcc.stringHasValue(lineItem.reservationDays)) {
                                            // ReservationDays is not a number
                                            if(isNaN(parseInt(lineItem.reservationDays))) {
                                                  return (xcutl.createError ("ReservationDaysNotNumber", input.quoteNumber, lineItem.orderRowItemId));
                                            }
                                      }

                                      var existingQuoteChild = stcw.findQuoteByParentQuoteNumberAndRowId (input.quoteNumber, lineItem.orderRowItemId);
                                      if(lineItem.serviceStatus != "Add") {
                                            if (existingQuoteChild == null) {
                                                  return (xcutl.createError ("QuoteChildNotExists", input.quoteNumber, lineItem.orderRowItemId));
                                            }

                                            if(lineItem.serviceStatus == "Cancel" || lineItem.serviceStatus == "Revise") {

                                                  // quote child already CANCELLED
                                                  if(existingQuoteChild.header.quoteStatus == "CANCELLED") {
                                                        return (xcutl.createError ("UpdQuoteCancel", input.quoteNumber, lineItem.orderRowItemId));
                                                  }

                                                  // quote child is already managing a Cancel event...
                                                  if(stcw.isQuoteCancelled(existingQuoteChild)) {
                                                        return (xcutl.createError ("UpdQuoteCancel", input.quoteNumber, lineItem.orderRowItemId));
                                                  }

                                                  // quote child is Reservation ....
                                                  if (input.quoteStatus == "Reservation") {
                                                        // ... but doesn't have Reservation Number
                                                        if(!stcc.stringHasValue(lineItem.reservationNumber)) {
                                                              return (xcutl.createError ("UpdReservationWONumber", input.quoteStatus));
                                                        }

                                                        // ... but already exists an order for that reservation
                                                        var countOrder = stcw.countNotCancelledOrderByReservation(lineItem.reservationNumber);
                                                        if(countOrder > 0) {
                                                              return (xcutl.createError ("ExistOrderOnReservation", lineItem.reservationNumber));
                                                        }
                                                  }

                                                  if(lineItem.serviceStatus == "Revise") {
                                                        // running check for Revise
                                                        return validateReviseItem_(input, lineItem, existingQuoteChild);
                                                  }
                                            }
                                      }
                                      else {
                                            // serviceStatus = "Add"
                                            if (existingQuoteChild != null) {
                                                  // Quote Child Already Exists
                                                  return (xcutl.createError ("QuoteChildAlreadyExists", input.quoteNumber, lineItem.orderRowItemId));
                                            }

                                            // Quantity is not a number
                                            if(isNaN(parseInt(lineItem.quantity))) {
                                                  return (xcutl.createError ("QuantityNotNumber", input.quoteNumber, lineItem.orderRowItemId));
                                            }
                                      }

                                      return (null);

                                }            // v a l i d  a t e C h a n g e Q u o t e _
                        ]]></script>
                      </method>
                      <method name="cwOnProcActCond" type="action">
                        <category>cond</category>
                        <system>true</system>
                        <script><![CDATA[
                          rpts.createHistoryEvent (this);
                          return (true);
                        ]]></script>
                      </method>
                    </methodList>
                  </child>
                  <child name="validateEndsOK" type="switchActivity">
                    <label>Validate Ends OK?</label>
                    <x>448.34473</x>
                    <y>213.0</y>
                    <childList>
                      <child name="yes" type="caseActivity">
                        <label>Yes</label>
                        <x>0.0</x>
                        <y>0.0</y>
                        <childList>
                          <child name="start" type="seqActivity">
                            <label>Start</label>
                            <x>453.34473</x>
                            <y>340.0</y>
                            <childList>
                              <child name="isUnchanged" type="switchActivity">
                                <label>Is ServiceStatus Unchanged?</label>
                                <x>438.34473</x>
                                <y>458.0</y>
                                <childList>
                                  <child name="yes" type="caseActivity">
                                    <label>Yes</label>
                                    <x>305.34473</x>
                                    <y>463.0</y>
                                    <methodList>
                                      <method name="cwOnProcActCond" type="action">
                                        <category>cond</category>
                                        <system>true</system>
                                        <script><![CDATA[this.process.processDocument.serviceStatus == "Unchanged";]]></script>
                                      </method>
                                    </methodList>
                                  </child>
                                  <child name="no" type="caseActivity">
                                    <label>No</label>
                                    <x>271.34473</x>
                                    <y>340.0</y>
                                    <childList>
                                      <child name="start" type="seqActivity">
                                        <label>Start</label>
                                        <x>648.3447</x>
                                        <y>459.0</y>
                                        <childList>
                                          <child name="addServiceStatus" type="switchActivity">
                                            <label>Is Service Status Add?</label>
                                            <x>778.3447</x>
                                            <y>443.0</y>
                                            <childList>
                                              <child name="no" type="caseActivity">
                                                <label>No</label>
                                                <x>0.0</x>
                                                <y>0.0</y>
                                                <childList>
                                                  <child name="start" type="seqActivity">
                                                    <label>Start</label>
                                                    <x>949.3447</x>
                                                    <y>455.0</y>
                                                    <childList>
                                                      <child name="addVersionToQuote" type="scriptActivity">
                                                        <label>Add Version To Quote</label>
                                                        <x>943.3447</x>
                                                        <y>597.0</y>
                                                        <methodList>
                                                          <method name="cwOnProcActBefore" type="action">
                                                            <category>before</category>
                                                            <system>true</system>
                                                            <script><![CDATA[
                                                              var debugHeader = "[" + this.process.id + "] TerminateAllProcesses - ";
                                                              debugPrintln(stcc.getSysdateForLog() + debugHeader + "start");


                                                              var processDocument = this.process.processDocument;
                                                              var input    = stcw.findGenericProcessMessageById (this.process.processDocument.genericProcessMsgDocId, "wsws:quoteValidation");
                                                              var service  = input.lineItems[processDocument.processedServices];

                                                              var existingQuoteChild = stcw.findQuoteByParentQuoteNumberAndRowId (input.quoteNumber, service.orderRowItemId);

                                                              if(process.processDocument.serviceStatus == "Cancel") {
                                                                    stcw.addVersionToOrder (existingQuoteChild, "CANCEL");
                                                              }
                                                              else {
                                                                    stcw.addVersionToOrder (existingQuoteChild, "REVISE");
                                                              }
                                                              existingQuoteChild.header.orderAction       = process.processDocument.serviceStatus;
                                                              existingQuoteChild.header.skipSendToGranite = "N";
                                                              existingQuoteChild.header.quoteStatus       = input.quoteStatus;
                                                              existingQuoteChild.save();

                                                              processDocument.orderId = existingQuoteChild.id;
                                                            ]]></script>
                                                          </method>
                                                        </methodList>
                                                      </child>
                                                    </childList>
                                                  </child>
                                                </childList>
                                              </child>
                                              <child name="yes" type="caseActivity">
                                                <label>Yes</label>
                                                <x>794.3447</x>
                                                <y>495.0</y>
                                                <childList>
                                                  <child name="start" type="seqActivity">
                                                    <label>Start</label>
                                                    <x>782.3447</x>
                                                    <y>605.0</y>
                                                    <childList>
                                                      <child name="createNewChildQuoteOrder" type="scriptActivity">
                                                        <label>Create New Child QuoteOrder</label>
                                                        <x>432.34473</x>
                                                        <y>589.0</y>
                                                        <methodList>
                                                          <method name="cwOnProcActBefore" type="action">
                                                            <category>before</category>
                                                            <system>true</system>
                                                            <script><![CDATA[
                                                              var debugHeader = "[" + this.process.id + "] CreateNewQuoteOrder - ";

                                                              var processDocument = this.process.processDocument;
                                                              var input    = stcw.findGenericProcessMessageById (this.process.processDocument.genericProcessMsgDocId, "wsws:quoteValidation");
                                                              var service  = input.lineItems[processDocument.processedServices];

                                                              debugPrintln(stcc.getSysdateForLog() + debugHeader + "Quote <" + input.quoteNumber + ", " + service.orderRowItemId + "> processing");

                                                                    var order = stcw.createChildQuote(input, service.orderRowItemId);
                                                                    order.save ();
                                                              debugPrintln(stcc.getSysdateForLog() + "Quote <" + input.quoteNumber + ", " + service.orderRowItemId + "> created with id " + order.id);

                                                                    processDocument.orderId = order.id;
                                                            ]]></script>
                                                          </method>
                                                        </methodList>
                                                      </child>
                                                    </childList>
                                                  </child>
                                                </childList>
                                                <methodList>
                                                  <method name="cwOnProcActCond" type="action">
                                                    <category>cond</category>
                                                    <system>true</system>
                                                    <script><![CDATA[return this.process.processDocument.serviceStatus == "Add";]]></script>
                                                  </method>
                                                </methodList>
                                              </child>
                                            </childList>
                                          </child>
                                          <child name="startProcessToManageQuote" type="scriptActivity">
                                            <label>Start Process To Manage Quote</label>
                                            <x>125.34473</x>
                                            <y>579.0</y>
                                            <methodList>
                                              <method name="cwOnProcActBefore" type="action">
                                                <category>before</category>
                                                <system>true</system>
                                                <script><![CDATA[
                                                  var debugHeader = "[" + this.process.id + "] ActivateProcessForQuote - ";

                                                  rpts.updateHistoryEvent (this);

                                                  var processDocument = this.process.processDocument;
                                                  var input    = stcw.findGenericProcessMessageById (this.process.processDocument.genericProcessMsgDocId, "wsws:quoteValidation");
                                                  var service  = input.lineItems[processDocument.processedServices];

                                                  // patching all already stored events of this process with the order number
                                                  stcw.assignProcessEventsToOrder(this.process.id, processDocument.orderId);

                                                  var processId = Process.startProcess ("stcw:validateQuote", processDocument.orderId);
                                                  debugPrintln(stcc.getSysdateForLog() + "Quote <" + input.quoteNumber + ", " + service.orderRowItemId + ">: processId = " + processId);

                                                        var patchResults = rpts.patchAsynchMessageLog (processId, "crmQuoteValidation");

                                                        Process.sendMessageToProcess (processId, null, "wsws:ifExpedtier_WHOLESALE/operation_QuoteValidation", input);
                                                ]]></script>
                                              </method>
                                              <method name="cwOnProcActCond" type="action">
                                                <category>cond</category>
                                                <system>true</system>
                                                <script><![CDATA[
                                                  rpts.createHistoryEvent (this);
                                                  return (true);
                                                ]]></script>
                                              </method>
                                            </methodList>
                                          </child>
                                        </childList>
                                      </child>
                                    </childList>
                                  </child>
                                </childList>
                              </child>
                            </childList>
                          </child>
                        </childList>
                        <methodList>
                          <method name="cwOnProcActCond" type="action">
                            <category>cond</category>
                            <system>true</system>
                            <script><![CDATA[return (this.process.processDocument.ackResult == "SUCCESS");]]></script>
                          </method>
                        </methodList>
                      </child>
                      <child name="no" type="caseActivity">
                        <label>No</label>
                        <x>580.3447</x>
                        <y>29.0</y>
                        <childList>
                          <child name="start" type="seqActivity">
                            <label>Start</label>
                            <x>566.3447</x>
                            <y>218.0</y>
                            <childList>
                              <child name="startProcessToSendFailureAck" type="scriptActivity">
                                <label>Start Process To Send Failure Ack</label>
                                <x>713.3447</x>
                                <y>208.0</y>
                                <methodList>
                                  <method name="cwOnProcActBefore" type="action">
                                    <category>before</category>
                                    <system>true</system>
                                    <script><![CDATA[
                                      var newProcessDocument            = new Document("stcw:sendFailureAckForQuoteDoc");
                                      newProcessDocument.ErrorCode      = this.process.processDocument.ErrorCode;
                                      newProcessDocument.ErrorText      = this.process.processDocument.ErrorText;
                                      newProcessDocument.quoteNumber    = this.process.processDocument.quoteNumber;
                                      newProcessDocument.orderRowItemId = this.process.processDocument.orderRowItemId;

                                      var processId = Process.startProcess ("stcw:sendFailureQuoteAckToCrm", newProcessDocument);
                                      debugPrintln(stcc.getSysdateForLog() + "Start Process 'sendFailureQuoteAckToCrm' <" + newProcessDocument.quoteNumber + ", " + newProcessDocument.orderRowItemId + ">: processId = " + processId);


                                            stcw.createRejectedQuote(this.process.processDocument.quoteNumber,
                                                                                 this.process.processDocument.orderRowItemId,
                                                                                 ((this.process.processDocument.orderRowItemId != null) ? (this.process.processDocument.quoteNumber + "#" + this.process.processDocument.orderRowItemId) : null),
                                                                                 "Expediter",
                                                                                 this.process.processDocument.ErrorText);
                                    ]]></script>
                                  </method>
                                </methodList>
                              </child>
                            </childList>
                          </child>
                        </childList>
                      </child>
                    </childList>
                  </child>
                  <child name="repeat" type="repeatActivity">
                    <element>proc_stcw.checkReceivedQuote/seqActivity_start/switchActivity_isLastService</element>
                    <label>Repeat</label>
                    <x>136.34473</x>
                    <y>463.0</y>
                    <methodList>
                      <method name="cwOnProcActBefore" type="action">
                        <category>before</category>
                        <system>true</system>
                        <script>this.process.processDocument.processedServices++;</script>
                      </method>
                    </methodList>
                  </child>
                </childList>
                <methodList>
                  <method name="cwOnProcActBefore" type="action">
                    <category>before</category>
                    <system>true</system>
                    <script>this.process.processDocument.serviceStatus = null;</script>
                  </method>
                </methodList>
              </child>
            </childList>
            <methodList>
              <method name="cwOnProcActCond" type="action">
                <category>cond</category>
                <system>true</system>
                <script><![CDATA[
                  var processDocument = this.process.processDocument;

                  return (processDocument.numServices > processDocument.processedServices);
                ]]></script>
              </method>
            </methodList>
          </child>
          <child name="yes" type="caseActivity">
            <label>Yes</label>
            <x>31.344727</x>
            <y>276.0</y>
            <childList>
              <child name="end" type="completeActivity">
                <label>End</label>
                <x>13.344727</x>
                <y>215.0</y>
              </child>
            </childList>
          </child>
        </childList>
      </child>
    </childList>
    <methodList>
      <method name="cwOnProcActBefore" type="action">
        <category>before</category>
        <system>true</system>
        <script><![CDATA[
          debugPrintln(stcc.getSysdateForLog() + "[" + this.process.id + "] - CheckReceivedQuote - Start...");

          var receivedDS = stcw.findGenericProcessMessageById (this.process.processDocument.genericProcessMsgDocId, "wsws:quoteValidation");

          this.process.processDocument.processedServices = 0;
          this.process.processDocument.numServices       = receivedDS.lineItems.length;
          this.process.processDocument.restorationFlag   = null;
        ]]></script>
      </method>
    </methodList>
  </activity>
  <curRevision>true</curRevision>
  <document>doc_stcw.checkProcessDocument</document>
  <highlight>14</highlight>
  <label>Check Received Quote</label>
  <metaVersion>22</metaVersion>
  <priority>8</priority>
  <revision>4</revision>
  <type>User</type>
</process>