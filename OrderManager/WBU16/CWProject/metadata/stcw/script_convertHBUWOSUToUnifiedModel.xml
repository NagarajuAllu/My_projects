<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.convertHBUWOSUToUnifiedModel">
  <label>Convert HBU WOSU To Unified Model</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="inputHBUWOSU" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="lineItemId" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="isQuote" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var billingDateNVPairName = "Billing_Date";

    var wosuUnifiedModel = new DataStructure("stcw.wosuUnifiedModel");
    wosuUnifiedModel.comOrderNumber = inputHBUWOSU.parentOrderNumber;
    wosuUnifiedModel.orderStatus = inputHBUWOSU.workOrderStatus;
    wosuUnifiedModel.businessUnit = "Wholesale";
    wosuUnifiedModel.reservationNumber = null;
    wosuUnifiedModel.feasibilityStatus = (isQuote_() ? getFeasibilityStatus_(inputHBUWOSU.workOrderStatus) : null);
    wosuUnifiedModel.reservationDays = (isQuote_() ? getNVPairValue_("Reservation Days") : null);
    wosuUnifiedModel.actualImplementationDays = (isQuote_() ? getNVPairValue_("Actual Implementation Days") : null);
    wosuUnifiedModel.plannedFeasibleDays = (isQuote_() ? getNVPairValue_("Planned Feasible Days") : null);
    wosuUnifiedModel.lineItemIdentifier = null;
    wosuUnifiedModel.lineItemStatus = inputHBUWOSU.workOrderStatus;
    wosuUnifiedModel.assetNumber = null;
    wosuUnifiedModel.niNumber = null;
    wosuUnifiedModel.orderRowItemId = inputHBUWOSU.orderRowItemID;
    wosuUnifiedModel.systemDesignation = null;
    wosuUnifiedModel.workOrderName = inputHBUWOSU.orderNumber;
    wosuUnifiedModel.workOrderStatus = inputHBUWOSU.workOrderStatus;
    wosuUnifiedModel.workOrderRemarks = inputHBUWOSU.workOrderRemarks;
    wosuUnifiedModel.workOrderProblemDescription = inputHBUWOSU.workOrderDescription;
    wosuUnifiedModel.taskNumber = inputHBUWOSU.taskNumber;
    wosuUnifiedModel.taskName = inputHBUWOSU.taskName;
    wosuUnifiedModel.taskAllocatedTime = null;
    wosuUnifiedModel.taskDescription = inputHBUWOSU.taskDescription;
    // wosuUnifiedModel.taskOperation = inputHBUWOSU.taskOperation;
    wosuUnifiedModel.taskPriority = inputHBUWOSU.taskPriority;
    wosuUnifiedModel.taskServiceStatus = inputHBUWOSU.taskServiceStatus;
    wosuUnifiedModel.taskStatusCode = inputHBUWOSU.taskStatusCode;
    wosuUnifiedModel.taskRemarks = inputHBUWOSU.taskRemarks;
    wosuUnifiedModel.workOrderStage = getNVPairValue_("Workorder Stage");

    var foundBillingDatePosition = null;
    var foundBillingDateWithValue = false;

    if(inputHBUWOSU.parameters != null && inputHBUWOSU.parameters.length > 0) {
        for(var i=0; i<inputHBUWOSU.parameters.length; i++) {
            var nvPairDS = new DataStructure("stcw.wosuNVPair");
            nvPairDS.name = inputHBUWOSU.parameters[i].name;
            nvPairDS.value = inputHBUWOSU.parameters[i].value;
            wosuUnifiedModel.nvPairs[i] = nvPairDS;

            if(inputHBUWOSU.parameters[i].name == billingDateNVPairName) {
                foundBillingDatePosition = i;
                if(stcc.stringHasValue(inputHBUWOSU.parameters[i].value)) {
                    foundBillingDateWithValue = true;
                }
            }
        }
    }

    if(inputHBUWOSU.workOrderStatus == "COMPLETED" || inputHBUWOSU.workOrderStatus == "CANCELLED") {
        if(! foundBillingDateWithValue) {
            if(foundBillingDatePosition != null) {
                wosuUnifiedModel.nvPairs[foundBillingDatePosition].value = stcc.getCurrentDateInFormat("MM/dd/yyyy HH:mm:ss");
            }
            else {
                var nvPairDS = new DataStructure("stcw.wosuNVPair");
                nvPairDS.name = billingDateNVPairName;
                nvPairDS.value = stcc.getCurrentDateInFormat("MM/dd/yyyy HH:mm:ss");
                var position = 0;
                if(inputHBUWOSU.parameters != null) {
                    position = inputHBUWOSU.parameters.length;
                }
                wosuUnifiedModel.nvPairs[position] = nvPairDS;
            }
        }
    }

    return wosuUnifiedModel;


    function getFeasibilityStatus_(workOrderStatus) {
        var feasibilityStatus = null;
        var foundValue =  getNVPairValue_("FeasibilityStatus");

        if(stcw.isLineItemCompleted(workOrderStatus)) {
            if(foundValue == null) {
                feasibilityStatus = "NOT FEASIBLE";
            }
            else {
                if(foundValue.toUpperCase() == "YES") {
                    feasibilityStatus = "FEASIBLE";
                }
                else {
                    feasibilityStatus = "NOT FEASIBLE";
                }
            }
        }
        else {
            if(foundValue == null) {
                // do nothing
            }
            else {
                if(foundValue.toUpperCase() == "YES") {
                    feasibilityStatus = "FEASIBLE";
                }
                else {
                    feasibilityStatus = "NOT FEASIBLE";
                }
            }
        }

        return feasibilityStatus;
    }


    function isQuote_() {
        var isQuote = false;

        var searchDoc = new Document("stcw.search_bundleOrder");
        searchDoc.orderNumber = inputHBUWOSU.parentOrderNumber;
        var orderListFound = Finder.runFinder("stcw.findAllSTCBundleOrders_Script", "select", searchDoc);
        if(orderListFound != null && orderListFound.length > 0) {
            isQuote = (orderListFound[0].orderType != null && orderListFound[0].orderType == "F");
        }

        return isQuote;
    }

    function getNVPairValue_(nvPairName) {
        var nvPairValue = null;

        if(inputHBUWOSU.parameters != null && inputHBUWOSU.parameters.length > 0) {
            for(var i=0; i<inputHBUWOSU.parameters.length; i++) {
                if(inputHBUWOSU.parameters[i].name == nvPairName) {
                    nvPairValue = inputHBUWOSU.parameters[i].value;
                }
            }
        }

        return nvPairValue;
    }
  ]]></script>
</script>