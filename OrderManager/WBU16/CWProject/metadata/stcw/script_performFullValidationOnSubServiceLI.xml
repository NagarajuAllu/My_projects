<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.performFullValidationOnSubServiceLI">
  <label>Perform Full Validation On SubServiceLineItem</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="subServiceLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="failureArray" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="orderHeader" type="rifp">
      <type>doc_com.conceptwave.system.Document</type>
    </parameter>
    <parameter name="serviceLineItemAction" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="parentLineItemActive" type="rifp">
      <type>doc_stcw.lineItemDocument</type>
    </parameter>
    <parameter name="isSubmit" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    // validate parentLineItem
    failureArray = stcw.validateElementOfOrder(subServiceLineItemContainer.subServiceLineItem, subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, isSubmit, failureArray);

    // checking if the attributes configured as mandatory in the table STCW_LINEITEM_VALIDATION_MAP are set
    failureArray  = stcw.performValidationOfMandatoryAttributesInLineItem(subServiceLineItemContainer.subServiceLineItem, orderHeader, false, isSubmit, failureArray);

    // check compatibility between OrderType, ParentAction and receivedAction
    if(!stcw.checkIfActionIsCompatibleWithOrdType_ParentAction(orderHeader.orderType, orderHeader.orderStatus, orderHeader.feasibilityFor, serviceLineItemAction, subServiceLineItemContainer.subServiceLineItem.receivedAction, true, subServiceLineItemContainer.subServiceLineItem.provisioningBU)) {
        var validationError = ["AE0043", Global.translateText("AE0043", null, [orderHeader.orderType,  serviceLineItemAction, subServiceLineItemContainer.subServiceLineItem.receivedAction, orderHeader.orderStatus])];
    debugPrintln(stcc.getSysdateForLog() + " performFullValidationOnSubServiceLI (" + subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier + "): Found error [" + validationError + "]");
        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, failureArray, isSubmit);
    }

    // check compatibility between OrderType, ParentAction and Action of the item
    if(!stcw.checkIfActionIsCompatibleWithOrdType_ParentAction(orderHeader.orderType, orderHeader.orderStatus, orderHeader.feasibilityFor, serviceLineItemAction, subServiceLineItemContainer.subServiceLineItem.action, false, subServiceLineItemContainer.subServiceLineItem.provisioningBU)) {
        var validationError = ["AE0043", Global.translateText("AE0043", null, [orderHeader.orderType,  serviceLineItemAction, subServiceLineItemContainer.subServiceLineItem.action, orderHeader.orderStatus])];
    debugPrintln(stcc.getSysdateForLog() + " performFullValidationOnSubServiceLI (" + subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier + "): Found error [" + validationError + "]");
        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, failureArray, isSubmit);
    }

    // check PONR
    if(!isSubmit) {
        if(orderHeader.orderStatus.toUpperCase() == "CANCEL") {
            if(subServiceLineItemContainer.subServiceLineItem.isPONRCancelSet) {
                var validationError = ["AE0183", Global.translateText("AE0183", null, ["CancelOrder", "Cancel"])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, failureArray, isSubmit);
            }
        }
        else {
            if(subServiceLineItemContainer.subServiceLineItem.isPONRReviseSet) {
                var validationError = ["AE0183", Global.translateText("AE0183", null, ["ReviseOrder", "Revise"])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, failureArray, isSubmit);
            }
        }
    }

    if(subServiceLineItemContainer.subServiceLineItem.quantity > 1) {
        var validationError = ["AE0159", Global.translateText("AE0159", null, [orderHeader.orderType, subServiceLineItemContainer.subServiceLineItem.quantity])];
    debugPrintln(stcc.getSysdateForLog() + " performFullValidationOnSubServiceLI (" + subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier + "): Found error [" + validationError + "]");
        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, failureArray, isSubmit);
    }

    if(subServiceLineItemContainer.subServiceLineItem.isVAS == true) {
        var validationError = ["AE0178", Global.translateText("AE0178")];
    debugPrintln(stcc.getSysdateForLog() + " performFullValidationOnSubServiceLI (" + subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier + "): Found error [" + validationError + "]");
        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, failureArray, isSubmit);
    }

    if(isSubmit) {
        // check lineItemIdentifier existance stcw.checkIfActionIsCorrectForLineItemIdentifier(parentLineItemActive, lineItemToCheck, orderType, parentLineItemContainer)
        var validationErrors = stcw.checkIfActionIsCorrectForLineItemIdentifier(parentLineItemActive, subServiceLineItemContainer.subServiceLineItem, orderHeader.orderType, null);
        if(validationErrors != null) {
            failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, failureArray, isSubmit);
        }
    }

    // SubServiceLineItem NV pair
    if(subServiceLineItemContainer.subServiceLineItemNameValueParameters != null) {
        for(var i=0; i<subServiceLineItemContainer.subServiceLineItemNameValueParameters.length; i++) {
            failureArray = stcw.validateElementOfOrder(subServiceLineItemContainer.subServiceLineItemNameValueParameters[i], subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, isSubmit, failureArray);
        }

        failureArray = stcw.performValidationOfMandatoryNVPairs(subServiceLineItemContainer.subServiceLineItemNameValueParameters, orderHeader.orderType, subServiceLineItemContainer.subServiceLineItem.receivedServiceType,
                                                                subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, isSubmit, failureArray);

        failureArray = stcw.performValidationOnNVPairDependency(subServiceLineItemContainer.subServiceLineItemNameValueParameters, orderHeader.orderType, subServiceLineItemContainer.subServiceLineItem.receivedServiceType,
                                                                subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, isSubmit, failureArray);
    }

    // Check NV pair for backup
    var nvPairsForBackup = stcw.getNVPairsForBackupForServiceType(subServiceLineItemContainer.subServiceLineItem.receivedServiceType);
    if(nvPairsForBackup != null) {
        for(var i=0; i<nvPairsForBackup.length; i++) {
            var found = false;
            if(subServiceLineItemContainer.subServiceLineItemNameValueParameters != null) {
                for(var j=0; j<subServiceLineItemContainer.subServiceLineItemNameValueParameters.length && !found; j++) {
                    if(subServiceLineItemContainer.subServiceLineItemNameValueParameters[j].subServiceLineItemNameValueParameter.name == nvPairsForBackup[i]) {
                        found = stcc.stringHasValue(subServiceLineItemContainer.subServiceLineItemNameValueParameters[j].subServiceLineItemNameValueParameter.value);
                    }
                }
            }

            if(!found) {
                var validationError = ["AE0171", Global.translateText("AE0171", null, [nvPairsForBackup[i], subServiceLineItemContainer.subServiceLineItem.receivedServiceType])];
    debugPrintln(stcc.getSysdateForLog() + " v (" + subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier + "): Found error [" + validationError + "]");
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, failureArray, isSubmit);
            }
        }
    }

    // to perform the validation for VPN service to check the existance of the NNI parent element
    if(subServiceLineItemContainer.subServiceLineItemNameValueParameters != null) {
        failureArray = stcw.performValidationForNNILink(subServiceLineItemContainer, "S", isSubmit, failureArray);
    }

    // SubServiceLineItem VAS NV pair
    if(subServiceLineItemContainer.subServiceLineItemVASNVParameters != null) {
        for(var i=0; i<subServiceLineItemContainer.subServiceLineItemVASNVParameters.length; i++) {
            failureArray = stcw.validateElementOfOrder(subServiceLineItemContainer.subServiceLineItemVASNVParameters[i], subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, isSubmit, failureArray);
        }
    }

    // SubServiceLineItem Block parameters NV pair
    if(subServiceLineItemContainer.subServiceLineItemBlockParameters != null) {
        if(subServiceLineItemContainer.subServiceLineItem.provisioningBU == "W") {
            var validationError = ["AE0170", Global.translateText("AE0170")];
    debugPrintln(stcc.getSysdateForLog() + " performFullValidationOnSubServiceLI (" + subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier + "): Found error [" + validationError + "]");
            failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, failureArray, isSubmit);
        }

        failureArray = stcw.performValidationForBlockParameters(subServiceLineItemContainer.subServiceLineItemBlockParameters, "S", orderHeader.orderType,
                                                                subServiceLineItemContainer.subServiceLineItem.receivedServiceType, subServiceLineItemContainer.subServiceLineItem.lineItemIdentifier, isSubmit, failureArray);
    }


    // subSubServices
    if(subServiceLineItemContainer.subSubServices != null) {
        for(var i=0; i<subServiceLineItemContainer.subSubServices.length; i++) {
            var subSubServiceContainer = subServiceLineItemContainer.subSubServices[i];
            failureArray = stcw.performFullValidationOnSubSubServiceLI(subSubServiceContainer, failureArray, orderHeader, subServiceLineItemContainer.subServiceLineItem, parentLineItemActive, isSubmit);
        }
    }

    return failureArray;
  ]]></script>
</script>