<?xml version="1.0" encoding="UTF-8" ?>
<script filenameHash="6024fc626b932c9c48320fc88ba481d3" versionHash="eccbc87e4b5ce2fe28308fd9f2a7baf3" name="stcw.startProcessToCancelReservation">
  <guid>{0e2d6950-ed26-224e-8157-4333e2051c99}</guid>
  <label>Start Process To Cancel Reservation</label>
  <metaVersion>3</metaVersion>
  <parameterList>
    <parameter name="quoteHeader" type="rifp">
      <type>doc_com.conceptwave.system.Document</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var debugHeader = " - startProcessToCancelReservation - ";

    if(quoteHeader == null) {
          return "Null quoteHeader";
    }

    if(quoteHeader.cwOrderId == null) {
          return "Invalid quoteHeader; it doesn't belong to an order.";
    }

    var quoteOrder = Order.getOrderById(quoteHeader.cwOrderId);
    var lastInterfaceFolder = stcw.findLastInterfaceFolder(quoteOrder, "CRM_QUOTE_VALIDATION", null);

    if(lastInterfaceFolder == null) {
          return "Invalid Last Folder";
    }

    var receivedInputDataText = lastInterfaceFolder.interfaceData.responseData;
    debugPrintln(stcc.getSysdateForLog() + debugHeader + "Extract data = '" + receivedInputDataText + "'");
          var receivedInputData = stcw.readStructure(receivedInputDataText, "wsws:quoteValidation");

          var inputForCancel = new DataStructure("wsws:quoteValidation");
          setInputForCancelFromLoadedData_(inputForCancel, receivedInputData, quoteHeader);

    debugPrintln(stcc.getSysdateForLog() + debugHeader + " New Input data = '" + inputForCancel.toXML() + "'");

          // Adding folder for Cancel
          stcw.addVersionToOrder (quoteOrder, "CANCEL");
          quoteOrder.header.orderAction = "Cancel";
          quoteOrder.save();

          // Starts process to manage Cancel Quote
          var processId = Process.startProcess ("stcw:validateQuote", quoteHeader.cwOrderId);
          debugPrintln(stcc.getSysdateForLog() + "Quote <" + quoteHeader.quoteNumber + ", " + quoteHeader.orderRowItemId + ">: processId = " + processId);

          var patchResults = rpts.patchAsynchMessageLog (processId, "crmQuoteValidation");

          Process.sendMessageToProcess (processId, null, "wsws:ifExpedtier_WHOLESALE/operation_QuoteValidation", inputForCancel);


          //
          //  setInputForCancelFromLoadedData_
          //
          function setInputForCancelFromLoadedData_ (inputForCancel, receivedInputData, quoteHeader) {
                inputForCancel.accountNumber       = receivedInputData.accountNumber;
                inputForCancel.businessUnit        = receivedInputData.businessUnit;
                inputForCancel.creationDate        = receivedInputData.creationDate;
                inputForCancel.quoteNumber         = quoteHeader.quoteNumber;
                inputForCancel.quoteStatus         = receivedInputData.quoteStatus;
                inputForCancel.quoteType           = receivedInputData.quoteType;
                inputForCancel.salesRepresentative = receivedInputData.salesRepresentative;
                inputForCancel.comments            = (receivedInputData.comments == null ? "" : receivedInputData.comments + "\n") +
                                                                        stcc.getSysdateInYYYYMMDD_HH24MMSS() + " - CancelReservation required by userid " + Global.getUserId();

                for(var i=0; i<receivedInputData.lineItems.length; i++) {
                      if(receivedInputData.lineItems[i].orderRowItemId == quoteHeader.orderRowItemId) {
                            setLineItemFromLoadedData_(inputForCancel.lineItems[0], receivedInputData.lineItems[i], quoteHeader.reservationNumber);
                      }
                }
          }            // s e t I n p u t F o  r C a n c e l F r o m L o a d e d D a t a _


          //
          //  setLineItemFromLoadedData_
          //
          function setLineItemFromLoadedData_ (cancelLineItem, inputLineItem, reservationNumber) {
                cancelLineItem.assetNumber        = inputLineItem.assetNumber;
                cancelLineItem.bandwidth          = inputLineItem.bandwidth;
                cancelLineItem.creationDate       = inputLineItem.creationDate;
                cancelLineItem.primaryAssetNumber = inputLineItem.primaryAssetNumber;
                cancelLineItem.productCode        = inputLineItem.productCode;
                cancelLineItem.reservationNumber  = reservationNumber;
                cancelLineItem.segmentFlag        = inputLineItem.segmentFlag;
                cancelLineItem.serviceDate        = inputLineItem.serviceDate;
                cancelLineItem.action             = inputLineItem.action;
                cancelLineItem.feasibilityStatus  = inputLineItem.feasibilityStatus;
                cancelLineItem.orderRowItemId     = inputLineItem.orderRowItemId;
                cancelLineItem.quantity           = inputLineItem.quantity;
                cancelLineItem.reservationDays    = inputLineItem.reservationDays;
                cancelLineItem.restoration        = inputLineItem.restoration;
                cancelLineItem.serviceStatus      = "Cancel";

                for(var i=0; i<inputLineItem.subservices.length; i++) {
                      setSubServicesFromLoadedData_(cancelLineItem.subservices[i], inputLineItem.subservices[i]);
                }

                for(var i=0; i<inputLineItem.nameValue.length; i++) {
                      setNameValueFromLoadedData_(cancelLineItem.nameValue[i], inputLineItem.nameValue[i]);
                }
          }            // s e t L i n e I t e m F r o m  L o a d e d D a t a _


          //
          //  setSubServicesFromLoadedData_
          //
          function setSubServicesFromLoadedData_ (cancelSubService, inputSubService) {
                cancelSubService.assetNumber        = inputSubService.assetNumber;
                cancelSubService.bandwidth          = inputSubService.bandwidth;
                cancelSubService.creationDate       = inputSubService.creationDate;
                cancelSubService.primaryAssetNumber = inputSubService.primaryAssetNumber;
                cancelSubService.productCode        = inputSubService.productCode;
                cancelSubService.reservationNumber  = inputSubService.reservationNumber;
                cancelSubService.segmentFlag        = inputSubService.segmentFlag;
                cancelSubService.serviceDate        = inputSubService.serviceDate;

                for(var i=0; i<inputSubService.nameValue.length; i++) {
                      setNameValueFromLoadedData_(cancelSubService.nameValue[i], inputSubService.nameValue[i]);
                }
          }            // s e t S u b S e r v i c e s F r o m L o a d e d D a t a _


          //
          //  setNameValueFromLoadedData_
          //
          function setNameValueFromLoadedData_ (dest, source) {
                dest.name  = source.name;
                dest.value = source.value;
          }            // s e t N a m e V a l u e F r o m L o a d e d D a t a _
  ]]></script>
</script>