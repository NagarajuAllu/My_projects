<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.compareReceivedNV_VASServParamsWithExistingOne">
  <label>Compare Received NV Pair and VAS NV Pair For Service With Existing One</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="existingLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="receivedLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="validationErrors" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="lineItemIdentifier" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    // nv check; it loops in existing NV pair and verifies if it exists also in received one
    var debugMsg = "compareReceivedNV_VASServParamsWithExistingOne (" + lineItemIdentifier + ")";

    // 2016-05-30: adding management for STORE & FORWARD List
    // checking received attribute:
    //     is in SKIP_LIST ?
    //        YES: Then, remove the attribute from WD
    //        NO: is in STORE_FORWARD_LIST ?
    //                YES: do nothing
    //                NO:  is in existing order ?
    //                        YES: it must have the same value, otherwise, reject
    //                        NO:  is in NEW_ATTR_LIST ?
    //                                YES: add because it's a new attribute
    //                                NO:  reject
    //
    // checking existing attribute:
    //     is in SKIP_LIST ?
    //        YES: do nothing
    //        NO: is in received order ?
    //                YES: does it have the same value?
    //                    YES: do nothing
    //                    NO:  is in STORE_FORWARD_LIST ?
    //                            YES: do nothing
    //                            NO:  reject
    //                NO: is in NEW_ATTR_LIST ?
    //                    YES: do nothing
    //                    NO:  reject

    var serviceType = receivedLineItemContainer.serviceLineItem.receivedServiceType;

    if(receivedLineItemContainer.serviceLineItemNameValueParameters != null) {
        var toBeRemoved = new Array();

        for(var i=0; i<receivedLineItemContainer.serviceLineItemNameValueParameters.length; i++) {
            var receivedNVName = receivedLineItemContainer.serviceLineItemNameValueParameters[i].serviceLineItemNameValueParameter.name;
            var found = false;
            var foundWithError = false;
            var lastErrorFound = null;

            // check if the NV pair is in the SKIP_LIST
            var isInSKIPList = stcw.isNameInSkipNVPairList(receivedNVName, serviceType);
            // check if the NV pair is in the STORE_FORWARD_LIST
            var isInStoreAndForwardList = stcw.isNameInStoreAndForwardNVPairList(receivedNVName, serviceType);
            // check if the NV pair is in the NEW_ATTR_LIST
            var isInNewAttrList = stcw.isNameInNewAttrNVPairList(receivedNVName, serviceType);

            if(isInSKIPList) {
    debugPrintln(stcc.getSysdateForLog() + " "  + debugMsg + " Removing NV pair: " + receivedNVName + "#" + i + "#" + receivedLineItemContainer.serviceLineItemNameValueParameters[i].serviceLineItemNameValueParameter.orderDataPath);
                toBeRemoved.push(i);
            }
            else {
                if(isInStoreAndForwardList) {
                    // do nothing
                }
                else {
                    // search nv in existing
                    if(existingLineItemContainer.serviceLineItemNameValueParameters != null) {
                        for(var j=0; j<existingLineItemContainer.serviceLineItemNameValueParameters.length && !found; j++) {
                            if(receivedNVName == existingLineItemContainer.serviceLineItemNameValueParameters[j].serviceLineItemNameValueParameter.name) {
                                // found; comparing the values
                                found = true;
                                var resultArray = compareValues_(receivedLineItemContainer.serviceLineItemNameValueParameters[i].serviceLineItemNameValueParameter.value,
                                                                 existingLineItemContainer.serviceLineItemNameValueParameters[j].serviceLineItemNameValueParameter.value,
                                                                 receivedNVName, "NV Pair");
                                if(resultArray != null) {
                                    found = false;
                                    foundWithError = true;
                                    lastErrorFound = resultArray;
                                }
                                else {
                                    foundWithError = false;
                                    lastErrorFound = null;
                                }
                            }
                        }
                    }

                    if(found) {
                        // it means that it was found with the same value so, nothing to do
                    }
                    else {
                        if(foundWithError) {
                            // found but it was wrong! adding error
                            validationErrors = stcw.appendToValidationErrors(lastErrorFound[0], lastErrorFound[1], validationErrors, debugMsg);
                        }
                        else {
                            if(isInNewAttrList) {
                                // not an issue; it's a new attribute!
                            }
                            else {
                                // not found NV; adding error
                                validationErrors = stcw.appendToValidationErrors("AE0065", Global.translateText("AE0065", null, ["NV Pair", receivedNVName, "Service", lineItemIdentifier, "existing", "received"]), validationErrors);
                            }
                        }
                    }
                }
            }
        }

        for(var k=toBeRemoved.length-1; k>=0; k--) {
            var index = toBeRemoved[k];
    debugPrintln(stcc.getSysdateForLog() + " "  + debugMsg + " Removing NV pair: " + index + "#" +
                 receivedLineItemContainer.serviceLineItemNameValueParameters[index].serviceLineItemNameValueParameter.name + "#" +
                 receivedLineItemContainer.serviceLineItemNameValueParameters[index].serviceLineItemNameValueParameter.orderDataPath);
            receivedLineItemContainer.serviceLineItemNameValueParameters[index].serviceLineItemNameValueParameter.deleteItem();
        }
    }


    if(existingLineItemContainer.serviceLineItemNameValueParameters != null) {

        for(var i=0; i<existingLineItemContainer.serviceLineItemNameValueParameters.length; i++) {
            var existingNVName = existingLineItemContainer.serviceLineItemNameValueParameters[i].serviceLineItemNameValueParameter.name;
            var found = false;
            var foundWithError = false;
            var lastErrorFound = null;

            // check if the NV pair is in the SKIP_LIST
            var isInSKIPList = stcw.isNameInSkipNVPairList(existingNVName, serviceType);
            // check if the NV pair is in the STORE_FORWARD_LIST
            var isInStoreAndForwardList = stcw.isNameInStoreAndForwardNVPairList(existingNVName, serviceType);
            // check if the NV pair is in the NEW_ATTR_LIST
            var isInNewAttrList = stcw.isNameInNewAttrNVPairList(existingNVName, serviceType);

            if(isInSKIPList) {
                // do nothing
            }
            else {
                // search nv in received
                if(receivedLineItemContainer.serviceLineItemNameValueParameters != null) {
                    for(var j=0; j<receivedLineItemContainer.serviceLineItemNameValueParameters.length && !found; j++) {
                        if(existingNVName == receivedLineItemContainer.serviceLineItemNameValueParameters[j].serviceLineItemNameValueParameter.name) {
                            // found; comparing the values
                            found = true;
                            var resultArray = compareValues_(receivedLineItemContainer.serviceLineItemNameValueParameters[j].serviceLineItemNameValueParameter.value,
                                                             existingLineItemContainer.serviceLineItemNameValueParameters[i].serviceLineItemNameValueParameter.value,
                                                             existingNVName, "NV Pair");
                            if(resultArray != null) {
                                found = false;
                                foundWithError = true;
                                lastErrorFound = resultArray;
                            }
                            else {
                                foundWithError = false;
                                lastErrorFound = null;
                            }
                        }
                    }
                }

                if(found) {
                    // it means that it was found with the same value so, nothing to do
                }
                else {
                    if(foundWithError) {
                        if(isInStoreAndForwardList) {
                            // do nothing
                        }
                        else {
                            // found but it was wrong and not in Store & Forward list! adding error
                            validationErrors = stcw.appendToValidationErrors(lastErrorFound[0], lastErrorFound[1], validationErrors, debugMsg);

                        }
                    }
                    else {
                        if(isInNewAttrList) {
                            // not an issue; it's a new attribute!
                        }
                        else {
                            // not found NV; adding error
                            validationErrors = stcw.appendToValidationErrors("AE0065", Global.translateText("AE0065", null, ["NV Pair", existingNVName, "Service", lineItemIdentifier, "received", "existing"]), validationErrors);
                        }
                    }
                }
            }
        }
    }



    // nv check; it loops in existing NV pair and verifies if it exists also in received one
    if(existingLineItemContainer.serviceLineItemVASNVParameters != null) {
        var missingReceived = 0;
        for(var i=0; i<existingLineItemContainer.serviceLineItemVASNVParameters.length; i++) {
            var existingNVName = existingLineItemContainer.serviceLineItemVASNVParameters[i].serviceLineItemVASNVParameter.name;
            var found = false;
            var foundWithError = false;
            var lastErrorFound = null;
            // search nv in received
            if(receivedLineItemContainer.serviceLineItemVASNVParameters != null) {
                for(var j=0; j<receivedLineItemContainer.serviceLineItemVASNVParameters.length && !found; j++) {
                    if(existingNVName == receivedLineItemContainer.serviceLineItemVASNVParameters[j].serviceLineItemVASNVParameter.name) {
                        // found; comparing the values
                        found = true;
                        var resultArray = compareValues_(receivedLineItemContainer.serviceLineItemVASNVParameters[j].serviceLineItemVASNVParameter.name,
                                                         existingLineItemContainer.serviceLineItemVASNVParameters[i].serviceLineItemVASNVParameter.name,
                                                         existingNVName, "VAS NV Pair");
                        if(resultArray != null) {
                            found = false;
                            foundWithError = true;
                            lastErrorFound = resultArray;
                        }
                        else {
                            foundWithError = false;
                            lastErrorFound = null;
                        }
                    }
                }
            }

            if(!found) {
                if(foundWithError) {
                    // found but it was wrong! adding error
                    validationErrors = stcw.appendToValidationErrors(lastErrorFound[0], lastErrorFound[1], validationErrors, debugMsg);
                }
                else {
                    // not found NV; adding error
                    validationErrors = stcw.appendToValidationErrors("AE0065", Global.translateText("AE0065", null, ["VAS NV Pair", existingNVName, "Service", lineItemIdentifier, "received", "existing"]), validationErrors);
                    missingReceived++;
                }
            }
        }

        if(receivedLineItemContainer.serviceLineItemVASNVParameters != null) {
            if((receivedLineItemContainer.serviceLineItemVASNVParameters.length + missingReceived) != existingLineItemContainer.serviceLineItemVASNVParameters.length) {
                // it means that there are additional attributes in received that are not in existing! ERROR!
                validationErrors = stcw.appendToValidationErrors("AE0066", Global.translateText("AE0066", null, ["Service", lineItemIdentifier, "VAS NV Pair"]), validationErrors);
            }
        }
    }



    return validationErrors;

    function compareValues_(receivedAttribute, existingAttribute, attributeName, category) {
        var resultArray = null;

        if(receivedAttribute == null) {
            if(existingAttribute != null) {
                resultArray = ["AE0055", Global.translateText("AE0055", null, [category, attributeName, "existing"])];
            }
        }
        else {
            if(existingAttribute == null) {
                resultArray = ["AE0057", Global.translateText("AE0057", null, [category, attributeName, "existing"])];
            }
            else {
                if(! receivedAttribute.toString().equals(existingAttribute.toString())) {
                    resultArray = ["AE0056", Global.translateText("AE0056", null, [category, attributeName, receivedAttribute, existingAttribute, "existing"])];
                }
            }
        }

        return resultArray;
    }
  ]]></script>
</script>