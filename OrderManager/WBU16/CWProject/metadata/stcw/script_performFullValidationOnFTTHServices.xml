<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.performFullValidationOnFTTHServices">
  <label>Perform Full Validation On FTTH Services</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="bundleOrder" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="isSubmit" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
    <parameter name="isCancel" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
    <parameter name="failureArray" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var dummyValueForHBU = Global.getConfigVariable("DUMMY_VALUE_FOR_FTTH", "DUMMY");


    var ftthLinkGIServiceType = stcw.getGraniteServiceTypeForSOMInternalName("FTTH_LINK");
    var hsiGIServiceType = stcw.getGraniteServiceTypeForSOMInternalName("FTTH_HSI");
    var voipGIServiceType = stcw.getGraniteServiceTypeForSOMInternalName("FTTH_VOIP");
    var iptvGIServiceType = stcw.getGraniteServiceTypeForSOMInternalName("FTTH_IPTV");
    var ontGIServiceType = stcw.getGraniteServiceTypeForSOMInternalName("ONT");
    var stbGIServiceType = stcw.getGraniteServiceTypeForSOMInternalName("STB");

    var ftthLinkService = null;
    var hsiService = null;
    var voipService = null;
    var iptvService = null;
    var ontService = null;
    var stbService = null;

    var plateId = null;
    var oldPlateId = null;

    var orderChangeRequestType = null;
    var referenceTelNumberOnPLI = bundleOrder.parentLineItems[0].parentLineItem.referenceTelNumber;

    var isReviseRequest = (!isSubmit && !isCancel);

    ///////
    // Check correctness of referenceTelNumber in PLI:
    //   1. compared to ACTIVE version if submit
    //   2. compared to the entire DB if there is no ACTIVE version if submit
    //   3. compared to PROVISIONING version if cancel
    //////
    if(isSubmit) {
        // checking that referenceTelNumber is equals to the referenceTelNumber of the "ACTIVE" version
        var activeBundleList = stcw.getAllLineItemsByIdentifierAndProvisioningFlag(bundleOrder.parentLineItems[0].parentLineItem.lineItemIdentifier, "B", "ACTIVE");
        if(activeBundleList != null && activeBundleList.length > 0) {
            if(activeBundleList[0].referenceTelNumber != referenceTelNumberOnPLI) {
                var validationErrors = ["AE0198", Global.translateText("AE0198", null, ["ACTIVE", referenceTelNumberOnPLI, activeBundleList[0].referenceTelNumber])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.parentLineItems[0].parentLineItem.lineItemIdentifier, failureArray, isSubmit);
            }
        }
        else {
            // it means that there are no "ACTIVE" version for the ParentLineItem; checking that the referenceTelNumber is unique
            var lineItemsWithSameRefTelNum = stcw.getAllLineItemsByReferenceTelNumber(referenceTelNumberOnPLI);
            if(lineItemsWithSameRefTelNum != null && lineItemsWithSameRefTelNum.length > 0) {
                var foundOrder = Order.getOrderById(lineItemsWithSameRefTelNum[0].orderId);
                var foundOrderNumber = ((foundOrder != null) ? foundOrder.orderHeader.orderNumber : null);

                // it means that the referenceTelNumber is in EOC DB
                var validationErrors = ["AE0202", Global.translateText("AE0202", null, [referenceTelNumberOnPLI, foundOrderNumber])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.parentLineItems[0].parentLineItem.lineItemIdentifier, failureArray, isSubmit);
            }
        }
    }
    else if (isCancel) {
        // checking that referenceTelNumber is equals to the referenceTelNumber of the "ACTIVE" version
        var provBundleList = stcw.getAllLineItemsByIdentifierAndProvisioningFlag(bundleOrder.parentLineItems[0].parentLineItem.lineItemIdentifier, "B", "PROVISIONING");
        if(provBundleList != null && provBundleList.length > 0) {
            if(provBundleList[0].referenceTelNumber != referenceTelNumberOnPLI) {
                var validationErrors = ["AE0198", Global.translateText("AE0198", null, ["PROVISIONING", referenceTelNumberOnPLI, provBundleList[0].referenceTelNumber])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.parentLineItems[0].parentLineItem.lineItemIdentifier, failureArray, isSubmit);
            }
        }
    }


    ///////
    // Check mandatory attributes for the PLI
    //////
    var mandatoryAttributes = stcw.getLineItemMandatoryAttribsByOrderType_ServiceType(bundleOrder.orderHeader.orderType, bundleOrder.parentLineItems[0].parentLineItem.serviceType);
    if(mandatoryAttributes != null) {
        for(var ma=0; ma<mandatoryAttributes.length; ma++) {
            var attributeValue = bundleOrder.parentLineItems[0].parentLineItem[mandatoryAttributes[ma]];
            if(!stcc.stringHasValue(attributeValue)) {
                var validationErrors = ["AE0039", Global.translateText("AE0039", null, mandatoryAttributes[ma])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.parentLineItems[0].parentLineItem.lineItemIdentifier, failureArray, isSubmit);
            }
        }
    }

    if(isCancel) {
        // skipping the next validation due to cancel request
        return failureArray;
    }

    ///////
    // Check attributes for all the services
    //////
    var services = bundleOrder.parentLineItems[0].services;
    var existOtherActionExceptD = false;

    for(var i=0; i<services.length; i++) {
        var serviceLineItem = services[i].serviceLineItem;

        // to understand if, in case of change "F" order, there are only "N" and "D" actions
        if(serviceLineItem.action == "A" || serviceLineItem.action == "M") {
            existOtherActionExceptD = true;
        }

        // checking that referenceTelNumber is the same for all the flows
        if(serviceLineItem.referenceTelNumber != referenceTelNumberOnPLI) {
            var validationErrors = ["AE0197", Global.translateText("AE0197", null, [serviceLineItem.referenceTelNumber, referenceTelNumberOnPLI])];
            failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
        }

        if(serviceLineItem.serviceType == ftthLinkGIServiceType) {
            if(ftthLinkService != null) {
                var  validationErrors = ["AE0185", Global.translateText("AE0185", null, [serviceLineItem.receivedServiceType, ftthLinkService.lineItemIdentifier])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
            }
            else {
                ftthLinkService = serviceLineItem;
            }
        }
        else if(serviceLineItem.serviceType == hsiGIServiceType) {
            if(hsiService != null) {
                var  validationErrors = ["AE0185", Global.translateText("AE0185", null, [serviceLineItem.receivedServiceType, hsiService.lineItemIdentifier])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
            }
            else {
                hsiService = serviceLineItem;
            }
        }
        else if(serviceLineItem.serviceType == voipGIServiceType) {
            if(voipService != null) {
                var  validationErrors = ["AE0185", Global.translateText("AE0185", null, [serviceLineItem.receivedServiceType, voipService.lineItemIdentifier])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
            }
            else {
                voipService = serviceLineItem;
            }
        }
        else if(serviceLineItem.serviceType == iptvGIServiceType) {
            if(iptvService != null) {
                var  validationErrors = ["AE0185", Global.translateText("AE0185", null, [serviceLineItem.receivedServiceType, iptvService.lineItemIdentifier])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
            }
            else {
                iptvService = serviceLineItem;
            }
        }
        else if(serviceLineItem.serviceType == ontGIServiceType) {
            if(ontService != null) {
                var  validationErrors = ["AE0185", Global.translateText("AE0185", null, [serviceLineItem.receivedServiceType, ontService.lineItemIdentifier])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
            }
            else {
                ontService = serviceLineItem;
            }
        }
        else if(serviceLineItem.serviceType == stbGIServiceType) {
            if(stbService != null) {
                var  validationErrors = ["AE0185", Global.translateText("AE0185", null, [serviceLineItem.receivedServiceType, stbService.lineItemIdentifier])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
            }
            else {
                stbService = serviceLineItem;
            }
        }

        ///////
        // Check mandatory attributes for the serviceType and the orderType
        //////
        var mandatoryAttributes = stcw.getLineItemMandatoryAttribsByOrderType_ServiceType(bundleOrder.orderHeader.orderType, serviceLineItem.serviceType);
        if(mandatoryAttributes != null) {
            for(var ma=0; ma<mandatoryAttributes.length; ma++) {
                var attributeValue = serviceLineItem[mandatoryAttributes[ma]];
                if(!stcc.stringHasValue(attributeValue)) {
                    var validationErrors = ["AE0039", Global.translateText("AE0039", null, mandatoryAttributes[ma])];
                    failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                }
            }
        }

        ///////
        // Check that all the services have the same plateId for A and B except dummy
        ///////
        var foundPlateId = serviceLineItem.locationACCLICode;
        if(foundPlateId != dummyValueForHBU) {
            if(plateId == null) {
                plateId = foundPlateId;
            }
            else {
                if(plateId != foundPlateId) {
                    var validationErrors = ["AE0186", Global.translateText("AE0186", null, ["A", foundPlateId, serviceLineItem.lineItemIdentifier, plateId])];
                    failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                }
            }
        }

        foundPlateId = serviceLineItem.locationBCCLICode;
        if(foundPlateId != dummyValueForHBU) {
            if(plateId == null) {
                plateId = foundPlateId;
            }
            else {
                if(plateId != foundPlateId) {
                    var validationErrors = ["AE0186", Global.translateText("AE0186", null, ["B", foundPlateId, serviceLineItem.lineItemIdentifier, plateId])];
                    failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                }
            }
        }

        ///////
        // In case of RELOCATION, RELOCATION_NC, RELOCATION_BW Old and New Plate Id have to be different
        ///////
        if(bundleOrder.orderHeader.orderType == "C" ||
           (bundleOrder.orderHeader.orderType == "F" && bundleOrder.orderHeader.feasibilityFor == "CHANGE")) {
            var changeRequestTypeReceived = serviceLineItem.changeRequestType;

            if(changeRequestTypeReceived == "RELOCATION" ||
               changeRequestTypeReceived == "RELOCATION_BW" ||
               changeRequestTypeReceived == "RELOCATION_NC") {
                if(serviceLineItem.serviceType == ftthLinkGIServiceType) {
                    if(serviceLineItem.locationAOldPlateID == null) {
                        var validationErrors = ["AE0039", Global.translateText("AE0039", null, "LocationAoldPlateId")];
                        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                    }
                    else if(serviceLineItem.locationACCLICode == serviceLineItem.locationAOldPlateID) {
                        var validationErrors = ["AE0187", Global.translateText("AE0187", null, changeRequestTypeReceived)];
                        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                    }
                }

                if(serviceLineItem.action != "M") {
                    var validationErrors = ["AE0193", Global.translateText("AE0193", null, [changeRequestTypeReceived, serviceLineItem.serviceType, serviceLineItem.action, "M"])];
                    failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                }

                if(bundleOrder.orderHeader.orderType == "C" && serviceLineItem.reservationNumber == null) {
                    var validationErrors = ["AE0203", Global.translateText("AE0203", null, [changeRequestTypeReceived])];
                    failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                }

                if(changeRequestTypeReceived == "RELOCATION_BW" && serviceLineItem.serviceType != hsiGIServiceType) {
                    var validationErrors = ["AE0204", Global.translateText("AE0204", null, [changeRequestTypeReceived, hsiGIServiceType, serviceLineItem.serviceType])];
                    failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                }

                if(changeRequestTypeReceived == "RELOCATION_NC" && serviceLineItem.serviceType != voipGIServiceType) {
                    var validationErrors = ["AE0204", Global.translateText("AE0204", null, [changeRequestTypeReceived, voipGIServiceType, serviceLineItem.serviceType])];
                    failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                }
            }
            else if(changeRequestTypeReceived == "RELOCATION_ADD") {
                if(isSubmit) {
                    if(serviceLineItem.action != "A") {
                        var validationErrors = ["AE0193", Global.translateText("AE0193", null, [changeRequestTypeReceived, serviceLineItem.serviceType, serviceLineItem.action, "A"])];
                        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                    }
                }
                else {
                    // do nothing
                }

                if(bundleOrder.orderHeader.orderType == "C" && serviceLineItem.reservationNumber == null) {
                    var validationErrors = ["AE0203", Global.translateText("AE0203", null, [changeRequestTypeReceived])];
                    failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                }
            }
            else if(changeRequestTypeReceived == "RELOCATION_DEL") {
                if(isSubmit) {
                    if(serviceLineItem.action != "D") {
                        var validationErrors = ["AE0193", Global.translateText("AE0193", null, [changeRequestTypeReceived, serviceLineItem.serviceType, serviceLineItem.action, "D"])];
                        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                    }
                }

                if(bundleOrder.orderHeader.orderType == "C" && serviceLineItem.reservationNumber == null) {
                    var validationErrors = ["AE0203", Global.translateText("AE0203", null, [changeRequestTypeReceived])];
                    failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                }
            }

            if(serviceLineItem.action != "N") {
                if(orderChangeRequestType == null) {
                    orderChangeRequestType = changeRequestTypeReceived;
                }
                else {
                    // checking if the changeRequestType are compatible
                    var isCompatible = stcw.checkIfChangeRequestTypeIsCompatible(changeRequestTypeReceived, orderChangeRequestType);

                    if(!isCompatible) {
                        var validationErrors = ["AE0189", Global.translateText("AE0189", null, [serviceLineItem.lineItemIdentifier, orderChangeRequestType, changeRequestTypeReceived])];
                        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, serviceLineItem.lineItemIdentifier, failureArray, isSubmit);
                    }
                }
            }
        }
    }

    if(bundleOrder.orderHeader.orderType == "F") {
        if(! existOtherActionExceptD) {
            var  validationErrors = ["AE0199", Global.translateText("AE0199")];
            failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
        }
    }

    ///////
    // Check the structure of the order and the action on the lineItems for VOIP and HSI
    ///////
    if(bundleOrder.orderHeader.orderType != "O") {
        if(hsiService != null) {
            if(hsiService.action == "D" && (voipService == null || voipService.action == "D")) {
                // Inconsistent request: action for {0} is "D" even if the orderType is "{1}" and {2} is missing or has action "D";
                var  validationErrors = ["AE0190", Global.translateText("AE0190", null, ["HSI", bundleOrder.orderHeader.orderType, "VOIP"])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
            }
        }
        else if(voipService != null) {
            if(voipService.action == "D") {
                // Inconsistent request: action for {0} is "D" even if the orderType is "{1}" and {2} is missing or has action "D";
                var  validationErrors = ["AE0190", Global.translateText("AE0190", null, ["VOIP", bundleOrder.orderHeader.orderType, "HSI"])];
                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
            }
        }
    }

    ///////
    // Check the type of feasibility/reservation. For "H", only reservation is supported
    ///////
    if(bundleOrder.orderHeader.reservation == "N") {
        // Received wrong value
        var  validationErrors = ["AE0188", Global.translateText("AE0188", null, ["reservation", bundleOrder.orderHeader.reservation])];
        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
    }

    ///////
    // Check that the orderRowItemId is not duplicated in the order.
    // Not done for "F" because already check in stcw.performFullValidationForOrder.
    ///////
    if(bundleOrder.orderHeader.orderType != "F") {
        failureArray = stcw.checkIfOrderRowItemIdRepeatedInOrder(bundleOrder, isSubmit, failureArray);
    }

    ///////
    // Check the correctness of the structure of the order in case of change order, according to the changeRequetType
    ///////
    if(bundleOrder.orderHeader.orderType == "C" ||
       (bundleOrder.orderHeader.orderType == "F" && bundleOrder.orderHeader.feasibilityFor == "CHANGE")) {
        if(isCancel) {
            // no check
        }
        else {
            if(orderChangeRequestType != null) {

                if(orderChangeRequestType == "CHANGE_ONT") {
                    if(bundleOrder.orderHeader.orderType == "F" && bundleOrder.orderHeader.feasibilityFor == "CHANGE") {
                        var validationErrors = ["AE0201", Global.translateText("AE0201", null, [orderChangeRequestType])];
                        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
                    }


                    if(ontService == null) {
                        var validationErrors = ["AE0191", Global.translateText("AE0191", null, [orderChangeRequestType, "ONT"])];
                        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
                    }
                    else {
                        if(ontService.action == "N" || ontService.action == "D") {
                            var validationErrors = ["AE0193", Global.translateText("AE0193", null, [orderChangeRequestType, "ONT", ontService.action, "M"])];
                            failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, ontService.lineItemIdentifier, failureArray, isSubmit);
                        }
                        else {
                            var foundError = false;

                            if(ftthLinkService != null && ftthLinkService.action != "N" && ftthLinkService.action != "M") {
                                foundError = true;
                                var validationErrors = ["AE0193", Global.translateText("AE0193", null, [orderChangeRequestType, "FTTH_LINK", ftthLinkService.action, "N"])];
                                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, ftthLinkService.lineItemIdentifier, failureArray, isSubmit);
                            }

                            if(hsiService != null && hsiService.action != "N") {
                                if(isReviseRequest) {
                                    // don't reject because it's a revise and so EOC "upgraded" the HSI to have a lineItem provisionable for CIM-H.
                                }
                                else {
                                    foundError = true;
                                    var validationErrors = ["AE0193", Global.translateText("AE0193", null, [orderChangeRequestType, "HSI", hsiService.action, "N"])];
                                    failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, hsiService.lineItemIdentifier, failureArray, isSubmit);
                                }
                            }

                            if(voipService != null && voipService.action != "N") {
                                if(isReviseRequest && hsiService == null) {
                                    // don't reject because it's a revise without HSI and so EOC "upgraded" the VOIP to have a lineItem provisionable for CIM-H.
                                }
                                else {
                                    foundError = true;
                                    var validationErrors = ["AE0193", Global.translateText("AE0193", null, [orderChangeRequestType, "VOIP", voipService.action, "N"])];
                                    failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, voipService.lineItemIdentifier, failureArray, isSubmit);
                                }
                            }

                            if(iptvService != null && iptvService.action != "N") {
                                foundError = true;
                                var validationErrors = ["AE0193", Global.translateText("AE0193", null, [orderChangeRequestType, "IPTV", iptvService.action, "N"])];
                                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, iptvService.lineItemIdentifier, failureArray, isSubmit);
                            }

                            if(stbService != null && stbService.action != "N") {
                                foundError = true;
                                var validationErrors = ["AE0193", Global.translateText("AE0193", null, [orderChangeRequestType, "STB", stbService.action, "N"])];
                                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, stbService.lineItemIdentifier, failureArray, isSubmit);
                            }

                            if(! foundError) {
                                // enabling the action "M" on the HSI or VOIP
                                if(hsiService != null) {
                                    hsiService.action = "M";
                                    hsiService.lineItemStatus = "Hold"; // resetting the status to force EOC to process the lineItem
                                    hsiService.save();
                                }
                                else {
                                    voipService.action = "M";
                                    voipService.lineItemStatus = "Hold"; // resetting the status to force EOC to process the lineItem
                                    voipService.save();
                                }
                            }
                        }
                    }
                }
                else if(orderChangeRequestType == "CHANGE_NUM") {
                    if(bundleOrder.orderHeader.orderType == "F" && bundleOrder.orderHeader.feasibilityFor == "CHANGE") {
                        var validationErrors = ["AE0201", Global.translateText("AE0201", null, [orderChangeRequestType])];
                        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
                    }

                    if(voipService == null) {
                        var validationErrors = ["AE0191", Global.translateText("AE0191", null, [orderChangeRequestType, "VOIP"])];
                        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);

                    }
                    else {
                        if(voipService.action == "N" || voipService.action == "D") {
                            var validationErrors = ["AE0193", Global.translateText("AE0193", null, [orderChangeRequestType, "VOIP", voipService.action, "M"])];
                            failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, voipService.lineItemIdentifier, failureArray, isSubmit);
                        }
                        else {
                            if(ftthLinkService != null && ftthLinkService.action != "N") {
                                var validationErrors = ["AE0193", Global.translateText("AE0193", null, [orderChangeRequestType, "FTTH_LINK", ftthLinkService.action, "N"])];
                                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, ftthLinkService.lineItemIdentifier, failureArray, isSubmit);
                            }

                            if(hsiService != null && hsiService.action != "N") {
                                var validationErrors = ["AE0193", Global.translateText("AE0193", null, [orderChangeRequestType, "HSI", hsiService.action, "N"])];
                                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, hsiService.lineItemIdentifier, failureArray, isSubmit);
                            }

                            if(iptvService != null && iptvService.action != "N") {
                                var validationErrors = ["AE0193", Global.translateText("AE0193", null, [orderChangeRequestType, "IPTV", iptvService.action, "N"])];
                                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, iptvService.lineItemIdentifier, failureArray, isSubmit);
                            }

                            if(ontService != null && ontService.action != "N") {
                                var validationErrors = ["AE0193", Global.translateText("AE0193", null, [orderChangeRequestType, "ONT", ontService.action, "N"])];
                                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, ontService.lineItemIdentifier, failureArray, isSubmit);
                            }

                            if(stbService != null && stbService.action != "N") {
                                var validationErrors = ["AE0193", Global.translateText("AE0193", null, [orderChangeRequestType, "STB", stbService.action, "N"])];
                                failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, stbService.lineItemIdentifier, failureArray, isSubmit);
                            }
                        }
                    }
                }
                else if(orderChangeRequestType == "UPGRADE" || orderChangeRequestType == "DOWNGRADE") {
                    if(ontService != null && ontService.action != "N") {
                        var validationErrors = ["AE0193", Global.translateText("AE0193", null, [orderChangeRequestType, "ONT", ontService.action, "N"])];
                        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, ontService.lineItemIdentifier,failureArray, isSubmit);
                    }
                    if((hsiService == null || hsiService.action == "D") &&
                       (iptvService == null || iptvService.action == "D") &&
                       (voipService == null || voipService.action == "D")) {
                           var validationErrors = ["AE0192", Global.translateText("AE0192", null, orderChangeRequestType)];
                           failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
                    }

                    if(orderChangeRequestType == "DOWNGRADE") {
                        // for downgrade, no possible to have "A"
                        if(hsiService != null && hsiService.action == "A") {
                            var validationErrors = ["AE0200", Global.translateText("AE0200", null, [orderChangeRequestType, "HSI"])];
                            failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
                        }
                        if(voipService != null && voipService.action == "A") {
                            var validationErrors = ["AE0200", Global.translateText("AE0200", null, [orderChangeRequestType, "VOIP"])];
                            failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
                        }
                        if(iptvService != null && iptvService.action == "A") {
                            var validationErrors = ["AE0200", Global.translateText("AE0200", null, [orderChangeRequestType, "IPTV"])];
                            failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
                        }

                        if(bundleOrder.orderHeader.orderType == "F" && bundleOrder.orderHeader.feasibilityFor == "CHANGE") {
                            var validationErrors = ["AE0201", Global.translateText("AE0201", null, [orderChangeRequestType])];
                            failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
                        }
                    }
                }
            }
        }
    }


    ///////
    // Check the structure of the order
    ///////
    if((hsiService == null || hsiService.action == "N") &&
       (voipService == null || voipService.action == "N")) {
        // wrong structure: at least 1 voip or 1 hsi should be in the order
        var  validationErrors = ["AE0184", Global.translateText("AE0184")];
        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
    }


    return failureArray;
  ]]></script>
</script>