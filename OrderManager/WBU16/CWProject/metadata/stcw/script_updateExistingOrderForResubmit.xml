<?xml version="1.0" encoding="UTF-8" ?>
<script name="stcw.updateExistingOrderForResubmit">
  <label>Update Existing Order For Resubmit</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="existingOrder" type="rifp">
      <type>order_stcw.wholesaleBundleOrderSTC</type>
    </parameter>
    <parameter name="receivedInputMsg" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var validationErrors = null;
    var failureArray = null;


    // generating the temporary order for received data
    var orderForReceivedData = stcw.mappingIncomingDSIntoBundleOrder(receivedInputMsg, true, false);
    if(orderForReceivedData == null) {
        validationErrors = stcw.appendToValidationErrors("AE0035", Global.translateText("AE0035"), validationErrors, "updateExistingOrderForResubmit (" + existingOrder.orderHeader.orderNumber + ")");
    }
    else {
        // map NV pairs into LineItem attributes
        failureArray = stcw.mapNVPairsIntoLineItemAttributes(orderForReceivedData, true);

        // Replace COM ServiceType with GI one
        failureArray = stcw.replaceCOMServiceTypeWithGIServiceTypeInOrder(orderForReceivedData, true, failureArray);

        // update orderHeader of the existing order with the data received
        failureArray = stcw.updateExistingOrderHeaderForResubmit(existingOrder, orderForReceivedData, failureArray);

        // bundle check; it loops in bundle of existing order and verifies if it exists also in received one
        if(existingOrder.parentLineItems != null) {
            var missingReceived = 0;
            for(var i=0; i<existingOrder.parentLineItems.length; i++) {
                var existingLineItem = existingOrder.parentLineItems[i].parentLineItem.lineItemIdentifier;
                var found = false;
                // search bundle in received
                if(orderForReceivedData.parentLineItems != null) {
                    for(var j=0; j<orderForReceivedData.parentLineItems.length && !found; j++) {
                        if(existingLineItem == orderForReceivedData.parentLineItems[j].parentLineItem.lineItemIdentifier) {
                            // found; comparing the 2 lineItems and the entire hierarchy
                            found = true;
                            failureArray = stcw.updateExistingLineItemForResubmit(existingOrder.parentLineItems[i], orderForReceivedData.parentLineItems[j], "B", existingOrder, failureArray);
                        }
                    }
                }

                if(!found) {
                    // not found bundle; adding error
                    validationErrors = stcw.appendToValidationErrors("AE0067", Global.translateText("AE0067", null, existingLineItem), validationErrors, "updateExistingOrderForResubmit (" + existingOrder.orderHeader.orderNumber + ")");
                    missingReceived++;
                }
            }

            if(orderForReceivedData.parentLineItems != null) {
                if((orderForReceivedData.parentLineItems.length + missingReceived) != existingOrder.parentLineItems.length) {
                    // it means that there are additional bundles in received that are not in existing! ERROR!
                    validationErrors = stcw.appendToValidationErrors("AE0059", Global.translateText("AE0059",  null, ["B", "existing"]), validationErrors, "updateExistingOrderForResubmit (" + existingOrder.orderHeader.orderNumber + ")");
                }
            }
        }
        else {
            if(orderForReceivedData.parentLineItems != null) {
                // it means that there are bundles in received that are not in existing! ERROR!
                validationErrors = stcw.appendToValidationErrors("AE0059", Global.translateText("AE0059",  null, ["B", "existing"]), validationErrors, "updateExistingOrderForResubmit (" + existingOrder.orderHeader.orderNumber + ")");
            }
        }

        // deleting temporary order
        orderForReceivedData.deleteOrder();
    }

    if(validationErrors != null) {
        failureArray = stcw.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingOrder.orderHeader.orderNumber, failureArray, true);
    }


    return failureArray;
  ]]></script>
</script>