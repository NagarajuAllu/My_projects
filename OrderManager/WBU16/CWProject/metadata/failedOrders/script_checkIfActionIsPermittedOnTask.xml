<?xml version="1.0" encoding="UTF-8" ?>
<script name="failedOrders.checkIfActionIsPermittedOnTask">
  <label>Check If Action Is Permitted On Task</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="selectedTask" type="rifp">
      <type>doc_granite.WO_TASK_INST</type>
    </parameter>
    <parameter name="stateProv" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="woOrderType" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var enabled = false;

    var searchDoc = new Document("cwf_up.UserIDSearch");
    searchDoc.userId = Global.getUserId();

    var resultList = Finder.runFinder("failedOrders.findFOGroupConfigurationForUser", "select", searchDoc);

    if(resultList != null) {
        var taskToProcess = getTaskToAnalyze_();

        for(var i=0; i<resultList.length && !enabled; i++) {
            var groupConfiguration = resultList[i];

            var stop = false;
            if(groupConfiguration.taskOperation == taskToProcess.TASK_OPERATION &&
               groupConfiguration.taskStatusCode == taskToProcess.STATUS_CODE) {
                // it means that the main conditions are respected... checking now
                if(groupConfiguration.region != null && groupConfiguration.region != stateProv) {
                    stop = true;
                }

                if(!stop) {
                    if(groupConfiguration.orderType != null && groupConfiguration.orderType != woOrderType) {
                        stop = true;
                    }
                }

                if(!stop) {
                    var rejectDescription = granite.getUDAValueFor("TASK", taskToProcess.TASK_INST_ID, "Rejected Task Details", "Reason Description");

                    if(groupConfiguration.reasonCode != null) {
                        if(rejectDescription == null) {
                            stop = true;
                        }
                        else {
                            var reasonCode = groupConfiguration.reasonCode;
                            if(reasonCode.endsWith("%")) {
                                reasonCode = reasonCode.substring(0, reasonCode.length - 1);
                                stop = !(rejectDescription.startsWith(reasonCode));
                            }
                            else {
                                stop = (rejectDescription != reasonCode);
                            }
                        }
                    }

                    if(!stop) {
                        if(groupConfiguration.reasonCodeNot != null) {
                            if(rejectDescription == null) {
                                stop = false;
                            }
                            else {
                                var reasonCodeNot = groupConfiguration.reasonCodeNot;
                                if(reasonCodeNot.endsWith("%")) {
                                    reasonCodeNot = reasonCodeNot.substring(0, reasonCodeNot.length - 1);
                                    stop = rejectDescription.startsWith(reasonCodeNot);
                                }
                                else {
                                    stop = (rejectDescription == reasonCodeNot);
                                }
                            }
                        }
                    }
                }

                enabled = !stop;
            }
        }
    }


    return enabled;


    // script to return the real task on which the action will be implemented!
    // And for which the user should have privilege to execute the action
    function getTaskToAnalyze_() {
        var taskToAnalyze = selectedTask;

        var taskToReprocessConfig = failedOrders.getTaskToReprocessConfig(selectedTask.TASK_OPERATION, selectedTask.STATUS_CODE);
        if(taskToReprocessConfig != null && taskToReprocessConfig.existDependent) {
            // verify if there is a dependent task...
            var blockingTaskIdList = granite.getBlockingTaskIdsForDependency(selectedTask.WO_INST_ID, selectedTask.TASK_INST_ID);
            if(blockingTaskIdList != null) {
                var found = false;
                for(var i=0; i<blockingTaskIdList.length && !found; i++) {
                    var task = granite.getTaskById(blockingTaskIdList[i]);
                    if(task.STATUS_CODE != 7 && task.STATUS_CODE != 8) {
                        taskToAnalyze = task;
                        found = true;
                    }
                }
            }
        }

        return taskToAnalyze;
    }
  ]]></script>
</script>