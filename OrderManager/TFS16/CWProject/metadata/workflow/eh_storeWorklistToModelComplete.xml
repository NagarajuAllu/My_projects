<?xml version="1.0" encoding="UTF-8" ?>
<event__handler name="workflow.storeWorklistToModelComplete">
  <flags enum-type="metadataFlag">FINAL</flags>
  <event>evt_cwl_worklist.event.storeWorklistToModelComplete</event>
  <eventID>CW</eventID>
  <eventType>WORKLIST_IMP_TASK_STORE_COMPLETE</eventType>
  <label>CustomWL Attribute Settings</label>
  <metaVersion>25</metaVersion>
  <script><![CDATA[
    var worklistRecord = target;
    var order = Order.getOrderById(worklistRecord.OrderId);

    var userType = null;

    if(worklistRecord.Operation.endsWith("prepareToSubmitPRNR") ||
       worklistRecord.Operation.endsWith("receiveRejection") ||
       worklistRecord.Operation.endsWith("prepareToValidatePRNRAndFeasibilityCheck")) {

        // the WL record will be filled with PRNR info
        worklistRecord.objectCreationDate = order.prnrDocument.creationDate;
        worklistRecord.customerName = order.prnrDocument.customerName;
        worklistRecord.objectPlannedRFSDate = order.prnrDocument.plannedRFSDate;
        worklistRecord.objectType = "PRNR";
        worklistRecord.objectName = order.prnrDocument.prnrName;
        worklistRecord.objectId = order.prnrDocument.id;
        worklistRecord.objectStatus = order.prnrDocument.prnrStatus;
        worklistRecord.requester = order.prnrDocument.createdBy;

        userType = workflow.getUserTypeForOperation(worklistRecord.Operation);
    }
    else if(worklistRecord.Operation.endsWith("prepareToCreateReservation") || // network design activities
            worklistRecord.Operation.endsWith("performReservationOnGranite")) {

        // the WL record will be filled with PRN info
        worklistRecord.objectCreationDate = order.prnDocument.creationDate;
        worklistRecord.customerName = order.prnDocument.customerName;
        worklistRecord.objectPlannedRFSDate = order.prnDocument.plannedRFSDate;
        worklistRecord.objectType = "PRN";
        worklistRecord.objectName = order.prnDocument.prnName;
        worklistRecord.objectId = order.prnDocument.id;
        worklistRecord.objectStatus = order.prnDocument.prnStatus;
        worklistRecord.requester = order.prnrDocument.createdBy;

        userType = workflow.getUserTypeForOperation(worklistRecord.Operation);
    }
    else if(worklistRecord.Operation.endsWith("prepareToCompleteNI") || // facility network team activities
            worklistRecord.Operation.endsWith("performCrossConnection") || // xc team activities
            worklistRecord.Operation.endsWith("performXCToDisconnect") ||
            worklistRecord.Operation.endsWith("loadIntermediateSitesTasks") ||
            worklistRecord.Operation.endsWith("prepareToSubmitTFR") || // order initiator activities
            worklistRecord.Operation.endsWith("prepareToReviseTFR") ||
            worklistRecord.Operation.endsWith("reviewCWOReport") ||
            worklistRecord.Operation.endsWith("createAndSubmitDisconnectTFR") ||
            worklistRecord.Operation.endsWith("analyzeRejection") || // integration team activities
            worklistRecord.Operation.endsWith("fixIssue") ||
            worklistRecord.Operation.endsWith("prepareToCompleteActivation") ||
            worklistRecord.Operation.endsWith("releaseReservationInGranite")) {

        // the WL record will be filled with TFR info
        worklistRecord.objectCreationDate = order.tfrDocument.creationDate;
        worklistRecord.customerName = order.tfrDocument.customerName;
        worklistRecord.objectPlannedRFSDate = order.tfrDocument.plannedRFSDate;
        worklistRecord.objectType = "TFR";
        worklistRecord.objectName = order.tfrDocument.tfrNumber;
        worklistRecord.objectId = order.tfrDocument.id;
        worklistRecord.objectStatus = order.tfrDocument.tfrStatus;
        worklistRecord.requester = (order.prnrDocument != null ? order.prnrDocument.createdBy : order.tfrDocument.createdBy);

        userType = workflow.getUserTypeForOperation(worklistRecord.Operation);
    }
    else if(worklistRecord.Operation.endsWith("proposeNextQuestion")) {
        // rejection process
        var tfrFinder = new Finder("tfs.findTFR");
        tfrFinder.searchDocument.tfrId = order.rejectionProcData.tfrId;
        var resultTFRList = tfrFinder.search();

        if(resultTFRList != null && resultTFRList.length > 0) {
            var tfrFound = resultTFRList[0];

            worklistRecord.customerName = tfrFound.customerName;
            worklistRecord.objectStatus = tfrFound.tfrStatus;
        }
        worklistRecord.objectCreationDate = order.rejectionProcData.creationDate;
        worklistRecord.objectPlannedRFSDate = null;
        worklistRecord.objectType = "REJECTION ACTIVITY";
        worklistRecord.objectName = null;
        worklistRecord.objectId = order.rejectionProcData.id;
        worklistRecord.userId = order.rejectionProcData.currentUserId;

        userType = workflow.getUserTypeForOperation(worklistRecord.Operation);
    }
    else if(worklistRecord.Operation.endsWith("assignBIToProperGroup") || // Manage BI process operations
            worklistRecord.Operation.endsWith("issueMoP") |
            worklistRecord.Operation.endsWith("prepareToCloseBITicket")) {

        worklistRecord.objectCreationDate = order.biDocument.creationDate;
        worklistRecord.customerName = order.biDocument.customerName;
        worklistRecord.objectPlannedRFSDate = null;
        worklistRecord.objectType = "BI";
        worklistRecord.objectName = order.biDocument.id;
        worklistRecord.objectId = order.biDocument.id;
        worklistRecord.objectStatus = order.biDocument.biStatus;
        worklistRecord.requester = null;

        // Setting appropriate users for current operation type
        userType = workflow.getUserTypeForOperation(worklistRecord.Operation);
    }
    // Cancell Install activities
    else if(worklistRecord.Operation.endsWith("cancellationReservationInGranite") ||
            worklistRecord.Operation.endsWith("cancelExistingPRNandPRNR") ||
            worklistRecord.Operation.endsWith("approveCancellation") ||
            worklistRecord.Operation.endsWith("acknowledgeRejection") ||
            worklistRecord.Operation.endsWith("cancelXC") ||
            worklistRecord.Operation.endsWith("prepareToCompleteNICancellation") ||
            worklistRecord.Operation.endsWith("validateCancellation")) {

        // Cancell install process can be requested from PRN, PRNR or TFR
        // if TFR exist - cancell starts from it
        // if TFR does not exist - from PRN or PRNR
        // if PRN exist - cancell starts from it
        // if PRN does not exists - cancell starts from PRNR

        if( order.tfrDocument && !worklistRecord.Operation.endsWith("cancellationReservationInGranite") ){ // if Cancel requested from TFR and operation is no Cancel PRN & PRNR
            worklistRecord.objectCreationDate = order.tfrDocument.creationDate;
            worklistRecord.customerName = order.tfrDocument.customerName;
            worklistRecord.objectPlannedRFSDate = order.tfrDocument.plannedRFSDate;
            worklistRecord.objectType = "TFR";
            worklistRecord.objectName = order.tfrDocument.tfrNumber;
            worklistRecord.objectId = order.tfrDocument.id;
            worklistRecord.objectStatus = order.tfrDocument.tfrStatus;
            worklistRecord.requester = order.tfrDocument.createdBy;
        }
        else if( order.prnDocument ){ // if Cancell requested from PRN
            worklistRecord.objectCreationDate = order.prnDocument.creationDate;
            worklistRecord.customerName = order.prnDocument.customerName;
            worklistRecord.objectPlannedRFSDate = order.prnDocument.plannedRFSDate;
            worklistRecord.objectType = "PRN";
            worklistRecord.objectName = order.prnDocument.prnName;
            worklistRecord.objectId = order.prnDocument.id;
            worklistRecord.objectStatus = order.prnDocument.prnStatus;
            worklistRecord.requester = order.prnDocument.createdBy;
        }
        else{ // if Cancell requested for PRNR
            worklistRecord.objectCreationDate = order.prnrDocument.creationDate;
            worklistRecord.customerName = order.prnrDocument.customerName;
            worklistRecord.objectPlannedRFSDate = order.prnrDocument.plannedRFSDate;
            worklistRecord.objectType = "PRNR";
            worklistRecord.objectName = order.prnrDocument.prnrName;
            worklistRecord.objectId = order.prnrDocument.id;
            worklistRecord.objectStatus = order.prnrDocument.prnrStatus;
            worklistRecord.requester = order.prnrDocument.createdBy;
        }

        userType = workflow.getUserTypeForOperation(worklistRecord.Operation);
    }
    // Cancel Disconect Order
    else if(worklistRecord.Operation.endsWith("validateDisconnectCancellation") ||
            worklistRecord.Operation.endsWith("cancelXCForCancelDisconnect") ||
            worklistRecord.Operation.endsWith("approveDisconnectCancellation") ||
            worklistRecord.Operation.endsWith("prepareToCompleteNIDiscCancellation") ||
            worklistRecord.Operation.endsWith("acknowledgeRejectCancellationOfDisconnect")){

        worklistRecord.objectCreationDate = order.tfrDocument.creationDate;
        worklistRecord.customerName = order.tfrDocument.customerName;
        worklistRecord.objectPlannedRFSDate = order.tfrDocument.plannedRFSDate;
        worklistRecord.objectType = "TFR";
        worklistRecord.objectName = order.tfrDocument.tfrNumber;
        worklistRecord.objectId = order.tfrDocument.id;
        worklistRecord.objectStatus = order.tfrDocument.tfrStatus;
        worklistRecord.requester = order.tfrDocument.createdBy;

        userType = workflow.getUserTypeForOperation(worklistRecord.Operation);
    }
    // site & quality x Task Mgmt
    else if(worklistRecord.Operation.endsWith("acceptingTask_Quality") ||
            worklistRecord.Operation.endsWith("acceptingTask_Site")) {

        // to solve issue found by Dharvesh in PT
        var taskDoc = order.getItemById(worklistRecord.orderItemId);
        if(taskDoc == null) {
            taskDoc = Order.readItem(null, worklistRecord.orderItemId, false);
        }

        worklistRecord.objectCreationDate = taskDoc.creationDate;
        worklistRecord.customerName = (order.tfrDocument != null ? order.tfrDocument.customerName : null);
        worklistRecord.objectPlannedRFSDate = (order.tfrDocument != null ? order.tfrDocument.plannedRFSDate : null);
        worklistRecord.objectType = "TFR Task";
        worklistRecord.objectName = taskDoc.taskName;
        worklistRecord.objectId = taskDoc.id;
        worklistRecord.objectStatus = taskDoc.status;
        worklistRecord.requester = (order.prnrDocument != null ? order.prnrDocument.createdBy : null);

        userType = workflow.getUserTypeForOperation(worklistRecord.Operation);
    }
    else if(worklistRecord.Operation.endsWith("validateRequest") ||
            worklistRecord.Operation.endsWith("prepareToCompleteBIMgmt")) {

        if(order.tfrDocument != null) {
            worklistRecord.objectCreationDate = order.tfrDocument.creationDate;
            worklistRecord.customerName = order.tfrDocument.customerName;
            worklistRecord.objectPlannedRFSDate = order.tfrDocument.plannedRFSDate;
            worklistRecord.objectType = "TFR";
            worklistRecord.objectName = order.tfrDocument.tfrNumber;
            worklistRecord.objectId = order.tfrDocument.id;
            worklistRecord.objectStatus = order.tfrDocument.tfrStatus;
            worklistRecord.requester = order.tfrDocument.createdBy;
        }
        else {
            worklistRecord.objectCreationDate = order.prnDocument.creationDate;
            worklistRecord.customerName = order.prnDocument.customerName;
            worklistRecord.objectPlannedRFSDate = order.prnDocument.plannedRFSDate;
            worklistRecord.objectType = "PRN";
            worklistRecord.objectName = order.prnDocument.prnName;
            worklistRecord.objectId = order.prnDocument.id;
            worklistRecord.objectStatus = order.prnDocument.prnStatus;
            worklistRecord.requester = order.prnDocument.createdBy;
        }

        userType = workflow.getUserTypeForOperation(worklistRecord.Operation);
    }

    if(worklistRecord.userId == null) {
        worklistRecord.AssignedDate = new Date();
        worklistRecord.userId = workflow.getUserForOrder(worklistRecord.OrderId, worklistRecord.orderItemId, userType);
    }

    if(worklistRecord.userId != null) {
        // assign userId to the object
        if(worklistRecord.objectType == "PRNR") {
            order.prnrDocument.currentUserId = worklistRecord.userId;
            order.prnrDocument.currentUserDepartment = up_priv.getDepartmentByUserId(worklistRecord.userId);
        }
        else if(worklistRecord.objectType == "PRN") {
            order.prnDocument.currentUserId = worklistRecord.userId;
            order.prnDocument.currentUserDepartment = up_priv.getDepartmentByUserId(worklistRecord.userId);
        }
        else if(worklistRecord.objectType == "TFR") {
            order.tfrDocument.currentUserId = worklistRecord.userId;
            order.tfrDocument.currentUserDepartment = up_priv.getDepartmentByUserId(worklistRecord.userId);
        }
        else if(worklistRecord.objectType == "BI") {
            var userId = worklistRecord.userId;
            order.biDocument.currentUserId = userId;
            order.biDocument.lastFwdDept = up_priv.getDepartmentByUserId(userId);
            order.biDocument.lastFwdEng = userId;
            order.biDocument.lastFwdDate = new Date();
        }
        order.save();

        // email notification
        var finderAdditionalInfo = new Finder('workflow.processAdditionalInfoFinder');
        finderAdditionalInfo.searchDocument.cwDocID = worklistRecord.SenderId;

        var resultListAdditionalInfo = finderAdditionalInfo.search();
        if(resultListAdditionalInfo != null && resultListAdditionalInfo.length > 0) {
            if(resultListAdditionalInfo[0].emailNotification == true) {
                common.sendEmailToUserForWLRecord(worklistRecord.userId, worklistRecord.Operation, worklistRecord.objectType, worklistRecord.objectName);
            }
        }
    }

    if(worklistRecord.objectType != "REJECTION ACTIVITY"){
        workflow.createNewTrackingRecord(worklistRecord.id, worklistRecord.OrderId, worklistRecord.objectId, worklistRecord.objectType, worklistRecord.Operation, new Date(), worklistRecord.userId, worklistRecord.SenderId);
    }
  ]]></script>
</event__handler>