<?xml version="1.0" encoding="UTF-8" ?>
<script name="ds_ws.mapping_orderSTC_HOME">
  <highlight>36</highlight>
  <label>Mapping: Order STC (DS vs. Order) [HOME]</label>
  <metaVersion>3</metaVersion>
  <parameterList>
    <parameter name="ds" type="rifp">
      <mandatory>true</mandatory>
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    // Returns the order created from the incoming DataStructure
    var receivedParentOrderNumber = (ds != null ? ds.message.OrderNumber : "");

    var debug = "[MAPPING: ORDER STC (DS -> ORDER) HOME][" + receivedParentOrderNumber + "]";
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " START...");
          var result = null;

          if (ds != null) {

                // Create an array that will contain all the broken up order (children) and the incoming one (father)
                var orders = new Array();
                var plateIds = new Array();
                result = new Array();

    // ***************************************************************************************************************************************
    //  UPDATE REQUEST !!!
    // ***************************************************************************************************************************************
                // [A] In case of REVISE, CANCEL, ACTIVATE request from the CRM
                if (ds.message.OrderStatus.toUpperCase() == "REVISE" ||
                      ds.message.OrderStatus.toUpperCase() == "CANCEL" ||
                      ds.message.OrderStatus.toUpperCase() == "ACTIVATE") {
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " REVISE REQUEST, SEEKING THE ORDER IN THE DB [ORDER # = " + ds.message.OrderNumber + "]...");

                      var previousOrder = null;

                      // - [0] seeking the Order instance in the DB
                      var orderMessage = ds_ws.searchOrderMessageHomeByOrderNumber(ds.message.OrderNumber);
                      if (orderMessage != null) {
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER MESSAGE FOUND IN THE DB...");
                            previousOrder = Order.getOrderById(orderMessage.orderId);
                      }
                      else{
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER MESSAGE NOT FOUND IN THE DB...");
                      }
                      if (previousOrder != null) {
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER FOUND IN THE DB...");

                            // - [0.A] Update the previous order and create a new one!!!
                            previousOrder.orderMessage.orderNumber = previousOrder.orderMessage.orderNumber + "_OLD";
                            previousOrder.save();
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS ORDER UPDATE WITH NEW ORDER # '" + previousOrder.orderMessage.orderNumber + "'...");

                            // - [0.B] Update the children of the previous order (modify the Parent Order #)
                            var children = ds_ws.searchOrderMessageHomeByParentOrderNumber(ds.message.OrderNumber);
                            if (children != null){
                                  if(children.length > 1) {
                                        // throws Exception with message "Found too many child order [#number] for parentOrderNumber '<ParentOrderNumber>'"
                                        Global.throwException("AE0021", [children.length, ds.message.OrderNumber]);
                                  }

                                  var previousChildOrder = Order.getOrderById(children[0].orderId);
                                  // copy the previous child order
                                  var childOrder = previousChildOrder.copyOrder(false);

                                  // renames the previous child order
                                  previousChildOrder.orderMessage.orderNumber = previousChildOrder.orderMessage.orderNumber + "_OLD";
                                  previousChildOrder.orderMessage.parentOrderNumber = previousOrder.orderMessage.orderNumber;
                                  previousChildOrder.save();

                                  childOrder.orderMessage.orderNumber = children[0].orderNumber;
                                  childOrder.orderMessage.parentOrderNumber = children[0].parentOrderNumber;
                                  childOrder.orderMessage.toBeSending = false;
                                  childOrder.orderMessage.completionDate = null;

                                  // remove orderACK document from the order)
                                  if(childOrder.hasDocuments("ds_ws:OrderAcknowledgementWithFailureDoc")) {
                                        childOrder.orderACK.deleteItem();
                                  }

                                  if(childOrder.serviceParametersList != null) {
                                        for (var z = 0; z < childOrder.serviceParametersList.count; z++) {
                                              // flag "toBeProcessed" resetted
                                              childOrder.serviceParametersList[z].serviceParameters.toBeProcessed = false;
                                        }
                                  }
                                  childOrder.save();

                                  orders[0] = childOrder;
                            }
                            else {
                                  // throws Exception with message "Unable to find child orders for parentOrderNumber '<ParentOrderNumber>'"
                                  Global.throwException("AE0022", [ds.message.OrderNumber]);
                            }


                            var father = previousOrder.copyOrder(false);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER CREATED AS A CLONE OF THE PREVIOUS ONE...");

                            // - [1] mapping of the 'Order Message' component
                            ds.message.mapStructureToDoc(father.orderMessage, "ds_ws:default_orderMessage_HOME");
                            if(ds.message.OrderStatus.toUpperCase() == "CANCEL") {
                                father.orderMessage.alreadyCancelled = true;
                            }

                            // to understand if the update refers to all the services of the order
                            var allServicesAreInvolved = false;
                            // Order Status management for Partial Cancellation
                            if(ds.message.ServiceParameters != null) {
                                  var numOfServicesReceived = ds.message.ServiceParameters.length;
                                  var numOfServicesInOrder  = 0;
                                  if(father.serviceParametersList != null) {
                                        for (var z = 0; z < father.serviceParametersList.count; z++) {
                                              if(ds_ws.isServiceLive(father.serviceParametersList[z].serviceParameters)) {
                                                    // it means the service is still under management so it's counted
                                                    numOfServicesInOrder++;
                                              }
                                              // flag "toBeProcessed" resetted
                                              father.serviceParametersList[z].serviceParameters.toBeProcessed = false;
                                        }
                                  }
                                  if(numOfServicesReceived == numOfServicesInOrder) {
                                        // only if the number of services in the flow is equals to the number of "live" services the orderStatus is updated
                                        father.orderMessage.orderStatus = ds.message.OrderStatus;
                                        allServicesAreInvolved = true;
                                  }
                            }
                            else {
                                  // no services found, so orderStatus is updated
                                  father.orderMessage.orderStatus = ds.message.OrderStatus;
                                  allServicesAreInvolved = true;
                            }

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " allServicesAreInvolved = " + allServicesAreInvolved);

                            father.orderMessage.circuitStatus = "";
                            father.orderMessage.internalOrderStatus = "";
                            father.orderMessage.toBeSending = true;
                            father.orderMessage.completionDate = null;

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'ORDER MESSAGE' MAPPED...");

                            // - [2] mapping of the 'Service Parameters' component
                            if (ds.message.ServiceParameters != null) {

                                  for (var j = 0; j < ds.message.ServiceParameters.length; j++) {

                                        var itemSP = null;
                                        var elementSP = -1;
                                        var serviceParametersList = father.serviceParametersList;
                                        for (var z = 0; (serviceParametersList != null) && (z < serviceParametersList.count); z++) {
                                              var serviceParameters = serviceParametersList[z].serviceParameters;
                                              if (serviceParameters.serviceNumber == ds.message.ServiceParameters[j].ServiceNumber &&
                                                    serviceParameters.serviceType == ds.message.ServiceParameters[j].ServiceType) {
                                                    elementSP = z;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " SERVICE[" + serviceParameters.serviceNumber + "," + serviceParameters.serviceType + "] FOUND AT POSITION [" + (z + 1) + "]...");
                                                    break;
                                              }
                                        }
                                        if (elementSP < 0) {
                                              elementSP = serviceParametersList != null ? (serviceParametersList.count) : 0;
                                              itemSP = father.createOrderItemByPath("serviceParametersList." + (serviceParametersList != null ? (serviceParametersList.count + 1) : 1) + ".serviceParameters");
                                              ds.message.ServiceParameters[j].mapStructureToDoc(itemSP, "ds_ws:default_serviceParameters_HOME");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " SERVICE RECEIVED IN POSITION [" + j + "] ADDED...");
                                        }
                                        else{
                                              itemSP = father.serviceParametersList[elementSP].serviceParameters;
                                              ds.message.ServiceParameters[j].mapStructureToDoc(father.serviceParametersList[elementSP].serviceParameters, "ds_ws:default_serviceParameters_HOME");
                                              father.serviceParametersList[elementSP].serviceParameters.serviceStatus = "";
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " SERVICE RECEIVED IN POSITION [" + j + "] UPDATED...");
                                        }

                                        // updating the status of the service with the received OrderStatus
                                        itemSP.serviceStatus = ds.message.OrderStatus;
                                        // enabling the processing of the service
                                        itemSP.toBeProcessed = true;
                                        // setting the "toBeCancelled" flag on the service according to the received OrderStatus
                                        itemSP.toBeCancelled = (ds.message.OrderStatus.toUpperCase() == "CANCEL");

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " SERVICE RECEIVED IN POSITION [" + j + "] MAPPED...");

                                        // - [3] mapping of the 'Name Value' component
                                        if (ds.message.ServiceParameters[j].NameValue != null) {
                                              for (var k = 0; k < ds.message.ServiceParameters[j].NameValue.length; k++) {

                                                    var itemNV = null;
                                                    var elementNV = -1;
                                                    var nameValueList = father.serviceParametersList[elementSP].nameValueList;
                                                    for (var x = 0; (nameValueList != null) && (x < nameValueList.count); x++) {
                                                          var nameValue = nameValueList[x].nameValue;
                                                          if (nameValue.name == ds.message.ServiceParameters[j].NameValue[k].Name) {
                                                                elementNV = x;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + nameValue.name + "] FOUND AT POSITION [" + (x + 1) + "]...");
                                                                break;
                                                          }
                                                    }
                                                    if (elementNV < 0) {
                                                          elementNV = (nameValueList != null ? (nameValueList.count) : 0);
                                                          itemNV = father.createOrderItemByPath("serviceParametersList." + (elementSP + 1) + ".nameValueList." + (elementNV + 1) + ".nameValue");
                                                          ds.message.ServiceParameters[j].NameValue[k].mapStructureToDoc(itemNV);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + ds.message.ServiceParameters[j].NameValue[k].Name + "] ADDED...");
                                                    }
                                                    else{
                                                          ds.message.ServiceParameters[j].NameValue[k].mapStructureToDoc(father.serviceParametersList[elementSP].nameValueList[elementNV].nameValue);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + ds.message.ServiceParameters[j].NameValue[k].Name + "] UPDATED...");
                                                    }
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] COMPONENT MAPPED...");

                                                    // MR 2016/08/08 # implementing fix for STCSUP-35
                                                    var replacedValue = refTables.getReplacementValueForNVPairName(ds.message.ServiceParameters[j].NameValue[k].Name, ds.message.ServiceParameters[j].NameValue[k].Value);
                                                    if(replacedValue != null) {
                                                        father.serviceParametersList[elementSP].nameValueList[elementNV].nameValue.value = replacedValue;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] VALUE REPLACED FROM " + ds.message.ServiceParameters[j].NameValue[k].Value + " TO " + replacedValue);
                                                    }

                                              }
                                        }
                                  }
                            }
                            // - Store the father order in the final array
                            result[0] = father;

                            // - [A.2] Break up the incoming order according to:
                            //            a. if Service Type in [FTTH_VOIP, FTTH_HSI, FTTH_IPTV] using the Plate Id.
                            //            b. if Service Type in [POTS, DSL, PAYPHONE, FIXEDGSM, AFAQWIRELESS] using the Plate Id. and Service #
                            if (ds.message.ServiceParameters != null) {
                                  for (var j = 0; j < ds.message.ServiceParameters.length; j++) {
                                        var sp = ds.message.ServiceParameters[j];
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ANALYZING THE SERVICE PARAMETER[" + j + "]...");

    // --- FTTH_VOIP, FTTH_HSI, FTTH_IPTV --------------------------------------------------------------------------------------------------------------------------------------
                                        // In case of: FTTH_VOIP, FTTH_HSI, FTTH_IPTV
                                        if (sp.ServiceType.toUpperCase() == "FTTH_VOIP" ||
                                              sp.ServiceType.toUpperCase() == "FTTH_IPTV" ||
                                              sp.ServiceType.toUpperCase() == "FTTH_HSI") {

                                              if (sp.PlateID == null) {
                                                    // - Inconsistent request: "{0}" field is missing for Order STC with Order # "{1}"!
                                                    Global.throwException("AE0006", ["Plate Id.", ds.message.OrderNumber]);
                                              }
                                              var childOrder = orders[0];

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " CHILD WITH PLATE ID: '" + sp.PlateID.toUpperCase() + "' FOUND, ORDER # [" + childOrder.orderMessage.orderNumber + "]...");
                                              var orderNumber = childOrder.orderMessage.orderNumber;
                                              // - [1] mapping of the 'Order Message' component
                                              ds.message.mapStructureToDoc(childOrder.orderMessage, "ds_ws:default_orderMessage_HOME");
                                              childOrder.orderMessage.orderNumber = orderNumber;
                                              childOrder.orderMessage.circuitStatus = "";
                                              childOrder.orderMessage.internalOrderStatus = "";
                                              if(ds.message.OrderStatus.toUpperCase() == "CANCEL") {
                                                  childOrder.orderMessage.alreadyCancelled = true;
                                              }

                                              // Modified again on 16.02.2011:
                                              // - according to mail from/to M. Winters 11.02.2011
                                              childOrder.orderMessage.cctType = ds_ws.searchGraniteCctTypeForReceivedServiceType_CctType(sp.ServiceType.toUpperCase(), (ds.message.CctType != null ? ds.message.CctType.toUpperCase() : null));

                                              if(allServicesAreInvolved) {
                                                    childOrder.orderMessage.orderStatus = ds.message.OrderStatus;
                                              }
                                              childOrder.orderMessage.toBeSending = true;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'ORDER MESSAGE' COMPONENT MAPPED...");

                                              var itemSP = null;
                                              var elementSP = -1;
                                              var serviceParametersList = childOrder.serviceParametersList;
                                              for (var zz = 0; (serviceParametersList != null) && (zz < serviceParametersList.count); zz++) {
                                                    var serviceParameters = serviceParametersList[zz].serviceParameters;
                                                    if (serviceParameters.serviceNumber == sp.ServiceNumber && serviceParameters.serviceType == sp.ServiceType) {
                                                          elementSP = zz;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[#:" + serviceParameters.serviceNumber + ", TYPE:" + serviceParameters.serviceType + "] COMPONENT FOUND AT POSITION [" + (zz + 1) + "]...");
                                                          break;
                                                    }
                                              }
                                              if (elementSP < 0) {
                                                    elementSP = serviceParametersList != null ? (serviceParametersList.count) : 0;
                                                    itemSP = childOrder.createOrderItemByPath("serviceParametersList." + (serviceParametersList != null ? (serviceParametersList.count + 1) : 1) + ".serviceParameters");
                                                    sp.mapStructureToDoc(itemSP, "ds_ws:default_serviceParameters_HOME");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[" + j + "] COMPONENT ADDED...");
                                              }
                                              else{
                                                    itemSP = childOrder.serviceParametersList[elementSP].serviceParameters;
                                                    sp.mapStructureToDoc(childOrder.serviceParametersList[elementSP].serviceParameters, "ds_ws:default_serviceParameters_HOME");
                                                    childOrder.serviceParametersList[elementSP].serviceParameters.serviceStatus = "";
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[" + j + "] COMPONENT UPDATED...");
                                              }

                                              // updating the status of the service with the received OrderStatus
                                              itemSP.serviceStatus = ds.message.OrderStatus;
                                              // enabling the processing of the service
                                              itemSP.toBeProcessed = true;
                                              // setting the "toBeCancelled" flag on the service according to the received OrderStatus
                                              itemSP.toBeCancelled = (ds.message.OrderStatus.toUpperCase() == "CANCEL");

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[" + j + "] COMPONENT MAPPED...");

                                              // - [3] mapping of the 'Name Value' component
                                              if (sp.NameValue != null) {
                                                    for (var kk = 0; kk < sp.NameValue.length; kk++) {
                                                          var itemNV = null;
                                                          var elementNV = -1;
                                                          var nameValueList = childOrder.serviceParametersList[elementSP].nameValueList;
                                                          for (var xx = 0; (nameValueList != null) && (xx < nameValueList.count); xx++) {
                                                                var nameValue = nameValueList[xx].nameValue;
                                                                if (nameValue.name == sp.NameValue[kk].Name) {
                                                                      elementNV = xx;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + nameValue.name + "] COMPONENT FOUND AT POSITION [" + (xx + 1) + "]...");
                                                                      break;
                                                                }
                                                          }
                                                          if (elementNV < 0) {
                                                                elementNV = (nameValueList != null ? (nameValueList.count) : 0);
                                                                itemNV = childOrder.createOrderItemByPath("serviceParametersList." + (elementSP + 1) + ".nameValueList." + (elementNV + 1) + ".nameValue");
                                                                sp.NameValue[kk].mapStructureToDoc(itemNV);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + sp.NameValue[kk].Name + "] COMPONENT ADDED...");
                                                          }
                                                          else{
                                                                sp.NameValue[kk].mapStructureToDoc(childOrder.serviceParametersList[elementSP].nameValueList[elementNV].nameValue);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + sp.NameValue[kk].Name + "] COMPONENT UPDATED...");
                                                          }
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + kk + "] COMPONENT MAPPED...");


                                                           // MR 2016/08/08 # implementing fix for STCSUP-35
                                                           var replacedValue = refTables.getReplacementValueForNVPairName(sp.NameValue[kk].Name, sp.NameValue[kk].Value);
                                                           if(replacedValue != null) {
                                                                childOrder.serviceParametersList[elementSP].nameValueList[elementNV].nameValue.value = replacedValue;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + kk + "] VALUE REPLACED FROM " + sp.NameValue[kk].Value + " TO " + replacedValue);
                                                           }


                                                    }
                                              }
                                              orders[0] = childOrder;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PUT ORDER [ORDER #: '" + childOrder.orderMessage.orderNumber + "'] INTO THE ORDERS CONTAINER WITH KEY '" + sp.PlateID + "'...");
                                        }
                                        else {
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " THE SERVICE TYPE IS: '" + sp.ServiceType.toUpperCase() + "'...");

                                              if (sp.PlateID == null) {
                                                    // - Inconsistent request: "{0}" field is missing for Order STC with Order # "{1}"!
                                                    Global.throwException("AE0006", ["Plate Id.", ds.message.OrderNumber]);
                                              }
                                              if (sp.ServiceNumber == null) {
                                                    // - Inconsistent request: "{0}" field is missing for Order STC with Order # "{1}"!
                                                    Global.throwException("AE0006", ["Service #", ds.message.OrderNumber]);
                                              }

                                              // - search an order with the same Plate Id. - Service # already created
                                              var childOrder = orders[0]; // orders[sp.ServiceNumber + sp.PlateID];

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " CHILD WITH PLATE ID: '" + sp.PlateID.toUpperCase() + "' AND SERVICE #: '" + sp.ServiceNumber.toUpperCase() + "' FOUND, ORDER # [" + childOrder.orderMessage.orderNumber + "]...");
                                              var orderNumber = childOrder.orderMessage.orderNumber;
                                              // - [1] mapping of the 'Order Message' component
                                              ds.message.mapStructureToDoc(childOrder.orderMessage, "ds_ws:default_orderMessage_HOME");
                                              childOrder.orderMessage.orderNumber = orderNumber;
                                              childOrder.orderMessage.circuitStatus = "";
                                              childOrder.orderMessage.internalOrderStatus = "";
                                              if(ds.message.OrderStatus.toUpperCase() == "CANCEL") {
                                                  childOrder.orderMessage.alreadyCancelled = true;
                                              }

                                              // Modified again on 16.02.2011:
                                              // - according to mail from/to M. Winters 11.02.2011
                                              childOrder.orderMessage.cctType = ds_ws.searchGraniteCctTypeForReceivedServiceType_CctType(sp.ServiceType.toUpperCase(), (ds.message.CctType != null ? ds.message.CctType.toUpperCase() : null));
                                              if(allServicesAreInvolved) {
                                                    childOrder.orderMessage.orderStatus = ds.message.OrderStatus;
                                              }
                                              childOrder.orderMessage.toBeSending = true;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'ORDER MESSAGE' COMPONENT MAPPED...");

                                              var itemSP = null;
                                              var elementSP = -1;
                                              var serviceParametersList = childOrder.serviceParametersList;
                                              for (var zz = 0; (serviceParametersList != null) && (zz < serviceParametersList.count); zz++) {
                                                    var serviceParameters = serviceParametersList[zz].serviceParameters;
                                                    if (serviceParameters.serviceType == sp.ServiceType) {
                                                          elementSP = zz;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[#:" + serviceParameters.serviceNumber + ", TYPE:" + serviceParameters.serviceType + "] COMPONENT FOUND AT POSITION [" + (zz + 1) + "]...");
                                                          break;
                                                    }
                                              }
                                              if (elementSP < 0) {
                                                    elementSP = serviceParametersList != null ? (serviceParametersList.count) : 0;
                                                    itemSP = childOrder.createOrderItemByPath("serviceParametersList." + (serviceParametersList != null ? (serviceParametersList.count + 1) : 1) + ".serviceParameters");
                                                    sp.mapStructureToDoc(itemSP, "ds_ws:default_serviceParameters_HOME");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[" + j + "] COMPONENT ADDED...");
                                              }
                                              else{
                                                    itemSP = childOrder.serviceParametersList[elementSP].serviceParameters;
                                                    sp.mapStructureToDoc(childOrder.serviceParametersList[elementSP].serviceParameters, "ds_ws:default_serviceParameters_HOME");
                                                    childOrder.serviceParametersList[elementSP].serviceParameters.serviceStatus = "";
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[" + j + "] COMPONENT UPDATED...");
                                              }
                                              // updating the status of the service with the received OrderStatus
                                              itemSP.serviceStatus = ds.message.OrderStatus;
                                              // enabling the processing of the service
                                              itemSP.toBeProcessed = true;
                                              // setting the "toBeCancelled" flag on the service according to the received OrderStatus
                                              itemSP.toBeCancelled = (ds.message.OrderStatus.toUpperCase() == "CANCEL");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[" + j + "] COMPONENT MAPPED...");

                                              // - [3] mapping of the 'Name Value' component
                                              if (sp.NameValue != null) {
                                                    for (var kk = 0; kk < sp.NameValue.length; kk++) {
                                                          var itemNV = null;
                                                          var elementNV = -1;
                                                          var nameValueList = childOrder.serviceParametersList[elementSP].nameValueList;
                                                          for (var xx = 0; (nameValueList != null) && (xx < nameValueList.count); xx++) {
                                                                var nameValue = nameValueList[xx].nameValue;
                                                                if (nameValue.name == sp.NameValue[kk].Name) {
                                                                      elementNV = xx;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + nameValue.name + "] COMPONENT FOUND AT POSITION [" + (xx + 1) + "]...");
                                                                      break;
                                                                }
                                                          }
                                                          if (elementNV < 0) {
                                                                elementNV = (nameValueList != null ? (nameValueList.count) : 0);
                                                                itemNV = childOrder.createOrderItemByPath("serviceParametersList." + (elementSP + 1) + ".nameValueList." + (elementNV + 1) + ".nameValue");
                                                                sp.NameValue[kk].mapStructureToDoc(itemNV);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + sp.NameValue[kk].Name + "] COMPONENT ADDED...");
                                                          }
                                                          else{
                                                                sp.NameValue[kk].mapStructureToDoc(childOrder.serviceParametersList[elementSP].nameValueList[elementNV].nameValue);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + sp.NameValue[kk].Name + "] COMPONENT UPDATED...");
                                                          }
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + kk + "] COMPONENT MAPPED...");


                                                           // MR 2016/08/08 # implementing fix for STCSUP-35
                                                           var replacedValue = refTables.getReplacementValueForNVPairName(sp.NameValue[kk].Name, sp.NameValue[kk].Value);
                                                           if(replacedValue != null) {
                                                                childOrder.serviceParametersList[elementSP].nameValueList[elementNV].nameValue.value = replacedValue;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + kk + "] VALUE REPLACED FROM " + sp.NameValue[kk].Value + " TO " + replacedValue);
                                                           }

                                                    }
                                              }
                                              orders[0] = childOrder;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PUT ORDER [ORDER #: '" + childOrder.orderMessage.orderNumber + "'] INTO THE ORDERS CONTAINER WITH KEY '" + sp.ServiceNumber + sp.PlateID + "'...");
                                        }
                                  }
                                  // Generate the result gathering all the children orders created!
                                  for (var e = 0; e < orders.length; e++) {
                                        result[result.length] = orders[e];
                                  }
                            }
                      }
                }

    // ***************************************************************************************************************************************
    //  SUBMIT REQUEST !!!
    // ***************************************************************************************************************************************
                // [B] In case of NEW, HOLD request from the CRM
                else if (ds.message.OrderStatus.toUpperCase() == "NEW" ||
                             ds.message.OrderStatus.toUpperCase() == "HOLD"){

    // ***************************************************************************************************************************************
    // Change for Multiple Orders
    Global.logDebug("message ot is " + ds.message.OrderType);
                      if (!refTables.isStandardOrderType(ds.message.OrderType)) {
                            var sDoc= new Document("refTables:mopsOPNConfigTable");
                            sDoc.orderType = ds.message.OrderType;
                            var resultFinderMOPS_OPN = Finder.runFinder("refTables:MOPS_OPN_CONFIG_TABLE_Finder","select",sDoc);
    Global.logDebug("size is " + resultFinderMOPS_OPN.size);
                            if (resultFinderMOPS_OPN.size == 0) {
                                  Global.throwException("AE0023", ["Order Type", ds.message.OrderType]);
                            }
                      }
    // ***************************************************************************************************************************************

                      // - [A.1] Store the incoming order (the parent one)
                      var father = new Order("ds_ws:default_orderSTC_HOME");

                      // - [1] mapping of the 'Order Message' component
                      ds.message.mapStructureToDoc(father.orderMessage, "ds_ws:default_orderMessage_HOME");
                      father.orderMessage.orderStatus = ds.message.OrderStatus;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'ORDER MESSAGE' COMPONENT MAPPED...");

                      // Modified on 17.03.2009:
                      // - logic to manage the "In Hold" orders
                      // - in case the value is 'HOLD' then is turned to 'NEW' (the inHold field is set to true)
                      if (ds.message.OrderStatus.toUpperCase() == "HOLD"){
                            father.orderMessage.orderStatus = "New";
                            father.orderMessage.inHold = true;
                      }

                      // - [2] mapping of the 'Service Parameters' component
                      if (ds.message.ServiceParameters != null) {
                            for (var j = 0; j < ds.message.ServiceParameters.length; j++) {
                                  var itemSP = father.createOrderItemByPath("serviceParametersList." + (j + 1) + ".serviceParameters");
                                  ds.message.ServiceParameters[j].mapStructureToDoc(itemSP, "ds_ws:default_serviceParameters_HOME");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[" + j + "] COMPONENT MAPPED...");

                                  // - [3] mapping of the 'Name Value' component
                                  if (ds.message.ServiceParameters[j].NameValue != null) {
                                        for (var k = 0; k < ds.message.ServiceParameters[j].NameValue.length; k++) {
                                              var itemNV = father.createOrderItemByPath("serviceParametersList." + (j + 1) + ".nameValueList." + (k + 1) + ".nameValue");
                                              ds.message.ServiceParameters[j].NameValue[k].mapStructureToDoc(itemNV);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] COMPONENT MAPPED...");

                                              // MR 2016/08/08 # implementing fix for STCSUP-35
                                              var replacedValue = refTables.getReplacementValueForNVPairName(ds.message.ServiceParameters[j].NameValue[k].Name, ds.message.ServiceParameters[j].NameValue[k].Value);
                                              if(replacedValue != null) {
                                                  itemNV.value = replacedValue;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] VALUE REPLACED FROM " + ds.message.ServiceParameters[j].NameValue[k].Value + " TO " + replacedValue);
                                              }

                                        }
                                  }
                            }
                      }

                      // - [4] Store the father order in the final array
                      result[0] = father;

                      // - [A.2] Break up the incoming order according to:
                      //            a. if Service Type in [FTTH_VOIP, FTTH_HSI, FTTH_IPTV] using the Plate Id.
                      //            b. if Service Type in [POTS, DSL, PAYPHONE, FIXEDGSM, AFAQWIRELESS] using the Plate Id. and Service #
                      if (ds.message.ServiceParameters != null) {
                            for (var j = 0; j < ds.message.ServiceParameters.length; j++) {
                                  var sp = ds.message.ServiceParameters[j];
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ANALYZING THE SERVICE PARAMETER[" + j + "]...");

    // --- FTTH_VOIP, FTTH_HSI, FTTH_IPTV --------------------------------------------------------------------------------------------------------------------------------------
                                  // In case of: FTTH_VOIP, FTTH_HSI, FTTH_IPTV
                                  if (sp.ServiceType.toUpperCase() == "FTTH_VOIP" ||
                                        sp.ServiceType.toUpperCase() == "FTTH_IPTV" ||
                                        sp.ServiceType.toUpperCase() == "FTTH_HSI") {

                                        // - search an order with the same Plate Id. already created
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " THE SERVICE TYPE IS: '" + sp.ServiceType.toUpperCase() + "'...");

                                        if (sp.PlateID == null) {
                                              // - Inconsistent request: "{0}" field is missing for Order STC with Order # "{1}"!
                                              Global.throwException("AE0006", ["Plate Id.", ds.message.OrderNumber]);
                                        }

                                        var child = orders[sp.PlateID];
                                        // - is NOT created then generate new instance
                                        if (child == null){
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " CHILD WITH PLATE ID: '" + sp.PlateID.toUpperCase() + "' NOT FOUND, CREATE A NEW INSTANCE...");
                                              child = new Order("ds_ws:default_orderSTC_HOME");

                                              // - [1] mapping of the 'Order Message' component
                                              ds.message.mapStructureToDoc(child.orderMessage, "ds_ws:default_orderMessage_HOME");
                                              child.orderMessage.orderNumber = ds_ws.common_executeFunction_UniqueOrderNumber("XNG PRODUCTION [USER:STC_TARGET2]",
                                                                                                                                                                         child.orderMessage.orderType,
                                                                                                                                                                         "CW");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " GENERATED ORDER NUMBER: '" + child.orderMessage.orderNumber + "' FOR THE NEW ORDER INSTANCE...");
                                              child.orderMessage.parentOrderNumber = father.orderMessage.orderNumber;
                                              child.orderMessage.commonPlateId = sp.PlateID;
                                              child.orderMessage.cctType = ds_ws.searchGraniteCctTypeForReceivedServiceType_CctType(sp.ServiceType.toUpperCase(), (ds.message.CctType != null ? ds.message.CctType.toUpperCase() : null));
                                              child.orderMessage.orderStatus = ds.message.OrderStatus;

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'ORDER MESSAGE' COMPONENT MAPPED...");

                                              // Modified on 17.03.2009:
                                              // - logic to manage the "In Hold" orders
                                              // - in case the value is 'HOLD' then is turned to 'NEW' (the inHold field is set to true)
                                              if (ds.message.OrderStatus.toUpperCase() == "HOLD"){
                                                    child.orderMessage.orderStatus = "New";
                                                    child.orderMessage.inHold = true;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " THE SERVICE TYPE IS: '" + sp.ServiceType.toUpperCase() + "'...");
                                              }

                                              // - [2] mapping of the 'Service Parameters' component
                                              var itemSP = child.createOrderItemByPath("serviceParametersList.1.serviceParameters");
                                              sp.mapStructureToDoc(itemSP, "ds_ws:default_serviceParameters_HOME");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[0] COMPONENT MAPPED...");

                                              // - [3] mapping of the 'Name Value' component
                                              if (sp.NameValue != null) {
                                                    for (var k = 0; k < sp.NameValue.length; k++) {
                                                          var itemNV = child.createOrderItemByPath("serviceParametersList.1.nameValueList." + (k + 1) + ".nameValue");
                                                          sp.NameValue[k].mapStructureToDoc(itemNV);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] COMPONENT MAPPED...");

                                                          // MR 2016/08/08 # implementing fix for STCSUP-35
                                                          var replacedValue = refTables.getReplacementValueForNVPairName(sp.NameValue[k].Name, sp.NameValue[k].Value);
                                                          if(replacedValue != null) {
                                                              itemNV.value = replacedValue;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] VALUE REPLACED FROM " + sp.NameValue[k].Value + " TO " + replacedValue);
                                                          }

                                                    }
                                              }

                                              // - [4] Store the 'CW Document ID' in the final array
                                              plateIds[plateIds.length] = sp.PlateID;
                                        }
                                        // - is created then add new SP branch
                                        else{
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " CHILD WITH PLATE ID: '" + sp.PlateID.toUpperCase() + "' FOUND, CREATE A NEW SP BRANCH...");

                                              // - [2] mapping of the 'Service Parameters' component
                                              var item = child.serviceParametersList.count;
                                              var itemSP = child.createOrderItemByPath("serviceParametersList." + (item + 1) + ".serviceParameters");
                                              sp.mapStructureToDoc(itemSP, "ds_ws:default_serviceParameters_HOME");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[" + item + "] COMPONENT MAPPED...");

                                              // - [3] mapping of the 'Name Value' component
                                              if (sp.NameValue != null) {
                                                    for (var k = 0; k < sp.NameValue.length; k++) {
                                                          var itemNV = child.createOrderItemByPath("serviceParametersList." + (item + 1) + ".nameValueList." + (k + 1) + ".nameValue");
                                                          sp.NameValue[k].mapStructureToDoc(itemNV);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] COMPONENT MAPPED...");

                                                          // MR 2016/08/08 # implementing fix for STCSUP-35
                                                          var replacedValue = refTables.getReplacementValueForNVPairName(sp.NameValue[k].Name, sp.NameValue[k].Value);
                                                          if(replacedValue != null) {
                                                              itemNV.value = replacedValue;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] VALUE REPLACED FROM " + sp.NameValue[k].Value + " TO " + replacedValue);
                                                          }

                                                    }
                                              }
                                        }
                                        orders[sp.PlateID] = child;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PUT ORDER [ORDER #: '" + child.orderMessage.orderNumber + "'] INTO THE ORDERS CONTAINER WITH KEY '" + sp.PlateID + "'...");
                                  }

    /*********************
          Modified on 16.02.2011:
          - according to mail from/to M. Winters 11.02.2011
          - now the else brach has to manage ALL other Service Types!!!!

    // --- POTS, DSL, PAYPHONE, FIXEDGSM, AFAQWIRELESS ----------------------------------------------------------------------------------------------------------------------------
                                  else if (sp.ServiceType.toUpperCase() == "POTS" ||
                                               sp.ServiceType.toUpperCase() == "DSL" ||
                                               sp.ServiceType.toUpperCase() == "PAYPHONE" ||
                                               sp.ServiceType.toUpperCase() == "FIXEDGSM" ||
                                               sp.ServiceType.toUpperCase() == "AFAQWIRELESS"){
    ********************/
                                  else {
                                        // - search an order with the same Plate Id. - Service # already created
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " THE SERVICE TYPE IS: '" + sp.ServiceType.toUpperCase() + "'...");

                                        if (sp.PlateID == null) {
                                              // - Inconsistent request: "{0}" field is missing for Order STC with Order # "{1}"!
                                              Global.throwException("AE0006", ["Plate Id.", ds.message.OrderNumber]);
                                        }
                                        if (sp.ServiceNumber == null) {
                                              // - Inconsistent request: "{0}" field is missing for Order STC with Order # "{1}"!
                                              Global.throwException("AE0006", ["Service #", ds.message.OrderNumber]);
                                        }

                                        var child = orders[sp.ServiceNumber + sp.PlateID];
                                        // - is NOT created then generate new instance
                                        if (child == null){
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " CHILD WITH PLATE ID: '" + sp.PlateID.toUpperCase() + "' AND SERVICE #: '" + sp.ServiceNumber.toUpperCase() + "' NOT FOUND, CREATE A NEW INSTANCE...");
                                              child = new Order("ds_ws:default_orderSTC_HOME");

                                              // - [1] mapping of the 'Order Message' component
                                              ds.message.mapStructureToDoc(child.orderMessage, "ds_ws:default_orderMessage_HOME");
                                              child.orderMessage.orderNumber = ds_ws.common_executeFunction_UniqueOrderNumber("XNG PRODUCTION [USER:STC_TARGET2]",
                                                                                                                                                                         child.orderMessage.orderType,
                                                                                                                                                                         "CW");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " GENERATED ORDER NUMBER: '" + child.orderMessage.orderNumber + "' FOR THE NEW ORDER INSTANCE...");
                                              child.orderMessage.parentOrderNumber = father.orderMessage.orderNumber;
                                              child.orderMessage.commonPlateId = sp.PlateID;
                                              child.orderMessage.commonServiceNumber = sp.ServiceNumber;
                                              child.orderMessage.cctType = ds_ws.searchGraniteCctTypeForReceivedServiceType_CctType(sp.ServiceType.toUpperCase(), (ds.message.CctType != null ? ds.message.CctType.toUpperCase() : null));
                                              child.orderMessage.orderStatus = ds.message.OrderStatus;

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'ORDER MESSAGE' COMPONENT MAPPED...");

                                              // Modified on 17.03.2009:
                                              // - logic to manage the "In Hold" orders
                                              // - in case the value is 'HOLD' then is turned to 'NEW' (the inHold field is set to true)
                                              if (ds.message.OrderStatus.toUpperCase() == "HOLD"){
                                                    child.orderMessage.orderStatus = "New";
                                                    child.orderMessage.inHold = true;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " THE SERVICE TYPE IS: '" + sp.ServiceType.toUpperCase() + "'...");
                                              }

                                              // - [2] mapping of the 'Service Parameters' component
                                              var itemSP = child.createOrderItemByPath("serviceParametersList.1.serviceParameters");
                                              sp.mapStructureToDoc(itemSP, "ds_ws:default_serviceParameters_HOME");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[0] COMPONENT MAPPED...");

                                              // - [3] mapping of the 'Name Value' component
                                              if (sp.NameValue != null) {
                                                    for (var k = 0; k < sp.NameValue.length; k++) {
                                                          var itemNV = child.createOrderItemByPath("serviceParametersList.1.nameValueList." + (k + 1) + ".nameValue");
                                                          sp.NameValue[k].mapStructureToDoc(itemNV);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] COMPONENT MAPPED...");

                                                          // MR 2016/08/08 # implementing fix for STCSUP-35
                                                          var replacedValue = refTables.getReplacementValueForNVPairName(sp.NameValue[k].Name, sp.NameValue[k].Value);
                                                          if(replacedValue != null) {
                                                              itemNV.value = replacedValue;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] VALUE REPLACED FROM " + sp.NameValue[k].Value + " TO " + replacedValue);
                                                          }
                                                    }
                                              }

                                              // - [4] Store the 'CW Document ID' in the final array
                                              plateIds[plateIds.length] = sp.ServiceNumber + sp.PlateID;
                                        }
                                        // - is created then add new SP branch
                                        else{
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " CHILD WITH PLATE ID: '" + sp.PlateID.toUpperCase() + "' AND SERVICE #: '" + sp.ServiceNumber.toUpperCase() + "' FOUND, CREATE A NEW SP BRANCH...");
                                              // - [2] mapping of the 'Service Parameters' component
                                              var item = child.serviceParametersList.count;
                                              var itemSP = child.createOrderItemByPath("serviceParametersList." + (item + 1) + ".serviceParameters");
                                              sp.mapStructureToDoc(itemSP, "ds_ws:default_serviceParameters_HOME");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[" + item + "] COMPONENT MAPPED...");

                                              // - [3] mapping of the 'Name Value' component
                                              if (sp.NameValue != null) {
                                                    for (var k = 0; k < sp.NameValue.length; k++) {
                                                          var itemNV = child.createOrderItemByPath("serviceParametersList." + (item + 1) + ".nameValueList." + (k + 1) + ".nameValue");
                                                          sp.NameValue[k].mapStructureToDoc(itemNV);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] COMPONENT MAPPED...");

                                                          // MR 2016/08/08 # implementing fix for STCSUP-35
                                                          var replacedValue = refTables.getReplacementValueForNVPairName(sp.NameValue[k].Name, sp.NameValue[k].Value);
                                                          if(replacedValue != null) {
                                                              itemNV.value = replacedValue;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] VALUE REPLACED FROM " + sp.NameValue[k].Value + " TO " + replacedValue);
                                                          }
                                                    }
                                              }
                                        }
                                        orders[sp.ServiceNumber + sp.PlateID] = child;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PUT ORDER [ORDER #: '" + child.orderMessage.orderNumber + "'] INTO THE ORDERS CONTAINER WITH KEY '" + sp.ServiceNumber + sp.PlateID + "'...");
                                  }
                            }
                            // Generate the result gathering all the children orders created!
                            for (var e = 0; e < plateIds.length; e++) {
                                  result[result.length] = orders[plateIds[e]];
                            }
                      }
                }
          }
          else {
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDERS NOT CREATED: 'DS' IS NULL...");
          }

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " AFTER FATHER BREAK-UP RETURNED '" + (result != null ? result.length : 0) + "' CHILDREN ORDERS...");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " END...");
          return result;
  ]]></script>
</script>