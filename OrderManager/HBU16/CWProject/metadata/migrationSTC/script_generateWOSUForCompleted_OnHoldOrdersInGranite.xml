<?xml version="1.0" encoding="UTF-8" ?>
<script name="migrationSTC.generateWOSUForCompleted_OnHoldOrdersInGranite">
  <label>Generate WOSU For Completed, Cancelled and OnHold Orders In Granite but not in OM</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="processId" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var debug = "[" + processId + "][generateWOSUForCompleted_OnHoldOrdersInGranite] - ";


    var notInSyncOrders = ds_ws.searchChildOrdersNotInSyncWithGI();
    if(notInSyncOrders != null && notInSyncOrders.length > 0) {

        for(var i=0; i<notInSyncOrders.length; i++) {
            var wo = granite.getWOInGranite(notInSyncOrders[i].orderNumber);
            var childOrderHeader = ds_ws.searchOrderMessageHomeByOrderNumber(notInSyncOrders[i].orderNumber);

            if(wo != null && childOrderHeader != null) {
                var woStatus = wo.STATUS;

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + notInSyncOrders[i].orderNumber + " = " + woStatus);

                var generateWO = false;

                if(woStatus == '6') {
                    // it means the wo is ON-HOLD in Granite
                    if(childOrderHeader.orderStatus != 'ON-HOLD') {
                        generateWO = true;
                    }
                }
                else if(woStatus == '7') {
                    // it means the wo is COMPLETED in Granite
                    if(childOrderHeader.orderStatus != 'COMPLETED') {
                        generateWO = true;
                    }
                }
                else if(woStatus == '8') {
                    // it means the wo is CANCELLED in Granite
                    if(childOrderHeader.orderStatus != 'CANCELLED') {
                        generateWO = true;
                    }
                }

                if(generateWO) {
                    var orderInGranite = migrationSTC.getOrderInGranite_reducedSet(notInSyncOrders[i].orderNumber, childOrderHeader.parentOrderNumber);
                    var childOrder = Order.getOrderById(childOrderHeader.orderId);
                    var firstTaskInGranite = granite.getFirstTaskInGraniteByWO_INST_ID(wo.WO_INST_ID);

                    var countServicesInOM = 1;
                    if(childOrder != null && childOrder.serviceParametersList != null) {
                        if(childOrder.serviceParametersList.length > 0) {
                            countServicesInOM = childOrder.serviceParametersList.length;
                        }
                    }

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + notInSyncOrders[i].orderNumber + " has " + countServicesInOM + " in OM");

                    if(orderInGranite != null) {
                        for (var s=0; s<countServicesInOM; s++) {
                            var input = new DataStructure("ds_jms:workOrderStatusUpdate_el");

                            // [a]. create message for EAI...
                            input.businessUnit                         = "Home";
                            input.circuitStatus                        = orderInGranite.CIRCUIT_STATUS;
                            input.circuitNumber                        = orderInGranite.CIRCUIT_NUMBER;
                            input.orderNumber                          = orderInGranite.ORDER_NUMBER;
                            input.orderType                            = orderInGranite.ORDER_TYPE;
                            input.workOrderDescription                 = "";
                            input.workOrder                            = orderInGranite.ORDER_NUMBER;
                            input.workOrderCircuitPathCompletionStatus = orderInGranite.CIRCUIT_STATUS;
                            input.workOrderLastModifiedBy              = orderInGranite.CREATED_BY;
                            input.workOrderLastModifiedTimestamp       = computeWOLastModTimestamp_(woStatus, orderInGranite.SERVICE_DATE, wo.ACTUAL_COMPL);

                            input.workOrderName                        = orderInGranite.ORDER_NUMBER;
                            input.workOrderRemarks                     = "";
                            input.workOrderStatus                      = orderInGranite.ORDER_STATUS;
                            input.workOrderTotalTime                   = "0";
                            input.circuitNumber                        = orderInGranite.CIRCUIT_NUMBER;
                            input.taskServiceType                      = null;
                            if(childOrder != null && childOrder.serviceParametersList != null) {
                                if(childOrder.serviceParametersList.length > 0) {
                                    input.taskServiceType              = childOrder.serviceParametersList[s].serviceParameters.serviceType;
                                    input.taskServiceNumber            = childOrder.serviceParametersList[s].serviceParameters.serviceNumber;
                                }
                            }

                            input.icmsSONumber                         = orderInGranite.ICMS_SO_NUMBER;
                            if(orderInGranite.ORDER_STATUS == "COMPLETED" || orderInGranite.ORDER_STATUS == "CANCELLED") {
                                input.taskName                         = null;
                            }
                            else {
                                input.taskName                         = ((firstTaskInGranite != null) ? firstTaskInGranite.TASK_NAME : null);
                            }
                            // orderDomain parameter
                            input.parameters[0]                        = new DataStructure("ds_jms:nameValue");
                            input.parameters[0].name                   = ifEAI_WOSU_17122008.getElementNameForOrderDomain();
                            input.parameters[0].value                  = orderInGranite.ORDER_DOMAIN;
                            // circuitNumber parameter
                            input.parameters[1]                        = new DataStructure("ds_jms:nameValue");
                            input.parameters[1].name                   = ifEAI_WOSU_17122008.getElementNameForSIPCircuitID();
                            input.parameters[1].value                  = orderInGranite.CIRCUIT_NUMBER;
                            // plateId parameter
                            input.parameters[2]                        = new DataStructure("ds_jms:nameValue");
                            input.parameters[2].name                   = ifEAI_WOSU_17122008.getElementNameForPlateID();
                            input.parameters[2].value                  = orderInGranite.PLATE_ID;
                            // workOrderStage parameter
                            input.parameters[3]                        = new DataStructure("ds_jms:nameValue");
                            input.parameters[3].name                   = ifEAI_WOSU_17122008.getElementNameForWorkOrderStage();
                            input.parameters[3].value                  = granite.getUDAValueForWorkOrder(orderInGranite.ORDER_NUMBER, "Order Stage", "Work Order Info");


                            // [b]. save message in queue for EAI...
                            ifGranite_jms.manageGraniteMsg_WorkOrderStatusUpdate(input);
                        }
                    }
                    else {
                        debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug +
                                     "[ERROR] Unable to find order in STC_GRANITE_REDUCED_DATA_4_HBU for order <" + notInSyncOrders[i].orderNumber + "," + childOrderHeader.parentOrderNumber + ">");
                    }
                }
            }
            else {
                debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug +
                             "[ERROR] Unable to find WO in Granite for order <" + notInSyncOrders[i].orderNumber + "> ");
            }

            // deleting the record from the table
            notInSyncOrders[i].deleteItem();
        }
    }
    else {
        debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Unable to find records in table 'STC_ORDERS_NOT_IN_SYNC'");
    }



    function computeWOLastModTimestamp_(woStatus, serviceDate, actualCompl) {
        var result = null;
        if(actualCompl != null) {
            result = Calendar.formatDate(actualCompl, "MM/dd/yyyy HH:mm:ss");
        }
        else {
            if(woStatus == 6) {
                result = (serviceDate != null ?
                             (serviceDate.indexOf(":") != -1 ? serviceDate : serviceDate + " 00:00:00") :
                             null);
            }
        }

        return result;
    }
  ]]></script>
</script>