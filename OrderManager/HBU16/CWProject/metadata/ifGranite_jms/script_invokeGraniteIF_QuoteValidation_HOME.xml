<?xml version="1.0" encoding="UTF-8" ?>
<script filenameHash="dc43fc3cbb3fa845ab77fd5ac5feb7b3" versionHash="eccbc87e4b5ce2fe28308fd9f2a7baf3" name="ifGranite_jms.invokeGraniteIF_QuoteValidation_HOME">
  <guid>{000cb075-351c-2cba-7fe2-5fb54766d15a}</guid>
  <highlight>36</highlight>
  <label>[9] Invoke Granite Interface: Quote Validation [JMS] [HOME]</label>
  <metaVersion>3</metaVersion>
  <parameterList>
    <parameter name="input" type="rifp">
      <mandatory>true</mandatory>
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var debug = "[[9] INVOKE GRANITE INTERFACE VIA 'JMS': QUOTE VALIDATION HOME] ";
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "START...");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INPUT: " + (input != null ? input.toXML() : "") + "...");

          var output = null;

          // Modified on 11.10.2008:
          // - added logic to retry an invocation against Granite if communication fail happens
          var retryMax = 3;
          var retryCounter = 0;

          while (retryCounter < retryMax) {
                retryCounter++;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "ATTEMPT # " + retryCounter);
                try {
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INVOKING INTERFACE...");

                      output = Global.invokeInterface("ifGranite_jms:XngServicesWR",
                                                                      "QuoteValidationHome",
                                                                      input);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "RESULT: " + output + "...");

    /*
    // --- TESTING PURPOSE ------------------------------------------------------------------
                      var ds = new DataStructure("ds_jms:quoteAcknowledgementWithFailure_HOME");
                      for (var j = 0; input.serviceParameters != null && j < input.serviceParameters.length; j++) {
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "RUNNING ON COMPONENT [" + j + "] OF SERVICE PARAMETERS...");
                            ds.quoteAcknowledgement.validationResponse.services[j].serviceType = input.serviceParameters[j].serviceType;
                            ds.quoteAcknowledgement.validationResponse.services[j].serviceNumber = input.serviceParameters[j].serviceNumber;
                            ds.quoteAcknowledgement.validationResponse.services[j].serviceDate = null;
                            ds.quoteAcknowledgement.validationResponse.services[j].maxBandwidth = "2Mb";
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "MAPPED SERVICE PARAMETERS MAIN ATTRIBUTES...");
                            ds.quoteAcknowledgement.validationResponse.services[j].failure.errorCode = "ERROR CODE";
                            ds.quoteAcknowledgement.validationResponse.services[j].failure.errorDescription = "ERROR DESCRIPTION";
                            ds.quoteAcknowledgement.validationResponse.services[j].failure.errorTime = null;
                            ds.quoteAcknowledgement.validationResponse.services[j].failure.errorType = "ERROR TYPE";
                            ds.quoteAcknowledgement.validationResponse.services[j].failure.functionName = "FUNCTION NAME";
                            ds.quoteAcknowledgement.validationResponse.services[j].failure.objectId = "OBJECT ID";
                            ds.quoteAcknowledgement.validationResponse.services[j].failure.processInstanceld = "PROCESS INSTANCE ID";
                            ds.quoteAcknowledgement.validationResponse.services[j].failure.sourceErrorCode = "SOURCE ERROR CODE";
                            ds.quoteAcknowledgement.validationResponse.services[j].failure.status = "SUCCESS";
                            ds.quoteAcknowledgement.validationResponse.services[j].failure.systemName = "EXPEDITER";
                            ds.quoteAcknowledgement.validationResponse.services[j].failure.targetRecored = "TARGET RECORD";
                            ds.quoteAcknowledgement.validationResponse.services[j].failure.userId = "USER ID";
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "MAPPED SERVICE PARAMETERS FAILURE ATTRIBUTES...");
                      }

                      output = new Array();
                      output[0] = ds;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "RESULT: " + output + "...");
    // --------------------------------------------------------------------------------------
    */
                      break;
                }
                catch (exc){
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "EXCEPTION: " + exc);
                      // - setting a sleep of 1 min.
                      if (retryCounter < retryMax){
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "SLEEPING FOR 60 SEC...");
                            processSTC.timeDelay("GRANITE_RETRY_TIME");
                      }
                }
          }

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");
          return output;
  ]]></script>
</script>