<?xml version="1.0" encoding="UTF-8" ?>
<script name="ds_ws.performValidationForHeldAttributesInLineItem">
  <label>Perform Validation For Held Attributes In LineItem</label>
  <metaVersion>25</metaVersion>
  <parameterList>
    <parameter name="lineItem" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="nvPairs" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="bundleLineItemActive" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="isSubmit" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
    <parameter name="failureArray" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var validationErrors = null;

    // nvPairs for Held orders
    var nvPairNameForHeldOrder = "AgreeToHeld";

    var lineItemInActiveOrder = null;
    if(bundleLineItemActive != null) {
        lineItemInActiveOrder = ds_ws.getLineItemInBundleWithIdentifier(bundleLineItemActive, lineItem.lineItemIdentifier);
    }

    if(lineItemInActiveOrder != null) {
        if(lineItemInActiveOrder.onHeld) {
            // the active version of the lineItem has "onHeld" flag enabled.
            // checking if the received order has the NV pairs for "ON-HELD"
            if(nvPairs == null) {
                validationErrors= ["AE0037", Global.translateText("AE0037", null, nvPairNameForHeldOrder)];
            }
            else {
                var found = false;
                for(var i=0; i<nvPairs.length && !found; i++) {
                    var nvPairName = null;
                    var nvPairValue = null;
                    if(lineItem.elementTypeInOrderTree == "B") {
                        nvPairName = nvPairs[i].bundleParameter.name;
                        nvPairValue = nvPairs[i].bundleParameter.value;
                    }
                    else if(lineItem.elementTypeInOrderTree == "C") {
                        nvPairName = nvPairs[i].circuitParameter.name;
                        nvPairValue = nvPairs[i].circuitParameter.value;
                    }
                    else if(lineItem.elementTypeInOrderTree == "S") {
                        nvPairName = nvPairs[i].serviceParameter.name;
                        nvPairValue = nvPairs[i].serviceParameter.value;
                    }
                    else if(lineItem.elementTypeInOrderTree == "T") {
                        nvPairName = nvPairs[i].subServiceParameter.name;
                        nvPairValue = nvPairs[i].subServiceParameter.value;
                    }
                    found = ((nvPairName == nvPairNameForHeldOrder) && nvPairValue != null);
                }

                if(!found) {
                    validationErrors= ["AE0037", Global.translateText("AE0037", null, nvPairNameForHeldOrder)];
                }
            }
        }
    }

    if(validationErrors != null) {
    debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "] performValidationForHeldAttributesInLineItem (" + lineItem.lineItemIdentifier + "): Found errors [" + validationErrors + "]");
        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, lineItem.lineItemIdentifier, failureArray, isSubmit);
    }

    return failureArray;
  ]]></script>
</script>