<?xml version="1.0" encoding="UTF-8" ?>
<script name="ds_ws.compareAndUpdateReceivedOrderHeaderWithExistingOne">
  <label>Compare And Update Received OrderHeader with Existing one</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="existingOrder" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="receivedOrder" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="isCancel" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
    <parameter name="existingOrderWasKO" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
    <parameter name="failureArray" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var validationErrors = null;

    if(existingOrder.orderHeader != null && receivedOrder.orderHeader != null) {

        // all orderHeader attributes except:
        // - the ones created by CW
        // - orderStatus
        // - version
        // - remarks
        // - serviceDate (as requested by Dharvesh with email 2015-07-29)
        // - creationDate (as requested by Denis with email 2015-12-08)
        // - customerContact      --- ONLY FOR REVISE -- and for Cancel as requested by Lotfi (see email sent by Denis 2015-10-27 "STC SMR 1467 - SIP Backup - Post-cutover support actions")
        // - customerContactName  --- ONLY FOR REVISE -- and for Cancel as requested by Lotfi (see email sent by Denis 2015-10-27 "STC SMR 1467 - SIP Backup - Post-cutover support actions")
        // - createdByName        --- For Revise & Cancel as requested by Lotfi (see email sent 2015-10-20)
        // - createdByContactName --- For Revise & Cancel as requested by Lotfi (see email sent 2015-10-20)
        var headerAttributesToCheckForRevise = ["customerIdNumber", "accountNumber", "customerType", "customerIDType", "customerName",
            "customerNumber", "orderNumber", "orderType", "createdBy", "priority", "referenceTelNumber",
            "customerSegmentation", "icmsSalesOrderNumber", "businessUnit"];

        // 2016-05-30: For Cancel Order, the attributes to check are:
        // - orderNumber
        // - orderType
        // - businessUnit
        var headerAttributesToCheckForCancel = ["orderNumber", "orderType", "businessUnit"];

        if(receivedOrder.orderHeader.orderType != null && receivedOrder.orderHeader.orderType == "F") {
            headerAttributesToCheckForRevise.push("feasibilityFor");
            headerAttributesToCheckForRevise.push("reservation");
        }
        else {
            headerAttributesToCheckForRevise.push("reservationNumber");
        }

        var headerAttributesToCheck = (isCancel ? headerAttributesToCheckForCancel : headerAttributesToCheckForRevise);

        for(var i=0; i<headerAttributesToCheck.length; i++) {
            var attributeToCheck = headerAttributesToCheck[i];
            compareValues_(receivedOrder.orderHeader[attributeToCheck], existingOrder.orderHeader[attributeToCheck], attributeToCheck, "Attribute");
        }

        // 2016-05-30: don't check NV Pairs and ReasonCode for Cancel
        if(!isCancel) {
            // nv check; it loops in existing NV pair and verifies if it exists also in received one
            validationErrors = ds_ws.compareReceivedOHParametersWithExistingOne(existingOrder, receivedOrder, validationErrors, existingOrder.orderHeader.orderNumber);

             if (!ds_ws.compareReasonCodesWithExistingOnes(existingOrder.orderHeader.id, receivedOrder.orderHeader.id)){
               validationErrors = ds_ws.appendToValidationErrors("AE0114", Global.translateText("AE0114", null, ["header"]), validationErrors);
            }
        }

        // completed check - checking if there are validation errors
        if(validationErrors != null) {
            failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingOrder.orderHeader.orderNumber, failureArray, false);
        }

    }
    else {
        validationErrors = ["AE0058", Global.translateText("AE0058", null, [(existingOrder.orderHeader != null ? "Received" : "Existing"), existingOrder.orderHeader.orderNumber])];
        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingOrder.orderHeader.orderNumber, failureArray, false);
    }

    return failureArray;


    function notIn_(attributeName, attributeNameToSkipArray) {
        var found = false;
        for (var i=0; i<attributeNameToSkipArray.length && !found; i++) {
            found = (attributeName == attributeNameToSkipArray[i]);
        }

        return (!found);
    }


    function compareValues_(receivedAttribute, existingAttribute, attributeName, category) {
        var debugMsg = "compareAndUpdateReceivedOrderHeaderWithExistingOne (" + existingOrder.orderHeader.orderNumber + ")";
        if(receivedAttribute == null) {
            if(existingAttribute != null) {
                validationErrors = ds_ws.appendToValidationErrors("AE0055", Global.translateText("AE0055", null, [category, attributeName, "existing"]), validationErrors, debugMsg);
            }
        }
        else {
            if(existingAttribute == null) {
                validationErrors = ds_ws.appendToValidationErrors("AE0057", Global.translateText("AE0057", null, [category, attributeName, "existing"]), validationErrors, debugMsg);
            }
            else {
                if(attributeName == 'creationDate' || attributeName == 'serviceDate') {
                    var receivedDate = new Date(receivedAttribute.getFullYear(), receivedAttribute.getMonth(), receivedAttribute.getDate());
                    var existingDate = new Date(existingAttribute.getFullYear(), existingAttribute.getMonth(), existingAttribute.getDate());

                    if(receivedDate.getTime() != existingDate.getTime()) {
                        validationErrors = ds_ws.appendToValidationErrors("AE0056", Global.translateText("AE0056", null, [category, attributeName, receivedDate, existingDate, "existing"]), validationErrors, debugMsg);
                    }
                }
                else {
                    if(! receivedAttribute.toString().equals(existingAttribute.toString())) {
                        validationErrors = ds_ws.appendToValidationErrors("AE0056", Global.translateText("AE0056", null, [category, attributeName, receivedAttribute, existingAttribute, "existing"]), validationErrors, debugMsg);
                    }
                }
            }
        }
    }
  ]]></script>
</script>