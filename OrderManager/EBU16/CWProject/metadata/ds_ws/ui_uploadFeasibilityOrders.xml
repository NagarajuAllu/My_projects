<?xml version="1.0" encoding="UTF-8" ?>
<userInterface name="ds_ws.uploadFeasibilityOrders">
  <extends>ui_com.conceptwave.system.UploadPopup</extends>
  <label>Upload Feasibility Orders</label>
  <metaVersion>21</metaVersion>
  <variableList>
    <variable name="errorList" type="leaf">
      <valueType>nmeta_com.conceptwave.system.Object</valueType>
    </variable>
    <variable name="jobId" type="leaf">
      <valueType>dtype_ds_ws.integer10</valueType>
    </variable>
  </variableList>
  <vformList>
    <vform name="Forms" type="frmui">
      <extends>ui_com.conceptwave.system.UploadPopup/frmui_Forms</extends>
      <overlayList>
        <overlay name="Default" type="exov">
          <base>ui_com.conceptwave.system.UploadPopup/frmui_Forms/exov_Default</base>
          <extends>ui_com.conceptwave.system.UploadPopup/frmui_Forms/exov_Default</extends>
          <label>Default</label>
          <overrideList>
            <override name="HorizontalLayout" type="elhlt">
              <elementList>
                <element name="VerticalLayout" type="elvlt">
                  <elementList>
                    <element name="Header" type="elhdr">
                      <label>Please, browse your system to find the file that you want to upload</label>
                    </element>
                    <element name="UploadFile" type="upfile">
                      <uploadCallback type="varPath">
                        <variablePathList>
                          <variablePath>ui_com.conceptwave.system.UploadPopup/uimthd_uploadCallback</variablePath>
                        </variablePathList>
                      </uploadCallback>
                      <uploadOwner type="varPath">
                        <variablePathList>
                          <variablePath>ui_com.conceptwave.system.UploadPopup/uimthd_uploadMethod</variablePath>
                        </variablePathList>
                      </uploadOwner>
                    </element>
                  </elementList>
                </element>
              </elementList>
            </override>
          </overrideList>
        </overlay>
      </overlayList>
    </vform>
  </vformList>
  <methodList>
    <method name="uploadCallback" type="uimthd">
      <parameterList>
        <parameter name="status" type="rifp">
          <type>dtype_com.conceptwave.system.String</type>
        </parameter>
      </parameterList>
      <script><![CDATA[
        if("success" == status) {
            this.errorMessage = "Successfully uploaded file";

            var result = null;
            if(this.errorList != null && this.errorList.length > 0) {
                storeErrors_(this.errorList);

                result = this.parent.search_showErrorsForBulkLoadingByJobId(this.jobId);
            }
            else {
                result = this.parent.search_uploadedBulkFeasibilityOrdersByJobId(this.jobId);
            }
            Global.runContentDisplayScript(this.parent, "displayScript");
            return result;
        }
        else {
            this.errorMessage = "Error uploading file: " + status;
            Global.throwException(this.errorMessage);
        }


        function storeErrors_(errors) {
            for(var i=0; i<errors.length; i++) {
                var errorDoc = errors[i];
                errorDoc.save();
            }
        }
      ]]></script>
    </method>
    <method name="uploadMethod" type="uimthd">
      <parameterList>
        <parameter name="fileReader" type="rifp">
          <mandatory>true</mandatory>
          <type>nmeta_com.conceptwave.system.Object</type>
        </parameter>
      </parameterList>
      <script>this.uploadBulkFeasibilityOrders_handleUpload(fileReader);</script>
    </method>
    <method name="uploadBulkFeasibilityOrders_handleUpload" type="uimthd">
      <parameterList>
        <parameter name="uploadFile" type="rifp">
          <type>nmeta_com.conceptwave.system.Object</type>
        </parameter>
      </parameterList>
      <script><![CDATA[
        if (uploadFile != null) {
        debugPrintln("MimeType = " + uploadFile.getMimeType());
            if(uploadFile.getMimeType() != "text/csv" && uploadFile.getMimeType() != "application/vnd.ms-excel") {
                uploadFile.close(false);
                Global.throwException(Global.translateText("AE0125", null, ["text/csv", uploadFile.getMimeType()]));
            }

            var rowCount = 0;
            var columnCount = 0;
            var configHeader = null;
            var columnSeparator = getSeparatorForUploadFile_();
            this.errorList = new Array();

            while (!uploadFile.isEOF()) {
                rowCount++;
                var item = uploadFile.readLine();
        debugPrintln("Item = " + item);

                if(rowCount == 1) {
                    // processing header
                    if(item == null || item.trim().length == 0) {
                        Global.throwException(Global.translateText("AE0135"));
                    }

                    configHeader = getHeaderForBulkOrder_();
                    if(configHeader == null) {
                        Global.throwException(Global.translateText("AE0127"));
                    }

                    if(! item.trim().equals(configHeader)) {
                        Global.throwException(Global.translateText("AE0128"));
                    }
                    columnCount = configHeader.split(columnSeparator).length;
                    this.jobId = Global.nextInSequence("STC_BULK_JOBID");
        debugPrintln("this.jobId = " + this.jobId);
                }
                else {
                    if(item != null) {
                        var documentData = item.trim().split(columnSeparator);
                        if(documentData != null) {
                            if(documentData.length == columnCount) {
                                var errorsInParsingSingleRow = ds_ws.parseSingleRowForBulkFeasibilityOrder(item, configHeader, columnSeparator, this.jobId, rowCount);
                                if(errorsInParsingSingleRow != null) {
                                    for(var i=0; i<errorsInParsingSingleRow.length; i++) {
                                        var errorDoc = new Document("ds_ws.errorInBulkLoading");
                                        errorDoc.jobId = this.jobId;
                                        errorDoc.rowNumber = rowCount;
                                        errorDoc.errorDescription = errorsInParsingSingleRow[i];
                                        this.errorList.push(errorDoc);
                                    }
                                }
                            }
                            else {
                                ds_ws.cleanupBulkFeasibilityOrder(this.jobId);
                                Global.throwException(Global.translateText("AE0132", null, ["" + rowCount, "" + columnCount, "" + documentData.length]));
                            }
                        }
                        else {
                            ds_ws.cleanupBulkFeasibilityOrder(this.jobId);
                            Global.throwException(Global.translateText("AE0133", null, ["" + rowCount]));
                        }
                    }
                    else {
                        // ignoring the empty lines
                    }
                }
            }
            uploadFile.close(false);


            if(rowCount == 0) {
                Global.throwException(Global.translateText("AE0126"));
            }

            if(rowCount == 1) {
                Global.throwException(Global.translateText("AE0134"));
            }

            if(this.errorList != null && this.errorList.length > 0) {
                for(var i=0; i<this.errorList.length; i++) {
        debugPrintln("JobId[" + this.jobId + "] # this.errorList[" + i + "] = " + this.errorList[i].toXML());
                }
                ds_ws.cleanupBulkFeasibilityOrder(this.jobId);
            }
            else {
        debugPrintln("JobId[" + this.jobId + "] # No errors found");
            }
        }


        function getHeaderForBulkOrder_() {
            var headerFoundList = Finder.runFinder("ds_ws.findHeaderForBulkOrder", "select", null);

            var headerFound = null;
            if(headerFoundList != null && headerFoundList.length > 0) {
                headerFound = headerFoundList[0];
            }

            return headerFound.header;
        }

        function getSeparatorForUploadFile_() {
            var separator = Global.getConfigVariable("UPLOADED_FILE_SEPARATOR", ",");
            return separator;
        }
      ]]></script>
    </method>
  </methodList>
</userInterface>