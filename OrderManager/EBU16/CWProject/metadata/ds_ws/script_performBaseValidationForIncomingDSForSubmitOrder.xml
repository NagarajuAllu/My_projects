<?xml version="1.0" encoding="UTF-8" ?>
<script name="ds_ws.performBaseValidationForIncomingDSForSubmitOrder">
  <label>Perform Base Validation For Incoming DS For SubmitOrder</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="inputDS" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var validationErrors = null;

    var orderStatus = inputDS.message.OrderStatus;
    if(orderStatus == null) {
        validationErrors = ds_ws.appendToValidationErrors("AE0008", Global.translateText("AE0008", null, ["Bundle Order STC", "'NULL'", "Submit Order"]), validationErrors);
    }
    else {
        var orderStatusUpperCase = orderStatus.toUpperCase();
        var isValid = (orderStatusUpperCase == "NEW");

        if(!isValid) {
    debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "] performBaseValidationForIncomingDSForSubmitOrder (" + inputDS.message.OrderNumber + ") - Invalid OrderStatus for SubmitOrder: " + orderStatusUpperCase);
            validationErrors = ds_ws.appendToValidationErrors("AE0008", Global.translateText("AE0008", null, ["Bundle Order STC", inputDS.message.OrderStatus, "Submit Order"]), validationErrors);
        }
    }


    var orderType = inputDS.message.OrderType;
    if(orderType == null) {
         validationErrors = ds_ws.appendToValidationErrors("AE0006", Global.translateText("AE0006", null, ["OrderType", inputDS.message.OrderNumber]), validationErrors);
    }
    /****
     *
     *     Commented due to introduction of SMR 3836

    else {
        if(inputDS.message.OrderType == 'F')) {
    debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "] performBaseValidationForIncomingDSForSubmitOrder (" + inputDS.message.OrderNumber + ") - Invalid OrderType for SubmitOrder: " + inputDS.message.OrderType);
        validationErrors = ds_ws.appendToValidationErrors("AE0040", Global.translateText("AE0040", null, inputDS.message.OrderType), validationErrors);
        }
    }

     */

    if(ds_ws.isOrderTypeAndStatusDisabled(orderType.toUpperCase(), orderStatusUpperCase)) {
        validationErrors = ds_ws.appendToValidationErrors("AE0074", Global.translateText("AE0074", null, [orderStatus, orderType]), validationErrors);
    }

    // checking that the order doesn't exist
    var searchDoc = new Document("ds_ws.search_bundleOrder");
    searchDoc.orderNumber = inputDS.message.OrderNumber;
    var orderListFound = Finder.runFinder("ds_ws.findAllSTCBundleOrders_Script", "select", searchDoc);
    if(orderListFound != null && orderListFound.length > 0) {
        var orderId = orderListFound[0].id;
        var orderFound = Order.getOrderById(orderId);
        // CR for resubmit orders
        if(orderFound.orderHeader.internalOrder == "Y") {
            // SMR 8478 - the order is an internal order so no flow can be received from CRM related to this order
            validationErrors = ds_ws.appendToValidationErrors("AE0001", Global.translateText("AE0001"), validationErrors);
        }
        else {
            var existProcessKO = processSTC.checkIfExistProcessKOInOrchestrationTable(orderId);
            if(!existProcessKO) {
                // there are no processes in KO status in Orchestration table, so rejecting the order
                validationErrors = ds_ws.appendToValidationErrors("AE0001", Global.translateText("AE0001"), validationErrors);
            }
            else {
                var allProcessesCompleted = processSTC.checkAllProcessesInOrchestrationTableAreCompleted(orderId);
                if(!allProcessesCompleted) {
                    validationErrors = ds_ws.appendToValidationErrors("AE0088", Global.translateText("AE0088"), validationErrors);
                }
            }
            // OLD code before CR
            // validationErrors = ds_ws.appendToValidationErrors("AE0001", Global.translateText("AE0001"), validationErrors);
        }
    }


    if(inputDS.message.ParentLineItems == null || inputDS.message.ParentLineItems.length == 0) {
        validationErrors = ds_ws.appendToValidationErrors("DE0292", Global.translateText("DE0292", null, "ParentLineItems"), validationErrors);
    }

    // 2015-09-10: filter for SIP orders
    var configSUPPORT_FOR_SIP = Global.getConfigVariable("SUPPORT_FOR_SIP", "FALSE").toUpperCase();

    var bundleSIPProductTypes  = ds_ws.getAllCRMProductTypesForOMInternalProductType("Bundle SIP");
    if(bundleSIPProductTypes == null || bundleSIPProductTypes.length == 0) {
        validationErrors = ds_ws.appendToValidationErrors("AE0083", Global.translateText("AE0083", null, "Bundle SIP"), validationErrors);
    }
    else {
        if(inputDS.message.ParentLineItems != null) {
            for(var i=0; i<inputDS.message.ParentLineItems.length; i++) {
                var receivedBundleProductType = inputDS.message.ParentLineItems[i].ProductType;
                if(isSIPProductType_(receivedBundleProductType) && (configSUPPORT_FOR_SIP != "TRUE")) {
                    validationErrors = ds_ws.appendToValidationErrors("AE0089", Global.translateText("AE0089", null, [receivedBundleProductType, "Bundle SIP"]), validationErrors);
                }
            }
        }
    }


    // 2015-09-10: filter for MATM orders
    var configSUPPORT_FOR_MATM = Global.getConfigVariable("SUPPORT_FOR_MATM", "FALSE").toUpperCase();

    var bundleMATMProductTypes  = ds_ws.getAllCRMProductTypesForOMInternalProductType("Bundle MATM");
    if(bundleMATMProductTypes == null || bundleMATMProductTypes.length == 0) {
        validationErrors = ds_ws.appendToValidationErrors("AE0083", Global.translateText("AE0083", null, "Bundle MATM"), validationErrors);
    }
    else {
        if(inputDS.message.ParentLineItems != null) {
            for(var i=0; i<inputDS.message.ParentLineItems.length; i++) {
                var receivedBundleProductType = inputDS.message.ParentLineItems[i].ProductType;
                if(isMATMProductType_(receivedBundleProductType) && (configSUPPORT_FOR_MATM != "TRUE")) {
                    validationErrors = ds_ws.appendToValidationErrors("AE0089", Global.translateText("AE0089", null, [receivedBundleProductType, "Bundle MATM"]), validationErrors);
                }
            }
        }
    }


    return validationErrors;


    function isSIPProductType_(foundProductType) {
        var found = false;
        for(var i=0; i<bundleSIPProductTypes.length && !found; i++) {
            found = (foundProductType == bundleSIPProductTypes[i]);
        }

        return found;
    }


    function isMATMProductType_(foundProductType) {
        var found = false;
        for(var i=0; i<bundleMATMProductTypes.length && !found; i++) {
            found = (foundProductType == bundleMATMProductTypes[i]);
        }

        return found;
    }
  ]]></script>
</script>