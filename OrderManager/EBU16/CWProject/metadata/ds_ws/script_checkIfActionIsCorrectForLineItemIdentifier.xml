<?xml version="1.0" encoding="UTF-8" ?>
<script name="ds_ws.checkIfActionIsCorrectForLineItemIdentifier">
  <label>Check if Action is Correct for LineItemIdentifier</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="bundleLineItemActive" type="rifp">
      <type>doc_ds_ws.lineItemDocument</type>
    </parameter>
    <parameter name="lineItemToCheck" type="rifp">
      <type>doc_ds_ws.lineItemDocument</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var validationErrors = null;

    if(lineItemToCheck.action == "A") {
        // the lineItem is accepted if:
        // - never received
        // - received but the active version of the lineItem is CANCELLED and the previous action of the lineItem was "Add"

        var foundLineItems = ds_ws.getAllLineItemsByIdentifierAndProvisioningFlag(lineItemToCheck.lineItemIdentifier);
        var error = false;
        if(foundLineItems != null && foundLineItems.length > 0) {
            error = true;
            // it means that the lineItem has been received previously; looking for the "active" version of the lineItem
            var foundLineItem = ds_ws.getLineItemByServiceNumberAndLIIdAndProvFlag(null, lineItemToCheck.lineItemIdentifier, "ACTIVE");
            if(foundLineItem == null) {
                // not found ... searching for "CANCELLED" version of the lineItem
                foundLineItem = ds_ws.getLineItemByServiceNumberAndLIIdAndProvFlag(null, lineItemToCheck.lineItemIdentifier, "CANCELLED");
            }

            if(foundLineItem != null) {
                var orderRelatedToFoundLineItem = Order.getOrderById(foundLineItem.orderId);
                if(orderRelatedToFoundLineItem != null && orderRelatedToFoundLineItem.orderHeader.orderType == "F") {
                    // NO ERROR if the lineItem belong to a Feasibility generated internally
                    // error = false;
                    error = orderRelatedToFoundLineItem.orderHeader.internalOrder == "Y";
                }
                else {
                    // NO ERROR if the status is CANCELLED and the "original" requested action was equals to "Add";
                    error = (foundLineItem.lineItemStatus != "CANCELLED" || foundLineItem.requestedActionIsA == false);
                }
            }
            else {
                // not found ... searching for "OLD" version of the lineItem in case the lineItem is completed as not feasible
                foundLineItem = ds_ws.getLineItemByServiceNumberAndLIIdAndProvFlag(null, lineItemToCheck.lineItemIdentifier, "OLD");

                if(foundLineItem != null) {
                    // check if linked to the "F" order
                    var orderRelatedToFoundLineItem = Order.getOrderById(foundLineItem.orderId);
                    if(orderRelatedToFoundLineItem != null && orderRelatedToFoundLineItem.orderHeader.orderType == "F") {
                        if(!foundLineItem.feasible) {
                            // not feasible so acceptable!
                            error = false;
                        }
                        else if(ds_ws.isLegacyService(orderRelatedToFoundLineItem.bundles[0]) && ds_ws.isSIPCircuit(foundLineItem.serviceType)) {
                            // CR-22586: it's possible to received Feasibility FLAT orders for SIP! EOC should accept it
                            error = false;
                        }
                        else {
                            // maintain error
                        }
                    }
                    else {
                        // maintain error
                    }
                }
                else {
                    // maintain error
                }
            }
        }
        if(error) {
            validationErrors = ds_ws.appendToValidationErrors("AE0048", Global.translateText("AE0048", null, ["lineItem Identifier", lineItemToCheck.lineItemIdentifier]),
                                                              validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");
        }


        foundLineItems = ds_ws.getAllLineItemsByServiceNumber(lineItemToCheck.serviceNumber);
        error = false;
        if(foundLineItems != null && foundLineItems.length > 0) {
            error = true;
            // it means that the lineItem has been received previously; looking for the "active" version of the lineItem
            var foundLineItem = ds_ws.getLineItemByServiceNumberAndLIIdAndProvFlag(lineItemToCheck.serviceNumber, null, "ACTIVE");
            if(foundLineItem == null) {
                // not found ... searching for "CANCELLED" version of the lineItem
                foundLineItem = ds_ws.getLineItemByServiceNumberAndLIIdAndProvFlag(lineItemToCheck.serviceNumber, null, "CANCELLED");
            }

            if(foundLineItem != null) {
                var orderRelatedToFoundLineItem = Order.getOrderById(foundLineItem.orderId);
                if(orderRelatedToFoundLineItem != null && orderRelatedToFoundLineItem.orderHeader.orderType == "F") {
                    // NO ERROR if the lineItem belong to a Feasibility
                    error = false;
                }
                else {
                    // NO ERROR if the status is CANCELLED and the "original" requested action was equals to "Add";
                    error = (foundLineItem.lineItemStatus != "CANCELLED" || foundLineItem.requestedActionIsA == false);
                }
            }
            else {
                // not found ... searching for "OLD" version of the lineItem in case the lineItem is completed as not feasible
                foundLineItem = ds_ws.getLineItemByServiceNumberAndLIIdAndProvFlag(lineItemToCheck.serviceNumber, null, "OLD");

                if(foundLineItem != null) {
                    // check if linked to the "F" order
                    var orderRelatedToFoundLineItem = Order.getOrderById(foundLineItem.orderId);
                    if(orderRelatedToFoundLineItem != null && orderRelatedToFoundLineItem.orderHeader.orderType == "F") {
                        if(!foundLineItem.feasible) {
                            // not feasible so acceptable!
                            error = false;
                        }
                        else if(ds_ws.isLegacyService(orderRelatedToFoundLineItem.bundles[0]) && ds_ws.isSIPCircuit(foundLineItem.serviceType)) {
                            // CR-22586: it's possible to received Feasibility FLAT orders for SIP! EOC should accept it
                            error = false;
                        }
                        else {
                            // maintain error
                        }
                    }
                    else {
                        // maintain error
                    }
                }
                else {
                    // maintain error
                }
            }
        }
        if(error) {
            validationErrors = ds_ws.appendToValidationErrors("AE0048", Global.translateText("AE0048", null, ["serviceNumber", lineItemToCheck.serviceNumber]),
                                                              validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");
        }
    }
    else {
        if(bundleLineItemActive != null) {
            var lineItem = ds_ws.getLineItemInBundleWithIdentifier(bundleLineItemActive, lineItemToCheck.lineItemIdentifier);
            if(lineItem == null) {
                // lineItemIdentifier doesn't belong to the active instance of the bundle
                validationErrors = ds_ws.appendToValidationErrors("AE0049", Global.translateText("AE0049", null, [lineItemToCheck.lineItemIdentifier, bundleLineItemActive.lineItemIdentifier]),
                                                                  validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");
            }
            else {
                if(lineItem.elementTypeInOrderTree != lineItemToCheck.elementTypeInOrderTree) {
                    // lineItemIdentifier belong to the active instance of the bundle but for a different element
                    validationErrors = ds_ws.appendToValidationErrors("AE0050", Global.translateText("AE0050", null, [lineItemToCheck.lineItemIdentifier, "elementTypeInOrderTree", lineItem.elementTypeInOrderTree, lineItemToCheck.elementTypeInOrderTree]),
                                                                      validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");
                }

                if(lineItem.serviceNumber != lineItemToCheck.serviceNumber) {
                    // serviceNumber is different; checking if the oldServiceNumber is correct
                    var generateError = true;
                    if(lineItemToCheck.oldServiceNumber != null) {
                        generateError = (lineItem.serviceNumber != lineItemToCheck.oldServiceNumber);
                    }

                    if(generateError) {
                        validationErrors = ds_ws.appendToValidationErrors("AE0050", Global.translateText("AE0050", null, [lineItemToCheck.lineItemIdentifier, "serviceNumber", lineItem.serviceNumber, lineItemToCheck.serviceNumber]),
                                                                          validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");
                    }
                }

                if(lineItem.serviceType != lineItemToCheck.serviceType) {
                    // lineItemIdentifier belong to the active instance of the bundle but for a different element
                    validationErrors = ds_ws.appendToValidationErrors("AE0050", Global.translateText("AE0050", null, [lineItemToCheck.lineItemIdentifier, "serviceType", lineItem.serviceType, lineItemToCheck.serviceType]),
                                                                      validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");
                }

                // if the lineItem has been cancelled and requested action was equals to "A", it means that the lineItem has not to be received - because added and then cancelled
                if(lineItem.lineItemStatus == "CANCELLED" && lineItem.requestedActionIsA == true) {
                    // lineItem was added but then cancelled, so it doesn't "exist"
                    validationErrors = ds_ws.appendToValidationErrors("AE0075", Global.translateText("AE0075", null, lineItemToCheck.lineItemIdentifier),
                                                                      validationErrors, "CheckIfActionIsCorrectForLineItemIdentifier (" + lineItemToCheck.lineItemIdentifier + ")");

                }
            }
        }
    }

    return validationErrors;
  ]]></script>
</script>