<?xml version="1.0" encoding="UTF-8" ?>
<script name="ds_ws.performValidationForBlockParameters">
  <label>Perform Validation of Block Parameters for Line Item</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="blockParameters" type="rifp">
      <mandatory>true</mandatory>
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="blockParamTypeName" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="orderType" type="rifp">
      <type>dtype_ds_ws.orderType</type>
    </parameter>
    <parameter name="orderStatus" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="serviceType" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="lineItemIdentifier" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="failureArray" type="rifp">
      <mandatory>true</mandatory>
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="isSubmit" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    function getBlkParamConfig(){
        var queryDoc = new Document("ds_ws:search_BlockParametersForConfiguration");
        var resultList = Finder.runFinder("ds_ws:findBlockParamsConf", "select", queryDoc);

        var confBlkTable = {};
        var mandatoryOnly = {};

        for( var i=0; i < resultList.length; i++){
            var v = resultList[i];
            var key = v.orderType+v.orderStatus+v.serviceType;
            if(!confBlkTable[key]){
                confBlkTable[key] = {}
            }

            confBlkTable[key][v.blockParameterName] = v.isMandatory;
        }
        return confBlkTable;
    }

    function checkBlkMandatoryFields( blkParamLst, manBlkParamLst){
        var validationErrors = [];
        for(var i=0; i < manBlkParamLst.length; i++){
            var present = false;
            for( var prmi=0; prmi<blkParamLst.length; prmi++){
                if(manBlkParamLst[i] == blkParamLst[prmi]){
                     present = true;
                     break;
                }
            }
            if(!present){
                    validationErrors.push("AE0112");
                    validationErrors.push(Global.translateText("AE0112", null, [manBlkParamLst[i]]));
            }
        }
        return validationErrors;
    }

    function checkBlkParamsConfigure( blkParamsLst, cfgBlkParamLst){
        var validationErrors = [];
        for(var i=0; i<blkParamsLst.length; i++){
            var notFound = true;
            for( var prmi=0; prmi<cfgBlkParamLst.length; prmi++){
                if(cfgBlkParamLst[prmi] == blkParamsLst[i]){
                     notFound = false;
                     break;
                }
            }
            if(notFound){
                    validationErrors.push("AE0113");
                    validationErrors.push(Global.translateText("AE0113", null, [blkParamsLst[i]]));
            }
        }
        return validationErrors;
    }

    function validateBlkParams(blkParams, orderType, orderStatus, serviceType, conf, id, failureArray){
        var k=orderType+orderStatus+serviceType;
        if (! conf[k]){
          return failureArray;
        }

        var mandatoryBlkParams = [];
        var allBlkParams = [];

        for ( var name in conf[k]){
          if ( conf[k][name]){
            mandatoryBlkParams.push(name);
          }
          allBlkParams.push(name);
        };

        var mverr = checkBlkMandatoryFields( blkParams, mandatoryBlkParams);
        var verr = checkBlkParamsConfigure( blkParams, allBlkParams);
        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(mverr.concat(verr), id, failureArray, isSubmit);
        return failureArray;
    }

    function unrollBlkNames( arr, typeString){
      if(!arr){ return []; };
      var blkParams = [];
      for ( var i=0; i<arr.length; i++){
        blkParams.push( arr[i][typeString].name);
      }
      return blkParams;
    }

    var cfg = getBlkParamConfig();
    var blkNames = unrollBlkNames(blockParameters, blockParamTypeName);
    failureArray = validateBlkParams(blkNames,orderType, orderStatus, serviceType, cfg,lineItemIdentifier, failureArray);

    return failureArray;
  ]]></script>
</script>