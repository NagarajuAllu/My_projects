<?xml version="1.0" encoding="UTF-8" ?>
<binding filenameHash="4ba0cd566e48fc11bdbfa734a6f301f1" versionHash="eccbc87e4b5ce2fe28308fd9f2a7baf3" name="ifExpediter_ws.bindingForExpediterIF_JS_HOME">
  <extensionList>
    <extension name="operation_SubmitOrder" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          var debug = "[[2] BINDING FOR EXPEDITER INTERFACE [JAVASCRIPT]: SUBMIT ORDER - HOME] ";
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "START...");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INPUT: " + (input != null ? input.toXML() : "NULL") + "...");
                var logMsgId = UserProfile.getMsgLogId();

                var output = null;

                // Modified the 07.10.2008:
                // - logic to make the order persistent on the DB
                var orders = null;
                var validation = null;
                var exceptionCode = "";

                try {

                      if (input.message.BusinessUnit.toUpperCase() != "HOME"){
                            // Customized exception AE0014:
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " BUSINESS UNIT '" + input.message.BusinessUnit + "' IS NOT VALID FOR THIS SERVICE...");
                            // - Inconsistent request: this service can be invoked only with "{0}" orders!
                            exceptionCode = "AE0015";
                            Global.throwException("AE0014", ["HBU"]);
                      }

                      // Modified on 12.10.2008:
                      // - if Order Status is empty then by default is "New" (check mail from Mick of 12.10.2008 13:47)
                      if (input.message.OrderStatus == null) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER STATUS IS NULL DEFAULT VALUE IS ASSIGNED...");
                            input.message.OrderStatus = "New";
                      }
                      // - if in this list it's OK!!!!
                      else if (input.message.OrderStatus.toUpperCase() == "NEW"){

                            // DO NOTHING...
                      }
                      // Modified on the 17.03.2009:
                      // - in case the 'HOLD' request belongs to an EBU order then an exception is raised
                      else if (input.message.OrderStatus.toUpperCase() == "HOLD"){

                            // DO NOTHIG...
                      }
                      // - if Order Status is equal to "Activate", "Cancel", "Revise" then an exception is raised
                      else if(input.message.OrderStatus.toUpperCase() == "ACTIVATE" ||
                                  input.message.OrderStatus.toUpperCase() == "CANCEL" ||
                                  input.message.OrderStatus.toUpperCase() == "REVISE"){

                            // Customized exception AE0008:
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER STATUS IS NOT VALID FOR SUBMIT ORDER REQUEST...");
                            // - Inconsistent request: "{0}" with Order Status "{1}" not valid for "{2}" request!
                            exceptionCode = "AE0008";
                            Global.throwException("AE0008", ["Order STC", input.message.OrderStatus, "Submit Order"]);
                      }
                      else{
                            // Customized exception AE0008:
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER STATUS IS NOT VALID FOR SUBMIT ORDER REQUEST...");
                            // - Inconsistent request: "{0}" with Order Status "{1}" not valid for "{2}" request!
                            exceptionCode = "AE0008";
                            Global.throwException("AE0008", ["Order STC", input.message.OrderStatus, "Submit Order"]);
                      }

          //**********************************************************************************************************************
          //   SMR XXX_3 - Duplicate order management
                      var orderMessage = ds_ws.searchOrderMessageHomeByOrderNumber(input.message.OrderNumber);
                      if (orderMessage != null) {
                          // it performs all the check; if there is any error, it returns an array with the exception code and an array of values
                          var result = ds_ws.verifyDataForDuplicatedOrder(input, orderMessage);
                          if(result != null && result.length == 2) {
                              exceptionCode = result[0];
                              Global.throwException(result[0], result[1]);
                          }

                          ds_ws.generateOrderAckForChildOrders(input.message.OrderNumber);

                          var output = new DataStructure("ds_ws:submitOrderResponse");
                          output.returns.OrderAcknowledgement.OrderNumber = input.message.OrderNumber;
                          output.returns.OrderAcknowledgement.BusinessUnit = input.message.BusinessUnit;
                          output.returns.Failure.Status = "SUCCESS";

          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "OUTPUT FOR DuplicatedOrder: " + output.toXML() + "...");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");

                          return output;
                      }
                      else {
                          // nothing to do; continue with the usual workflow
                      }

          //**********************************************************************************************************************


                      orders = ds_ws.mapping_orderSTC_HOME(input);

                      if (orders != null && orders.length > 0) {
          //**********************************************************************************************************************
          //Change for TR508290 - Error on Completing Activation Task
                          var ot = orders[0].orderMessage.orderType;
                          if (ot == "C") {
                              for (var s = 0; s < orders.length; s++) {
                                  for (var p = 0; p < orders[s].serviceParametersList.length; p++) {
                                      var finput = new Document("ds_ws:SearchOrderTypeSvcTypeSvcNum");
                                      finput.serviceNumber = orders[s].serviceParametersList[p].serviceParameters.serviceNumber;
                                      finput.serviceType = orders[s].serviceParametersList[p].serviceParameters.serviceType;
                                      finput.orderType = "I";

                                      var foutput = Finder.runFinder("ds_ws:findSTCOrders_HOME","select",finput);

                                      if (foutput != null) {
                                          finput.serviceStatus = "COMPLETED";
                                          foutput = Finder.runFinder("ds_ws:findSTCOrders_HOME","select",finput);
                                          if (foutput == null) {
                                              exceptionCode = "AE0025";
                                              Global.throwException("AE0025", [finput.serviceNumber, finput.serviceType]);
                                          }
                                      }
                                  }
                              }
                          }
          //**********************************************************************************************************************

          //**********************************************************************************************************************
          //Change for Multiple Orders
                          if (!refTables.isStandardOrderType(ot)) {
                              if (!refTables.getSvcList(ot,orders)) {
                                  exceptionCode = "AE0024";
                                  Global.throwException("AE0024", ["Order STC", input.message.OrderType, "Submit Order"]);
                              }
                          }
          //**********************************************************************************************************************

          //**********************************************************************************************************************

                          if (ot == "I" || ot == "T") {
          // SMR 8956 - Check validation for ONTRequired
                              var smr8956Enabled = Global.getConfigVariable("SMR_8956_ENABLED", "N");

                              if(smr8956Enabled == "Y") {
                                  var nvPair_ONTRequired = "ONTRequired";

                                  // 2016/08/11 - process all orders and fix ONTRequired NV pair value according to new requirements
                                  orders = ds_ws.checkNVAndSetYesValueIfMissing(orders, nvPair_ONTRequired);
                              }



          // SMR 8532 - Check validation for Atheeb Account ID
                              var smr8532Enabled = Global.getConfigVariable("SMR_8532_ENABLED", "N");

                              if(smr8532Enabled == "Y") {
                                  var orderDomain = orders[0].orderMessage.orderDomain;
                                  if(orderDomain != null && orderDomain.toUpperCase() == 'IWBU') {
                                      var nvPair_AtheedAccountId = "Atheeb Account ID";
                                      exceptionCode = "AE0027";

                                      // get firstValueFound and validate correctness
                                      var firstValueFound = ds_ws.validateNVAndGetFirstValue(orders, nvPair_AtheedAccountId, false);
                                      if(firstValueFound == null) {
                                          exceptionCode = "AE0028";
                                          Global.throwException("AE0028", [nvPair_AtheedAccountId]);
                                      }

                                      if(! ds_ws.checkSameValueForNVInOrders(orders, nvPair_AtheedAccountId, firstValueFound)) {
                                          exceptionCode = "AE0029";
                                          Global.throwException("AE0029", [nvPair_AtheedAccountId]);
                                      }
                                      else {
                                          exceptionCode = null;
                                      }

                                      // add NV pair "Account ID " or set the value if null
                                      orders = ds_ws.setValueForNVPair(orders, nvPair_AtheedAccountId, firstValueFound);
                                  }
                              }
                          }
          //*************************************************************************************************************
          //    STCSUP-75 - Reject order if FTTx and Plate Id is not for Fiber

                          var plateIdChecked = new Array();
                          for (var s = 0; s < orders.length; s++){
                              for (var p = 0; p < orders[s].serviceParametersList.length; p++) {
                                  var serviceParameter = orders[s].serviceParametersList[p].serviceParameters;
                                  if(serviceParameter.serviceType.toUpperCase() == "FTTH_VOIP" ||
                                     serviceParameter.serviceType.toUpperCase() == "FTTH_IPTV" ||
                                     serviceParameter.serviceType.toUpperCase() == "FTTH_HSI") {

                                      var alreadyProcessed = false;
                                      for(var mm=0; mm<plateIdChecked.length; mm++) {
                                          if(plateIdChecked[mm] == serviceParameter.plateId) {
                                              alreadyProcessed = true;
                                          }
                                      }


                                      if(!alreadyProcessed) {
                                          plateIdChecked.push(serviceParameter.plateId);

                                          var isPlateIdCorrect = granite.checkIfPlateIdIsForFiber(serviceParameter.plateId);
                                          if(!isPlateIdCorrect) {
                                              exceptionCode = "AE0056";
                                              Global.throwException("AE0056", [serviceParameter.plateId, serviceParameter.serviceType, serviceParameter.serviceNumber]);
                                          }
                                      }
                                  }
                              }
                          }


                          for (var s = 0; s < orders.length; s++){

                                  var order = orders[s];
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "RUNNING VALIDATION ON THE STC ORDER [" + s + "] WITH ID: " + order.id + " AND ORDER# [" + order.orderMessage.orderNumber + "]...");
                                  validation = order.validate(10, true);
                                  if (validation != null) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "FOUND VALIDATIONS ERROR FOR ORDER STC WITH ID: " + order.id + " AND ORDER# [" + order.orderMessage.orderNumber + "]...");

                                        for (var j = 0; j < validation.length; j = j + 2) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "VALIDATION ERROR[" + j + "]: CODE '" + validation[j] + "' MESSAGE '" + validation[j + 1] + "'...");
                                              Global.logDebug(debug + "VALIDATION ERROR[" + j + "]: <'" + validation[j] + "', '" + validation[j + 1] + "'> FOR ORDER# [" + order.orderMessage.orderNumber + "]...");
                                        }

                                        var errorMessage = "";
                                        if(validation.length > 1) {
                                              errorMessage = (validation[1] == null ? validation[0] : validation[1]);
                                        }
                                        else if(validation.length > 0) {
                                              errorMessage = validation[0];
                                        }

                                        // Customized exception AE0003:
                                        // - Validation errors found while processing "{0}" with id. "{1}": {2}!
                                        Global.throwException("AE0003", ["Order STC", order.orderMessage.orderNumber, errorMessage]);
                                  }
                                  // Modified the 09.10.2008:
                                  // - according to mail of Mick Winters
                                  // ["RE: Additional functionality for Expediter passthrough", Thu 10/9/2008 12:52 PM]
                                  order.orderMessage.internalOrderStatus = "Order Received";
                                  order.save();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "ORDER MADE PERSISTENT ON THE DB...");
                            }
                      }
                      else{
                            // Customized exception AE0004:
                            // - Inconsistent environment: "{0}" with Order # "{1}" not found!
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "ORDER NOT MADE PERSISTENT ON THE DB...");
                            exceptionCode = "AE0004";
                            Global.throwException("AE0004", ["Order STC", input.message.OrderNumber]);
                      }
                }
                catch(exc){
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "CATCHED ERROR MAKING THE RECEIVED ORDER " + input.message.OrderNumber + " PERSISTENT ON THE DB [" + exc.message + "]...");
                      Global.logDebug("<SUBMIT ORDER HOME> WITH 'ORDER #': '" + input.message.OrderNumber + "' NOT STORED... CATCHED ERROR [" + exc.message + "]...");

                      var excMessage = exc.message;
                      if(excMessage.indexOf("java.sql.SQLIntegrityConstraintViolationException: ORA-00001:") >= 0) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "ERROR CONTAINS UNIQUE_KEY ERROR for Order " + input.message.OrderNumber + "!!! Check IT!!! [" + excMessage + "]...");

                                  // it means the order already exists in WD DB, so returning the error of duplicated
                                  excMessage = Global.translateText("AE0001", null, null);
                                  exceptionCode = "AE0001";
                          }

                      // Modified the 23.06.2009:
                      // - delete the order currently created for the Submit Order request
                      if (orders != null && orders.length > 0) {
                            for (var s = 0; s < orders.length; s++){
                                  var order = orders[s];

                                  if (order.isStored) {
                                        var orderNumber = order.orderMessage.orderNumber;
                                        order.deleteOrder();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER CURRENTLY CREATED [ORDER #: " + orderNumber + "] HAS BEEN DELETED FROM THE DB...");
                                  }
                            }
                      }

                      // Creation of the response message:
                      // - setting values for a customized exception on Expediter
                      output = new DataStructure("ds_ws:submitOrderResponse");
                      output.returns.OrderAcknowledgement.OrderNumber = input.message.OrderNumber;
                      output.returns.OrderAcknowledgement.BusinessUnit = input.message.BusinessUnit;
                      if (validation != null) {
                            var exceptionMessage = "";
                            for (var j = 0; j < validation.length; j = j + 2) {
                                  exceptionMessage = exceptionMessage + "[CODE '" + validation[j] + "' MESSAGE '" + validation[j + 1] + "']";
                                  exceptionCode = ((exceptionCode != null && exceptionCode != "") ? (exceptionCode + ";" + validation[j]) : (validation[j]));
                            }
                            output.returns.Failure.ErrorDescription = exceptionMessage;
                      }
                      else{
                            output.returns.Failure.ErrorDescription = excMessage;
                      }

                      if(exceptionCode == null || exceptionCode.trim().length == 0) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER CURRENTLY CREATED [ORDER #: " + orderNumber + "] HAS no exception code...");
                          // extract the code from the excMessage;
                          var errorMsgStart = excMessage.indexOf("AE00");
                          if(errorMsgStart >0) {
                              exceptionCode = excMessage.substr(errorMsgStart, 6);
                          }
                          else {
                              exceptionCode = "AE9999";
                          }
                      }

                      output.returns.Failure.ErrorCode = exceptionCode;
                      output.returns.Failure.ErrorTime = ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS();
                      output.returns.Failure.FunctionName = "SUBMIT ORDER";
                      output.returns.Failure.ObjectId = input.message.OrderNumber;
                      output.returns.Failure.Status = "ERROR";
                      output.returns.Failure.SystemName = "EXPEDITER";
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "OUTPUT: " + output + "...");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");

                      // Modified on 05.01.2009:
                      // - add the 'Order #' to the CWMESSAGELOG table in the USER_DATA1;
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Adding UserData_1 = " + input.message.OrderNumber + " to id = " + logMsgId);
                      UserProfile.setMsgLogData(input.message.OrderNumber, null, null, logMsgId);

                      return output;
                }

                // Modified on 05.01.2009:
                // - add the 'Order #' to the CWMESSAGELOG table in the USER_DATA1;
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Adding UserData_1 = " + input.message.OrderNumber + " to id = " + logMsgId);
                UserProfile.setMsgLogData(input.message.OrderNumber, null, null, logMsgId);



                // Modified on 23.06.2009:
                // - if all of the child orders are rejected from Granite then the whole request is rejected
                var rejectRequest = true;
                var sendErrorMessage = false;
                var childOrderOutputDoc = null;

                // Perform the call against Granite for each order (except the Father one)
                if (orders != null && orders.length > 0) {

                      // Modified on 06.07.2009:
                      // - according to mail from I. Ansari Sun 05/07/2009 12:39 PM
                      // - true, the lenght of the orders array is equal to 2 (just 1 child)
                      // - false, the lenght is different from 2 (more children)
                      sendErrorMessage = (orders.length == 2);

                      // note: starts from 1 because 0 is the parent order, >=1 are child orders
                      for (var s = 1; s < orders.length; s++){
                            var order = orders[s];

                            // Modified the 09.10.2008:
                            // - according to mail of Mick Winters
                            // ["RE: Additional functionality for Expediter passthrough", Thu 10/9/2008 12:52 PM]
                            order.orderMessage.internalOrderStatus = "Waiting for Granite Response";
                            order.save();

          //                  Global.commitTransaction("ORDER");


                            var pid = Process.startProcess("processSTC:mainSTCProcess", order.id);
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Started Process with pid " + pid);

                            Global.commitTransaction("ORDER");

                            var countSleeping = 0;

                            var processCompleted = false;
                            while(!processCompleted) {
                                  processSTC.timeDelay("GRANITE_RESPONSE_DELAY_TIME");
                                  processCompleted = processSTC.checkIfProcessIsCompleted(pid);
                                  countSleeping++;
                            }

                            // reload the order because modified by the process
                            var cworderId = order.id;
                            order = Order.getOrderById(cworderId);

                            if (order.orderACK.Status == "SUCCESS") {
                                  // Modified the 09.10.2008:
                                  // - according to mail of Mick Winters
                                  // ["RE: Additional functionality for Expediter passthrough", Thu 10/9/2008 12:52 PM]
                                  order.orderMessage.internalOrderStatus = "Granite Call SUCCESSFUL";
                                  order.orderMessage.circuitStatus = "ORDERED";
                                  order.orderMessage.orderStatus = "READY";
                                  order.orderMessage.inHold = false;
                                  order.save();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + "<SUBMIT ORDER HOME[" + s +  "]> WITH 'ORDER #': '" + order.orderMessage.orderNumber + "' WORKED CORRECTLY!");
                                  Global.logDebug("<SUBMIT ORDER HOME[" + s +  "]> WITH 'ORDER #': '" + order.orderMessage.orderNumber + "' WORKED CORRECTLY!");

                                  rejectRequest = false;
                            }
                            else{
                                  // Modified the 09.10.2008:
                                  // - according to mail of Mick Winters
                                  // ["RE: Additional functionality for Expediter passthrough", Thu 10/9/2008 12:52 PM]
                                  order.orderMessage.internalOrderStatus = "Order Rejected By Granite";
                                  order.orderMessage.inHold = true;
                                  order.save();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + "<SUBMIT ORDER HOME[" + s +  "]> WITH 'ORDER #': '" + order.orderMessage.orderNumber + "' STORED... Order Rejected By Granite [" + order.orderACK.ErrorDescription + "]...");
                                  Global.logDebug("<SUBMIT ORDER HOME[" + s +  "]> WITH 'ORDER #': '" + order.orderMessage.orderNumber + "' STORED... Order Rejected By Granite [" + order.orderACK.ErrorDescription + "]...");

                // *** SENDING WOSU ***********************************************************************************************************
                                  var sps = order.serviceParametersList;
                                  if (sps != null && sps.count > 0) {
                                        for (var ll = 0; ll < sps.count; ll++){

          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "SENDING WOSU FOR: SERVICE #[" + sps[ll].serviceParameters.serviceNumber + "], SERVICE TYPE[" + sps[ll].serviceParameters.serviceType + "]...");
                                              var inputSOAP_WOSU = new DataStructure("ifEAI_WOSU_17122008:WorkOrderStatusUpdate");
                                              var outputSOAP_WOSU = null;

                                              // - mapping the input JMS message vs. input SOAP message
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.BusinessUnit             = order.orderMessage.businessUnit;
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.ICMSTaskID             = order.orderMessage.icmsSONumber;
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.OrderType                   = order.orderMessage.orderType;
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.OrderNumber             = order.orderMessage.parentOrderNumber;
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.WorkOrder                   = order.orderMessage.parentOrderNumber;
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.WorkOrderStatus       = "REJECTED";
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.WorkOrderRemarks   = order.orderACK.ErrorDescription;
                                              // Modified on 09.02.2008:
                                              // - management of 4 more attributes for WOSU message to EAI
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.TaskServiceNumber       = sps[ll].serviceParameters.serviceNumber;
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.TaskServiceStatus       = "REJECTED";
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.TaskServiceType       = sps[ll].serviceParameters.serviceType;
                                              try {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INVOKING WOSU INTERFACE...");
                                                    // Modified on 11.08.2008:
                                                    // - the Circuit Number is updated with the value generated on XNG (for FTTH service)
                                                    outputSOAP_WOSU = ifEAI_WOSU_17122008.invokeEAIIF_WorkOrderStatusUpdate(inputSOAP_WOSU, null, false, order.orderMessage.parentOrderNumber, sps[ll].serviceParameters.orderRowItemID);
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "RESULT WOSU: " + (outputSOAP_WOSU != null && outputSOAP_WOSU.length == 1 ? outputSOAP_WOSU[0].toXML() : "") + "...");
                                              }
                                              catch (exc){
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "EXCEPTION WOSU: " + exc);
                                              }
                                        }
                                  } // end if(sps)

                                  childOrderOutputDoc = order.orderACK;
                            }
                      } // End cycling on orders[i]...
                }

                if (!rejectRequest) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " REJECT REQUEST: FALSE, EXPEDITER KEEPS THE ORDERS...");
                      output = new DataStructure("ds_ws:submitOrderResponse");
                      output.returns.OrderAcknowledgement.OrderNumber = input.message.OrderNumber;
                      output.returns.OrderAcknowledgement.BusinessUnit = input.message.BusinessUnit;
                      output.returns.Failure.Status = "SUCCESS";
                }
                else{
                      // it means no child order has been accepted by Granite
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " REJECT REQUEST: TRUE, EXPEDITER REMOVES THE ORDERS...");
                      // Modified the 23.06.2009:
                      // - delete the order currently created for the Submit Order request
                      if (orders != null && orders.length > 0) {
                            for (var s = 0; s < orders.length; s++){
                                  var order = orders[s];
                                  if (order.isStored) {
                                        var orderNumber = order.orderMessage.orderNumber;
                                        order.deleteOrder();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER CURRENTLY CREATED [ORDER #: " + orderNumber + "] HAS BEEN DELETED FROM THE DB...");
                                  }
                            }
                      }

                      // Creation of the response message:
                      // - setting values for a customized exception on Expediter
                      output = new DataStructure("ds_ws:submitOrderResponse");
                      output.returns.OrderAcknowledgement.OrderNumber = input.message.OrderNumber;
                      output.returns.OrderAcknowledgement.BusinessUnit = input.message.BusinessUnit;
                      output.returns.Failure.ErrorTime = ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS();
                      output.returns.Failure.FunctionName = "SUBMIT ORDER";
                      output.returns.Failure.ObjectId = input.message.OrderNumber;
                      output.returns.Failure.Status = "ERROR";
                      output.returns.Failure.SystemName = "EXPEDITER";
                      if (sendErrorMessage) {
                            // it fills this session only if there is only 1 child order
                            if (childOrderOutputDoc != null) {
                                  output.returns.Failure.ErrorCode = childOrderOutputDoc.ErrorCode;
                                  output.returns.Failure.ErrorDescription = childOrderOutputDoc.ErrorDescription;
                                  output.returns.Failure.ErrorType = childOrderOutputDoc.ErrorType;
                                  output.returns.Failure.ProcessInstanceld = childOrderOutputDoc.ProcessInstanceld;
                                  output.returns.Failure.SourceErrorCode = childOrderOutputDoc.SourceErrorCode;
                                  output.returns.Failure.TargetRecored = childOrderOutputDoc.TargetRecored;
                                  output.returns.Failure.UserId = childOrderOutputDoc.UserId;
                                  output.returns.Failure.SystemName = childOrderOutputDoc.SystemName;
                            }
                            else{
                                  output.returns.Failure.ErrorDescription = Global.translateText("AE0005", null, [input.message.OrderNumber]);
                            }
                      }
                }
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "OUTPUT: " + output.toXML() + "...");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");

                return output;
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_UpdateOrder" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          var debug = "[[3] BINDING FOR EXPEDITER INTERFACE [JAVASCRIPT]: UPDATE ORDER - HOME] ";
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "START...");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INPUT: " + (input != null ? input.toXML() : "NULL") + "...");

                var logMsgId = UserProfile.getMsgLogId();

                var output = null;
                // Modified the 07.10.2008:
                // - logic to make the order persistent on the DB
                var orders = null;
                var validation = null;
                var exceptionCode = "";
                var considerOld = false;

                try {

                      if (input.message.BusinessUnit.toUpperCase() != "HOME"){
                            // Customized exception AE0014:
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " BUSINESS UNIT '" + input.message.BusinessUnit + "' IS NOT VALID FOR THIS SERVICE...");
                            // - Inconsistent request: this service can be invoked only with "{0}" orders!
                            exceptionCode = "AE0014";
                            Global.throwException("AE0014", ["HBU"]);
                      }

                      // Modified on 12.10.2008:
                      // - if in this list it's OK!!!!
                      if (input.message.OrderStatus.toUpperCase() == "ACTIVATE" ||
                            input.message.OrderStatus.toUpperCase() == "CANCEL" ||
                            input.message.OrderStatus.toUpperCase() == "REVISE"){

                            // DO NOTHING...
                      }
                      // - if either Order Status is empty or is equal to "New" then an exception is raised
                      else if (input.message.OrderStatus == null ||
                                   input.message.OrderStatus.toUpperCase() == "NEW"){

                            // Customized exception AE0008:
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER STATUS IS NOT VALID FOR UPDATE ORDER REQUEST...");
                            // - Inconsistent request: "{0}" with Order Status "{1}" not valid for "{2}" request!
                            exceptionCode = "AE0008";
                            Global.throwException("AE0008", ["Order STC", input.message.OrderStatus, "Update Order"]);
                      }
                      else{

                            // Customized exception AE0008:
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER STATUS IS NOT VALID FOR UPDATE ORDER REQUEST...");
                            // - Inconsistent request: "{0}" with Order Status "{1}" not valid for "{2}" request!
                            exceptionCode = "AE0008";
                            Global.throwException("AE0008", ["Order STC", input.message.OrderStatus, "Update Order"]);
                      }

                      // 2016-06-15: added validation to check that the received updateOrder contains, at least, all the services of the previous received order

                      // storing into the array all the info related to the serviceParameters received now
                      var arrayOfReceivedServiceInfo = null;
                      if(input.message.ServiceParameters != null) {
                          arrayOfReceivedServiceInfo = new Array(input.message.ServiceParameters.length);
                          for (var j = 0; j < input.message.ServiceParameters.length; j++) {
                              var sp = input.message.ServiceParameters[j];
                              arrayOfReceivedServiceInfo[j] = (sp.ServiceNumber + "#" + sp.PlateID + "#" + sp.ServiceType);
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " Adding to 'arrayOfReceivedServiceInfo[" + j + "] = " + arrayOfReceivedServiceInfo[j]);
                          }
                      }

                      var existingParentOrderHeader = ds_ws.searchOrderMessageHomeByOrderNumber(input.message.OrderNumber);
                      if(existingParentOrderHeader == null) {
                          exceptionCode = "AE0004";
                          Global.throwException("AE0004", ["Order STC", input.message.OrderNumber]);
                      }
                      var existingParentOrder = Order.getOrderById(existingParentOrderHeader.orderId);
                      if(existingParentOrder == null) {
                          exceptionCode = "AE0004";
                          Global.throwException("AE0004", ["Order STC", input.message.OrderNumber]);
                      }

                      if(existingParentOrder.serviceParametersList != null && existingParentOrder.serviceParametersList.length > 0) {
                          if(arrayOfReceivedServiceInfo == null) {
                              // in this case the received order has no service parameters but the existing parent order has service parameters
                              exceptionCode = "AE0030";
                              Global.throwException("AE0030", [input.message.OrderNumber, existingParentOrder.serviceParametersList.length, "0"]);
                          }

                          if(existingParentOrder.serviceParametersList.length > arrayOfReceivedServiceInfo.length) {
                              // in this case the received order has no service parameters but the existing parent order has service parameters
                              exceptionCode = "AE0030";
                              Global.throwException("AE0030", [input.message.OrderNumber, existingParentOrder.serviceParametersList.length, "" + arrayOfReceivedServiceInfo.length]);
                          }


                          for (var j = 0; j < existingParentOrder.serviceParametersList.length; j++) {
                              var sp = existingParentOrder.serviceParametersList[j].serviceParameters;
                              var spData = sp.serviceNumber + "#" + sp.plateId + "#" + sp.serviceType;
                              var found = false;
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " Checking serviceParametersList[" + j + "] = " + spData);

                              for (var l = 0; l < arrayOfReceivedServiceInfo.length && !found; l++) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " Comparing with = " + arrayOfReceivedServiceInfo[l]);
                                  if(arrayOfReceivedServiceInfo[l].equals(spData)) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " Found!!!!");
                                      found = true;
                                      arrayOfReceivedServiceInfo[l] = "-1";
                                  }
                              }

                              if(!found) {
                                  exceptionCode = "AE0031";
                                  Global.throwException("AE0031", [input.message.OrderNumber, sp.serviceNumber, sp.plateId, sp.serviceType]);
                              }
                          }
                      }


                      var childOrderMessageArray = ds_ws.searchOrderMessageHomeByParentOrderNumber(input.message.OrderNumber);
                      if (childOrderMessageArray != null && childOrderMessageArray.length > 0) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " FOUND " + childOrderMessageArray.length + " CHILD ORDERS IN THE DB FOR ORDER " + input.message.OrderNumber);

                            for(var i=0; i<childOrderMessageArray.length; i++) {
                                  var previousOrder = Order.getOrderById(childOrderMessageArray[i].orderId);
                                  if(previousOrder != null) {
                                        if(previousOrder.hasDocuments("ds_ws:OrderAcknowledgementWithFailureDoc")) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " CHILD ORDER " + childOrderMessageArray[i].orderId + " FOR ORDER " + input.message.OrderNumber + " has OrderACK document...");
                                              if(previousOrder.orderACK.Status == null) {    // "SUCCESS") {
                                                    exceptionCode = "AE0018";
                                                    Global.throwException("AE0018", [input.message.OrderNumber]);
                                              }
                                        }
                                        else {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " CHILD ORDER " + childOrderMessageArray[i].orderId + " FOR ORDER " + input.message.OrderNumber + " doesn't have OrderACK document...");

                                              // order doesn't have leaf OrderACK, searching for the process (it could be an "old" order)
                                              var inputDocForQuery = new Document("cwf_pm:ProcessSearch");
                                              inputDocForQuery.ORDER_ID = childOrderMessageArray[i].cwOrderId;

                                              var processFinder = Finder.runFinder("cwf_pm:ProcessFinder", "select",  inputDocForQuery);
                                              if (processFinder != null && processFinder.size > 0) {
                                                    if(processFinder.start.STATUS != 3 && processFinder.start.STATUS != 6) {
                                                          // it means there is at least a process that is managing the order
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " FOUND at least one process that is managing CHILD ORDER " + childOrderMessageArray[i].orderId  + " with status " + processFinder.start.STATUS + "...");
                                                          exceptionCode = "AE0018";
                                                          Global.throwException("AE0018", [input.message.OrderNumber]);
                                                    }
                                              }
                                        }
                                  }
                            }
                      }

                      if(input.message.OrderStatus.toUpperCase() == "CANCEL") {
                          // checking if WD already received a Cancel for the order
                          var existingParentOrder = ds_ws.searchOrderMessageHomeByOrderNumber(input.message.OrderNumber);
                          if(existingParentOrder != null) {
                              var previousOrder = Order.getOrderById(existingParentOrder.orderId);
                              if(previousOrder.orderMessage.alreadyCancelled == true) {
                                  exceptionCode = "AE0026";
                                  Global.throwException("AE0026", [input.message.OrderNumber]);
                              }
                          }
                      }

          //**********************************************************************************************************************
          //    Deleting old orders

                      var previousOrderMessage = ds_ws.searchOrderMessageHomeByOrderNumber(input.message.OrderNumber + "_OLD");
                      if (previousOrderMessage != null) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS ORDER MESSAGE [ORDER #: " + input.message.OrderNumber + "] FOUND IN THE DB; REMOVING IT");
                          var parentOrderOld = Order.getOrderById(previousOrderMessage.orderId);
                          parentOrderOld.deleteOrder();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS ORDER MESSAGE [ORDER #: " + input.message.OrderNumber + "] DELETED...");

                          // delete the children of the previous order
                          var childrenOrderMessage = ds_ws.searchOrderMessageHomeByParentOrderNumber(input.message.OrderNumber + "_OLD");
                          if (childrenOrderMessage != null){
                              for (var a = 0; a < childrenOrderMessage.length; a++) {
                                  var childOrderOld = Order.getOrderById(childrenOrderMessage[a].orderId);
                                  childOrderOld.deleteOrder();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS CHILD ORDER MESSAGE [ORDER #: " + childrenOrderMessage[a].orderNumber + "] DELETED...");
                              }
                          }
                      }
                      else {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS ORDER MESSAGE [ORDER #: " + input.message.OrderNumber + "] NOT FOUND IN THE DB");
                      }

          //**********************************************************************************************************************

                      considerOld = true;
                      orders = ds_ws.mapping_orderSTC_HOME(input);
                      var ordersToGranite = null;
                      if (orders != null && orders.length > 0) {

          //**********************************************************************************************************************
                          var ot = orders[0].orderMessage.orderType;
                          if (ot == "I" || ot == "T") {

          // SMR 8956 - Check validation for ONTRequired
                              var smr8956Enabled = Global.getConfigVariable("SMR_8956_ENABLED", "N");

                              if(smr8956Enabled == "Y") {
                                  var nvPair_ONTRequired = "ONTRequired";

                                  // 2016/08/11 - process all orders and fix ONTRequired NV pair value according to new requirements
                                  orders = ds_ws.checkNVAndSetYesValueIfMissing(orders, nvPair_ONTRequired);
                              }




          // SMR 8532 - Check validation for Atheeb Account ID
                              var smr8532Enabled = Global.getConfigVariable("SMR_8532_ENABLED", "N");

                              if(smr8532Enabled == "Y") {
                                  var orderDomain = orders[0].orderMessage.orderDomain;
                                  if(orderDomain != null && orderDomain.toUpperCase() == 'IWBU') {
                                      var nvPair_AtheedAccountId = "Atheeb Account ID";
                                      exceptionCode = "AE0027";

                                      // get firstValueFound and validate correctness
                                      var firstValueFound = ds_ws.validateNVAndGetFirstValue(orders, nvPair_AtheedAccountId, false);
                                      if(firstValueFound == null) {
                                          exceptionCode = "AE0028";
                                          Global.throwException("AE0028", [nvPair_AtheedAccountId]);
                                      }

                                      if(! ds_ws.checkSameValueForNVInOrders(orders, nvPair_AtheedAccountId, firstValueFound)) {
                                          exceptionCode = "AE0029";
                                          Global.throwException("AE0029", [nvPair_AtheedAccountId]);
                                      }
                                      else {
                                          exceptionCode = null;
                                      }

                                      // add NV pair "Account ID " or set the value if null
                                      orders = ds_ws.setValueForNVPair(orders, nvPair_AtheedAccountId, firstValueFound);
                                  }
                              }
                          }
          //*************************************************************************************************************
          //    STCSUP-75 - Reject order if FTTx and Plate Id is not for Fiber

                          var plateIdChecked = new Array();
                          for (var s = 0; s < orders.length; s++){
                              for (var p = 0; p < orders[s].serviceParametersList.length; p++) {
                                  var serviceParameter = orders[s].serviceParametersList[p].serviceParameters;
                                  if(serviceParameter.serviceType.toUpperCase() == "FTTH_VOIP" ||
                                     serviceParameter.serviceType.toUpperCase() == "FTTH_IPTV" ||
                                     serviceParameter.serviceType.toUpperCase() == "FTTH_HSI") {

                                      var alreadyProcessed = false;
                                      for(var mm=0; mm<plateIdChecked.length; mm++) {
                                          if(plateIdChecked[mm] == serviceParameter.plateId) {
                                              alreadyProcessed = true;
                                          }
                                      }


                                      if(!alreadyProcessed) {
                                          plateIdChecked.push(serviceParameter.plateId);

                                          var isPlateIdCorrect = granite.checkIfPlateIdIsForFiber(serviceParameter.plateId);
                                          if(!isPlateIdCorrect) {
                                              exceptionCode = "AE0056";
                                              Global.throwException("AE0056", [serviceParameter.plateId, serviceParameter.serviceType, serviceParameter.serviceNumber]);
                                          }
                                      }
                                  }
                              }
                          }

                          ordersToGranite = new Array();
                          for (var s = 0; s < orders.length; s++){
                              var order = orders[s];
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "VALIDATING ORDER WITH ORDER #: " + order.orderMessage.orderNumber + "...");
                              validation = order.validate(10, true);
                              if (validation != null) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "FOUND VALIDATIONS ERROR FOR ORDER STC WITH ID: " + order.id + " AND ORDER# [" + order.orderMessage.orderNumber + "]...");

                                  for (var j = 0; j < validation.length; j = j + 2) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "VALIDATION ERROR[" + j + "]: CODE '" + validation[j] + "' MESSAGE '" + validation[j + 1] + "'...");
                                      Global.logDebug(debug + "VALIDATION ERROR[" + j + "]: <'" + validation[j] + "', '" + validation[j + 1] + "'> FOR ORDER# [" + order.orderMessage.orderNumber + "]...");
                                  }

                                  var errorMessage = "";
                                  if(validation.length > 1) {
                                      errorMessage = (validation[1] == null ? validation[0] : validation[1]);
                                  }
                                  else if(validation.length > 0) {
                                      errorMessage = validation[0];
                                  }
                                  // Customized exception AE0003:
                                  // - Validation errors found while processing "{0}" with id. "{1}": {2}!
                                  exceptionCode = "AE0003";
                                  Global.throwException("AE0003", ["Order STC", order.orderMessage.orderNumber, errorMessage]);
                              }

                              // Modified the 09.10.2008:
                              // - according to mail of Mick Winters
                              // ["RE: Additional functionality for Expediter passthrough", Thu 10/9/2008 12:52 PM]
                              order.orderMessage.internalOrderStatus = "Order Received";
                              order.save();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "ORDER MADE PERSISTENT ON THE DB...");
          //                        Global.logDebug("<UPDATE ORDER> WITH 'ORDER #': '" + input.message.OrderNumber + "', 'ORDER STATUS': '" + input.message.OrderStatus + "' WORKED CORRECTLY!");

                              // Check on the Order Status to verify if the request must be pushed toward Granite:
                              // - the status should be 'Revise', 'Cancel', 'Activate'
                              if (order.orderMessage.toBeSending){
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER [ORDER #: " + order.orderMessage.orderNumber + "] PUSHED TOWARD GRANITE, THE ORDER STATUS IS '" + order.orderMessage.orderStatus + "'...");
                                  ordersToGranite[ordersToGranite.length] = order;
                              }
                              else{
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER [ORDER #: " + order.orderMessage.orderNumber + "] NOT PUSHED TOWARD GRANITE, THE ORDER STATUS IS '" + order.orderMessage.orderStatus + "'...");
                              }
                          }
                      }
                      else{
                            // Customized exception AE0004:
                            // - Inconsistent environment: "{0}" with Order # "{1}" not found!
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "ORDER NOT MADE PERSISTENT ON THE DB...");
                            exceptionCode = "AE0004";
                            Global.throwException("AE0004", ["Order STC", input.message.OrderNumber]);
                      }
                }
                catch(exc){
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "CATCHED ERROR MAKING THE RECEIVED ORDER " + input.message.OrderNumber + " PERSISTENT ON THE DB [" + exc.message + "]...");
                      Global.logDebug("<UPDATE ORDER> WITH 'ORDER #': '" + input.message.OrderNumber + "' NOT UPDATED... CATCHED ERROR [" + exc.message + "]...");

                      var excMessage = exc.message;
                      if(excMessage.indexOf("java.sql.SQLIntegrityConstraintViolationException: ORA-00001:") >= 0) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "ERROR CONTAINS UNIQUE_KEY ERROR for Order " + input.message.OrderNumber + "!!! Check IT!!! [" + excMessage + "]...");

                            // it means the order already exists in WD DB, so returning the error of duplicated
                            excMessage = Global.translateText("AE0001", null, null);
                            exceptionCode = "AE0001";
                      }


                      // Modified the 04.11.2008:
                      // - delete the order currently created for the Update Order request
                      if (orders != null && orders.length > 0) {
                            for (var s = 0; s < orders.length; s++){
                                  var order = orders[s];

                                  if (order.isStored) {
                                        try {
                                            var orderNumber = order.orderMessage.orderNumber;
                                            order.deleteOrder();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER CURRENTLY CREATED [ORDER #: " + orderNumber + "] HAS BEEN DELETED FROM THE DB...");
                                        }
                                        catch(exc){
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "CATCHED ERROR IN ROLLBACK WHILE DELETING THE RECEIVED ORDER " + input.message.OrderNumber + " [" + exc.message + "]...");
                                        }
                                  }
                            }
                      }

                      if(considerOld) {
                            var children = ds_ws.searchOrderMessageHomeByParentOrderNumber(input.message.OrderNumber);
                            if (children != null){
                                  for (var a = 0; a < children.length; a++) {
                                        var child = children[a];

                                        var order = Order.getOrderById(child.cwOrderId);

                                        if (order != null && order.isStored) {
                                            try {
                                               var orderNumber = order.orderMessage.orderNumber;
                                               order.deleteOrder();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER CURRENTLY CREATED [ORDER #: " + orderNumber + "] HAS BEEN DELETED FROM THE DB...");
                                            }
                                            catch(exc){
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "CATCHED ERROR IN ROLLBACK WHILE DELETING THE RECEIVED ORDER " + input.message.OrderNumber + " [" + exc.message + "]...");
                                            }
                                        }
                                  }
                            }

                            // - restore the previous order
                            var previousOrderMessage = ds_ws.searchOrderMessageHomeByOrderNumber(input.message.OrderNumber + "_OLD");
                            if (previousOrderMessage != null) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS ORDER MESSAGE [ORDER #: " + input.message.OrderNumber + "] FOUND IN THE DB...");
                                  try {
                                      previousOrderMessage.orderNumber = input.message.OrderNumber;
                                      previousOrderMessage.save();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS ORDER MESSAGE [ORDER #: " + input.message.OrderNumber + "] RESTORED IN THE DB...");

                                      // - restore the children of the previous order (modify the Parent Order #)
                                      var children = ds_ws.searchOrderMessageHomeByParentOrderNumber(input.message.OrderNumber + "_OLD");
                                      if (children != null){
                                          for (var a = 0; a < children.length; a++) {
                                              var child = children[a];
                                              child.orderNumber = child.orderNumber.substr(0, child.orderNumber.length - 4);
                                              child.parentOrderNumber = input.message.OrderNumber;
                                              child.save();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS CHILD ORDER MESSAGE [ORDER #: " + child.orderNumber + "] RESTORED IN THE DB...");
                                          }
                                      }
                                  }
                                  catch(exc){
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "CATCHED ERROR IN ROLLBACK WHILE RESTORING THE ORIGINAL ORDER " + input.message.OrderNumber + " [" + exc.message + "]...");
                                  }
                            }
                      }

                      // Creation of the response message:
                      // - setting values for a customized exception on Expediter
                      output = new DataStructure("ds_ws:updateOrderResponse");
                      output.returns.OrderAcknowledgement.OrderNumber = input.message.OrderNumber;
                      output.returns.OrderAcknowledgement.BusinessUnit = input.message.BusinessUnit;
                      if (validation != null) {
                            var exceptionMessage = "";
                            for (var j = 0; j < validation.length; j = j + 2) {
                                  exceptionMessage = exceptionMessage + "[CODE '" + validation[j] + "' MESSAGE '" + validation[j + 1] + "']";
                                  exceptionCode = ((exceptionCode != null && exceptionCode != "") ? (exceptionCode + ";" + validation[j]) : (validation[j]));
                            }
                            output.returns.Failure.ErrorDescription = exceptionMessage;
                      }
                      else{
                            output.returns.Failure.ErrorDescription = excMessage;
                      }

                      if(exceptionCode == null || exceptionCode.trim().length == 0) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER CURRENTLY CREATED [ORDER #: " + input.message.OrderNumber + "] HAS no exception code...");
                          // extract the code from the excMessage;
                          var errorMsgStart = excMessage.indexOf("AE00");
                          if(errorMsgStart >0) {
                              exceptionCode = excMessage.substr(errorMsgStart, 6);
                          }
                          else {
                              exceptionCode = "AE9999";
                          }
                      }

                      output.returns.Failure.ErrorCode = exceptionCode;
                      output.returns.Failure.ErrorTime = ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS();
                      output.returns.Failure.FunctionName = "UPDATE ORDER";
                      output.returns.Failure.ObjectId = input.message.OrderNumber;
                      output.returns.Failure.Status = "ERROR";
                      output.returns.Failure.SystemName = "EXPEDITER";
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "OUTPUT: " + output + "...");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");

                      // Modified on 05.01.2009:
                      // - add the 'Order #' to the CWMESSAGELOG table in the USER_DATA1;
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Adding UserData_1 = " + input.message.OrderNumber + " to id = " + logMsgId);
                      UserProfile.setMsgLogData(input.message.OrderNumber, null, null, logMsgId);

                      return output;
                }

                // Modified on 05.01.2009:
                // - add the 'Order #' to the CWMESSAGELOG table in the USER_DATA1;
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Adding UserData_1 = " + input.message.OrderNumber + " to id = " + logMsgId);
                UserProfile.setMsgLogData(input.message.OrderNumber, null, null, logMsgId);

                // Modified on 23.06.2009:
                // - if all of the child orders are rejected from Granite then the whole request is rejected
                var rejectRequest = true;
                var sendErrorMessage = false;
                var childOrderOutputDoc = null;

                // Perform the call against Granite for each order (except the Father one)
                if (ordersToGranite != null && ordersToGranite.length > 0) {

                      // Modified on 06.07.2009:
                      // - according to mail from I. Ansari Sun 05/07/2009 12:39 PM
                      // - true, the lenght of the orders array is equal to 2 (just 1 child)
                      // - false, the lenght is different from 2 (more children)
                      sendErrorMessage = (ordersToGranite.length == 2);

                      // note: starts from 1 because 0 is the parent order, >=1 are child orders
                      for (var s = 1; s < ordersToGranite.length; s++){
                            var order = ordersToGranite[s];

                            var isDisconnect = false;

                            // Check the status of the request:
                            // - if cancel and the old child order is completed then Expediter has to send a Disconnect
                            var previousOrderMessage = ds_ws.searchOrderMessageHomeByOrderNumber(order.orderMessage.orderNumber + "_OLD");
                            if (previousOrderMessage != null) {
                                  if (previousOrderMessage.orderStatus.toUpperCase() == "COMPLETED" &&
                                        order.orderMessage.orderStatus.toUpperCase() == "CANCEL"){
                                        isDisconnect = true;
                                        order.orderMessage.orderType = "D";
                                        order.orderMessage.orderStatus = "New";
                                        order.orderMessage.orderNumber = ds_ws.common_executeFunction_UniqueOrderNumber("XNG PRODUCTION [USER:STC_TARGET2]",
                                                                                                                                                                   order.orderMessage.orderType,
                                                                                                                                                                   "CW");
                                        order.save();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "THE PREVIOUS ORDER WAS COMPLETED, SO GENERATED A 'DISCONNECT' WITH NEW ORDER # [" + order.orderMessage.orderNumber + "]...");
                                  }
                            }

                            // Modified the 09.10.2008:
                            // - according to mail of Mick Winters
                            // ["RE: Additional functionality for Expediter passthrough", Thu 10/9/2008 12:52 PM]
                            order.orderMessage.internalOrderStatus = "Waiting for Granite Response";
                            order.save();

          //                  Global.commitTransaction("ORDER");


                            var pid = Process.startProcess("processSTC:mainSTCProcess", order.id);
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Started Process with pid " + pid);

                            Global.commitTransaction("ORDER");

                            var countSleeping = 0;

                            var processCompleted = false;
                            while(!processCompleted) {
                                  processSTC.timeDelay("GRANITE_RESPONSE_DELAY_TIME");
                                  processCompleted = processSTC.checkIfProcessIsCompleted(pid);
                                  countSleeping++;
                            }
                                              var processCompleted = false;


                            // reload the order because modified by the process
                            var cworderId = order.id;
                            order = Order.getOrderById(cworderId);

                            if (order.orderACK.Status == "SUCCESS") {
                                  // Modified the 09.10.2008:
                                  // - according to mail of Mick Winters
                                  // ["RE: Additional functionality for Expediter passthrough", Thu 10/9/2008 12:52 PM]
                                  order.orderMessage.internalOrderStatus = "Granite Call SUCCESSFUL";
                                  order.orderMessage.circuitStatus = "ORDERED";
                                  order.orderMessage.orderStatus = "READY";
                                  order.save();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + "<UPDATE ORDER HOME[" + s +  "]> WITH 'ORDER #': '" + order.orderMessage.orderNumber + "' WORKED CORRECTLY!");
                                  Global.logDebug("<UPDATE ORDER HOME[" + s +  "]> WITH 'ORDER #': '" + order.orderMessage.orderNumber + "' WORKED CORRECTLY!");

                                  rejectRequest = false;
                            }
                            else{
                                  // Modified the 09.10.2008:
                                  // - according to mail of Mick Winters
                                  // ["RE: Additional functionality for Expediter passthrough", Thu 10/9/2008 12:52 PM]
                                  order.orderMessage.internalOrderStatus = "Order Rejected By Granite";
                                  order.orderMessage.inHold = true;
                                  order.save();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + "<UPDATE ORDER HOME[" + s +  "]> WITH 'ORDER #': '" + input.message.OrderNumber + "' NOT STORED... Order Rejected By Granite [" + order.orderACK.ErrorDescription + "]...");
                                  Global.logDebug("<UPDATE ORDER HOME[" + s +  "]> WITH 'ORDER #': '" + input.message.OrderNumber + "' NOT STORED... Order Rejected By Granite [" + order.orderACK.ErrorDescription + "]...");

                // *** SENDING WOSU ***********************************************************************************************************
                                  var sps = order.serviceParametersList;
                                  if (sps != null && sps.count > 0) {
                                        for (var ll = 0; ll < sps.count; ll++){

          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "SENDING WOSU FOR: SERVICE #[" + sps[ll].serviceParameters.serviceNumber + "], SERVICE TYPE[" + sps[ll].serviceParameters.serviceType + "]...");
                                              var inputSOAP_WOSU = new DataStructure("ifEAI_WOSU_17122008:WorkOrderStatusUpdate");
                                              var outputSOAP_WOSU = null;

                                              // - mapping the input JMS message vs. input SOAP message
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.BusinessUnit             = order.orderMessage.businessUnit;
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.ICMSTaskID             = order.orderMessage.icmsSONumber;
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.OrderType                   = order.orderMessage.orderType;
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.OrderNumber             = order.orderMessage.parentOrderNumber;
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.WorkOrder                   = order.orderMessage.parentOrderNumber;
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.WorkOrderStatus       = "REJECTED";
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.WorkOrderRemarks   = order.orderACK.ErrorDescription;
                                              // Modified on 09.02.2008:
                                              // - management of 3 more attributes for WOSU message to EAI
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.TaskServiceNumber       = sps[ll].serviceParameters.serviceNumber;
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.TaskServiceStatus       = "REJECTED";
                                              inputSOAP_WOSU.WorkOrderStatusUpdate.TaskServiceType       = sps[ll].serviceParameters.serviceType;
                                              try {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INVOKING WOSU INTERFACE...");
                                                    // Modified on 11.08.2008:
                                                    // - the Circuit Number is updated with the value generated on XNG (for FTTH service)
                                                    outputSOAP_WOSU = ifEAI_WOSU_17122008.invokeEAIIF_WorkOrderStatusUpdate(inputSOAP_WOSU, null, false, order.orderMessage.parentOrderNumber, sps[ll].serviceParameters.orderRowItemID);
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "RESULT WOSU: " + (outputSOAP_WOSU != null && outputSOAP_WOSU.length == 1 ? outputSOAP_WOSU[0].toXML() : "") + "...");
                                              }
                                              catch (exc){
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "EXCEPTION WOSU: " + exc);
                                              }
                                        }
                                  } // end if(sps)

                                  childOrderOutputDoc = order.orderACK;
                            }
                      } // End cycling on orders[i]...
                }

                if (!rejectRequest){
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " REJECT REQUEST: TRUE, EXPEDITER KEEPS THE ORDERS...");
                      // - delete the previous order
                      var previousOrderMessage = ds_ws.searchOrderMessageHomeByOrderNumber(input.message.OrderNumber + "_OLD");
                      if (previousOrderMessage != null) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS ORDER MESSAGE FOUND IN THE DB...");
                            var previousOrder = Order.getOrderById(previousOrderMessage.orderId);
                            previousOrder.deleteOrder();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS ORDER MESSAGE DELETED IN THE DB...");

                            // - delete the children of the previous order (modify the Parent Order #)
                            var children = ds_ws.searchOrderMessageHomeByParentOrderNumber(input.message.OrderNumber + "_OLD");
                            if (children != null){
                                  for (var a = 0; a < children.length; a++) {
                                        var child = children[a];
                                        var childOrderNumber = child.orderNumber;
                                        var childOrder = Order.getOrderById(child.orderId);
                                        childOrder.deleteOrder();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS CHILD [ORDER #: " + childOrderNumber + "] ORDER MESSAGE DELETED IN THE DB...");
                                  }
                            }
                      }

                      output = new DataStructure("ds_ws:updateOrderResponse");
                      output.returns.OrderAcknowledgement.OrderNumber = input.message.OrderNumber;
                      output.returns.OrderAcknowledgement.BusinessUnit = input.message.BusinessUnit;
                      output.returns.Failure.Status = "SUCCESS";
                }
                else{
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " REJECT REQUEST: TRUE, EXPEDITER REMOVES THE ORDERS...");
                      // Modified the 04.11.2008:
                      // - delete the order currently created for the Update Order request
                      if (orders != null && orders.length > 0) {
                            for (var s = 0; s < orders.length; s++){
                                  var order = orders[s];
                                  if (order.isStored) {
                                        var orderNumber = order.orderMessage.orderNumber;
                                        order.deleteOrder();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER CURRENTLY CREATED [ORDER #: " + orderNumber + "] HAS BEEN DELETED FROM THE DB...");
                                  }
                            }
                      }
                      // - restore the previous order
                      var previousOrderMessage = ds_ws.searchOrderMessageHomeByOrderNumber(input.message.OrderNumber + "_OLD");
                      if (previousOrderMessage != null) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS ORDER MESSAGE FOUND IN THE DB...");
                            previousOrderMessage.orderNumber = input.message.OrderNumber;
                            previousOrderMessage.save();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS ORDER MESSAGE RESTORED IN THE DB...");

                            // - restore the children of the previous order (modify the Parent Order #)
                            var children = ds_ws.searchOrderMessageHomeByParentOrderNumber(input.message.OrderNumber + "_OLD");
                            if (children != null){
                                  for (var a = 0; a < children.length; a++) {
                                        var child = children[a];
                                        child.orderNumber = child.orderNumber.substr(0, child.orderNumber.length - 4);
                                        child.parentOrderNumber = input.message.OrderNumber;
                                        child.save();
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PREVIOUS CHILD [ORDER #: " + child.orderNumber + "] ORDER MESSAGE RESTORED IN THE DB...");
                                  }
                            }
                      }

                      // Creation of the response message:
                      // - setting values for a customized exception on Expediter
                      output = new DataStructure("ds_ws:updateOrderResponse");
                      output.returns.OrderAcknowledgement.OrderNumber = input.message.OrderNumber;
                      output.returns.OrderAcknowledgement.BusinessUnit = input.message.BusinessUnit;
                      output.returns.Failure.ErrorTime = ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS();
                      output.returns.Failure.FunctionName = "UPDATE ORDER";
                      output.returns.Failure.ObjectId = input.message.OrderNumber;
                      output.returns.Failure.Status = "ERROR";
                      output.returns.Failure.SystemName = "EXPEDITER";
                      if (sendErrorMessage) {
                            // it fills this session only if there is only 1 child order
                            if (childOrderOutputDoc != null) {
                                  output.returns.Failure.ErrorCode = childOrderOutputDoc.ErrorCode;
                                  output.returns.Failure.ErrorDescription = childOrderOutputDoc.ErrorDescription;
                                  output.returns.Failure.ErrorType = childOrderOutputDoc.ErrorType;
                                  output.returns.Failure.ProcessInstanceld = childOrderOutputDoc.ProcessInstanceld;
                                  output.returns.Failure.SourceErrorCode = childOrderOutputDoc.SourceErrorCode;
                                  output.returns.Failure.TargetRecored = childOrderOutputDoc.TargetRecored;
                                  output.returns.Failure.UserId = childOrderOutputDoc.UserId;
                                  output.returns.Failure.SystemName = childOrderOutputDoc.SystemName;
                            }
                            else{
                                  output.returns.Failure.ErrorDescription = Global.translateText("AE0005", null, [input.message.OrderNumber]);
                            }
                      }
                }
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "OUTPUT: " + output + "...");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");

                return output;
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_QuoteValidation" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          var debug = "[[5] BINDING FOR EXPEDITER INTERFACE [JAVASCRIPT]: QUOTE VALIDATION - HOME] ";
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "START...");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INPUT: " + input + "...");

                var output = new DataStructure("ds_ws:quoteValidationResponse_HOME");
                output.returns.QuoteAcknowledgement.CircuitRemarks = input.message.ReservationNumber;
                output.returns.QuoteAcknowledgement.OrderNumber = input.message.OrderNumber;

                // Create an array that will contain all the broken up DS (children)
                var orders = new Array();
                var plateIds = new Array();

                // Break up the incoming quote according to:
                //      a. if Service Type in [FTTH_VOIP, FTTH_HSI, FTTH_IPTV] using the Plate Id.
                //      b. NO!!! OLD APPROACH!!!!!       if Service Type in [POTS, DSL, PAYPHONE, FIXEDGSM, WIRELESS] using the Plate Id. and Service #   --- NO!!! OLD APPROACH!!!!
                //  b. for all other Service Types using the Plate Id. and Service #  -- NEW APPROACH!!!! according to mail from/to M. Winters 11.02.2011

                if (input != null &&
                      input.message != null &&
                      input.message.ServiceParameters != null) {

                      for (var j = 0; j < input.message.ServiceParameters.length; j++) {
                            var sp = input.message.ServiceParameters[j];
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ANALYZING THE SERVICE PARAMETER[" + j + "]...");

          // --- FTTH_VOIP, FTTH_HSI --------------------------------------------------------------------------------------------------------------------------------------
                            // In case of: FTTH_VOIP, FTTH_HSI
                            if (sp.ServiceType.toUpperCase() == "FTTH_VOIP" ||
                                  sp.ServiceType.toUpperCase() == "FTTH_IPTV" ||
                                  sp.ServiceType.toUpperCase() == "FTTH_HSI") {

                                  // - search an order with the same Plate Id. already created
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " THE SERVICE TYPE IS: '" + sp.ServiceType.toUpperCase() + "'...");

                                  if (sp.PlateID == null) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " THE PLATE ID IS NULL, THE SP [ITEM SERVICE #:" + sp.ServiceNumber + ", SERVICE TYPE:" + sp.ServiceType + "] CAN'T BE PROCESSED...");
                                        continue;
                                  }

                                  var child = orders[sp.PlateID];
                                  // - is NOT created then generate new instance
                                  if (child == null){
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " CHILD WITH PLATE ID: '" + sp.PlateID.toUpperCase() + "' NOT FOUND, CREATE A NEW INSTANCE...");
                                        child = new DataStructure("ds_jms:orderMessage_el_HOME");
                                        // - main leaves of the order
                                        child.accountNumber               = ds_ws.common_replaceSpecialCharacter(input.message.AccountNumber);
                                        child.alternativeSolution         = ds_ws.common_replaceSpecialCharacter(input.message.AlternativeSolution);
                                        child.bandwidth                   = ds_ws.common_replaceSpecialCharacter(input.message.Bandwidth);
                                        // Modified 16.08.2009:
                                        // - if CCT Type from CRM is empty apply a default value
                                        //if (input.message.CctType != null && input.message.CctType != "") {
                                        //      child.cctType = ds_ws.common_replaceSpecialCharacter(input.message.CctType);
                                        //}
                                        //else{
                                              // child.cctType = "FTTH";
                                              // Modified again on 16.02.2011:
                                              // - according to mail from/to M. Winters 11.02.2011
                                              child.cctType = ds_ws.searchGraniteCctTypeForReceivedServiceType_CctType(sp.ServiceType.toUpperCase(), (input.message.CctType != null ? input.message.CctType.toUpperCase() : null));
                                        //}
                                        child.circuitNumber               = ds_ws.common_replaceSpecialCharacter(input.message.CircuitNumber);
                                        child.createdBy                   = ds_ws.common_replaceSpecialCharacter(input.message.CreatedBy);
                                        child.creationDate                = input.message.CreationDate;
                                        child.customerIDNumber            = ds_ws.common_replaceSpecialCharacter(input.message.CustomerIDNumber);
                                        child.fictBillingNumber           = ds_ws.common_replaceSpecialCharacter(input.message.FictBillingNumber);
                                        child.icmsSONumber                = ds_ws.common_replaceSpecialCharacter(input.message.IcmsSONumber);
                                        child.oldCircuitNumber            = ds_ws.common_replaceSpecialCharacter(input.message.OldCircuitNumber);
          /*
                                        child.orderNumber                 = ds_ws.common_executeFunction_UniqueOrderNumber("XNG PRODUCTION [USER:STC_TARGET2]",
                                                                                                                                                                      input.message.OrderType,
                                                                                                                                                                      "CW");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " GENERATED ORDER NUMBER: '" + child.orderNumber + "' FOR THE NEW DS INSTANCE...");
          */
                                        child.orderStatus                 = ds_ws.common_replaceSpecialCharacter(input.message.OrderStatus);
                                        child.orderType                   = ds_ws.common_replaceSpecialCharacter(input.message.OrderType);
                                        child.priority                    = ds_ws.common_replaceSpecialCharacter(input.message.Priority);
                                        child.projectId                   = ds_ws.common_replaceSpecialCharacter(input.message.ProjectId);
                                        child.referenceTelNumber          = ds_ws.common_replaceSpecialCharacter(input.message.ReferenceTelNumber);
                                        child.remarks                     = ds_ws.common_replaceSpecialCharacter(input.message.Remarks);
                                        child.serviceDate                 = input.message.ServiceDate;
                                        child.serviceDescription          = ds_ws.common_replaceSpecialCharacter(input.message.ServiceDescription);
                                        child.serviceType                 = ds_ws.common_replaceSpecialCharacter(input.message.ServiceType);
                                        child.wires                       = ds_ws.common_replaceSpecialCharacter(input.message.Wires);
                                        child.customerName                = ds_ws.common_replaceSpecialCharacter(input.message.CustomerName);
                                        child.customerType                = ds_ws.common_replaceSpecialCharacter(input.message.CustomerType);
                                        child.customerContact             = ds_ws.common_replaceSpecialCharacter(input.message.CustomerContact);
                                        child.tbPortNumber                = ds_ws.common_replaceSpecialCharacter(input.message.TbPortNumber);
                                        child.businessUnit                = ds_ws.common_replaceSpecialCharacter(input.message.BusinessUnit);
                                        child.customerIDType              = ds_ws.common_replaceSpecialCharacter(input.message.CustomerIDType);
                                        child.customerNumber              = ds_ws.common_replaceSpecialCharacter(input.message.CustomerNumber);
                                        child.reservationNumber           = ds_ws.common_replaceSpecialCharacter(input.message.ReservationNumber);
                                        child.reservationExpiry           = input.message.ReservationExpiry;

                                        // - mapping of the 'Service Parameters' component
                                        child.serviceParameters[0].creationDate             = sp.CreationDate;
                                        child.serviceParameters[0].oldServiceNumber       = ds_ws.common_replaceSpecialCharacter(sp.OldServiceNumber);
                                        child.serviceParameters[0].serviceDate                   = sp.ServiceDate;
                                        child.serviceParameters[0].serviceDescription       = ds_ws.common_replaceSpecialCharacter(sp.ServiceDescription);
                                        child.serviceParameters[0].serviceNumber             = ds_ws.common_replaceSpecialCharacter(sp.ServiceNumber);
                                        child.serviceParameters[0].serviceType                   = ds_ws.common_replaceSpecialCharacter(sp.ServiceType);
                                        child.serviceParameters[0].oldPlateId                   = ds_ws.common_replaceSpecialCharacter(sp.OldPlateID);
                                        child.serviceParameters[0].oldUnitNumber            = ds_ws.common_replaceSpecialCharacter(sp.OldUnitNumber);
                                        child.serviceParameters[0].plateID                         = ds_ws.common_replaceSpecialCharacter(sp.PlateID);
                                        child.serviceParameters[0].unitNumber                   = ds_ws.common_replaceSpecialCharacter(sp.UnitNumber);
                                        child.serviceParameters[0].orderRowItemID            = ds_ws.common_replaceSpecialCharacter(sp.OrderRowItemID);

          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[0] COMPONENT MAPPED...");

                                        // - [3] mapping of the 'Name Value' component
                                        if (sp.NameValue != null) {
                                              for (var k = 0; k < sp.NameValue.length; k++) {
                                                    child.serviceParameters[0].nameValue[k].name = ds_ws.common_replaceSpecialCharacter(sp.NameValue[k].Name);
                                                    child.serviceParameters[0].nameValue[k].value = ds_ws.common_replaceSpecialCharacter(sp.NameValue[k].Value);
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] COMPONENT MAPPED...");
                                              }
                                        }

                                        // - [4] Store the 'CW Document ID' in the final array
                                        plateIds[plateIds.length] = sp.PlateID;
                                  }
                                  // - is created then add new SP branch
                                  else{
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " CHILD WITH PLATE ID: '" + sp.PlateID.toUpperCase() + "' FOUND, CREATE A NEW SP BRANCH...");

                                        // - [2] mapping of the 'Service Parameters' component
                                        var item = child.serviceParameters != null ? child.serviceParameters.length : 0;
                                        // - mapping of the 'Service Parameters' component
                                        child.serviceParameters[item].creationDate                   = sp.CreationDate;
                                        child.serviceParameters[item].oldServiceNumber             = ds_ws.common_replaceSpecialCharacter(sp.OldServiceNumber);
                                        child.serviceParameters[item].serviceDate                   = sp.ServiceDate;
                                        child.serviceParameters[item].serviceDescription       = ds_ws.common_replaceSpecialCharacter(sp.ServiceDescription);
                                        child.serviceParameters[item].serviceNumber             = ds_ws.common_replaceSpecialCharacter(sp.ServiceNumber);
                                        child.serviceParameters[item].serviceType                   = ds_ws.common_replaceSpecialCharacter(sp.ServiceType);
                                        child.serviceParameters[item].oldPlateId                   = ds_ws.common_replaceSpecialCharacter(sp.OldPlateID);
                                        child.serviceParameters[item].oldUnitNumber                  = ds_ws.common_replaceSpecialCharacter(sp.OldUnitNumber);
                                        child.serviceParameters[item].plateID                         = ds_ws.common_replaceSpecialCharacter(sp.PlateID);
                                        child.serviceParameters[item].unitNumber                   = ds_ws.common_replaceSpecialCharacter(sp.UnitNumber);
                                        child.serviceParameters[item].orderRowItemID            = ds_ws.common_replaceSpecialCharacter(sp.OrderRowItemID);
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[" + item + "] COMPONENT MAPPED...");

                                        // - [3] mapping of the 'Name Value' component
                                        if (sp.NameValue != null) {
                                              for (var k = 0; k < sp.NameValue.length; k++) {
                                                    child.serviceParameters[item].nameValue[k].name = ds_ws.common_replaceSpecialCharacter(sp.NameValue[k].Name);
                                                    child.serviceParameters[item].nameValue[k].value = ds_ws.common_replaceSpecialCharacter(sp.NameValue[k].Value);
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] COMPONENT MAPPED...");
                                              }
                                        }
                                  }
                                  orders[sp.PlateID] = child;
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PUT ORDER INTO THE ORDERS CONTAINER WITH KEY '" + sp.PlateID + "'...");
                            }

          /*********************
                Modified on 16.02.2011:
                - according to mail from/to M. Winters 11.02.2011
                - now the else brach has to manage ALL other Service Types!!!!


          // --- POTS, DSL, PAYPHONE, FIXEDGSM, WIRELESS ----------------------------------------------------------------------------------------------------------------------------
                            else if (sp.ServiceType.toUpperCase() == "POTS" ||
                                         sp.ServiceType.toUpperCase() == "DSL" ||
                                         sp.ServiceType.toUpperCase() == "PAYPHONE" ||
                                         sp.ServiceType.toUpperCase() == "FIXEDGSM" ||
                                         sp.ServiceType.toUpperCase() == "WIRELESS"){

          **********************/
                            else {

                                  // - search an order with the same Plate Id. - Service # already created
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " THE SERVICE TYPE IS: '" + sp.ServiceType.toUpperCase() + "'...");

                                  if (sp.PlateID == null) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " THE PLATE ID IS NULL, THE SP [ITEM SERVICE #:" + sp.ServiceNumber + ", SERVICE TYPE:" + sp.ServiceType + "] CAN'T BE PROCESSED...");
                                        continue;
                                  }
                                  if (sp.ServiceNumber == null) {
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " THE SERVICE # IS NULL, THE SP [ITEM SERVICE #:" + sp.ServiceNumber + ", SERVICE TYPE:" + sp.ServiceType + "] CAN NOW BE PROCESSED...");
                                        // Modified on 12.08.2009:
                                        // - even if the Service # is empty we can manage the request (just set value to 'Empty String')
          //                              continue;
                                        sp.ServiceNumber = "EMPTY";
                                  }

                                  var child = orders[sp.ServiceNumber + sp.PlateID];
                                  // - is NOT created then generate new instance
                                  if (child == null){
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " CHILD WITH PLATE ID: '" + sp.PlateID.toUpperCase() + "' NOT FOUND, CREATE A NEW INSTANCE...");
                                        child = new DataStructure("ds_jms:orderMessage_el_HOME");
                                        // - main leaves of the order
                                        child.accountNumber               = ds_ws.common_replaceSpecialCharacter(input.message.AccountNumber);
                                        child.alternativeSolution         = ds_ws.common_replaceSpecialCharacter(input.message.AlternativeSolution);
                                        child.bandwidth                   = ds_ws.common_replaceSpecialCharacter(input.message.Bandwidth);
                                        // Modified 16.08.2009:
                                        // - if CCT Type from CRM is empty apply a default value
                                        //if (input.message.CctType != null && input.message.CctType != "") {
                                        //      child.cctType = ds_ws.common_replaceSpecialCharacter(input.message.CctType);
                                        //}
                                        //else{
                                              // child.cctType = "COPPER";
                                              // Modified again on 16.02.2011:
                                              // - according to mail from/to M. Winters 11.02.2011
                                              child.cctType = ds_ws.searchGraniteCctTypeForReceivedServiceType_CctType(sp.ServiceType.toUpperCase(), (input.message.CctType != null ? input.message.CctType.toUpperCase() : null));
                                        //}
                                        child.circuitNumber               = ds_ws.common_replaceSpecialCharacter(input.message.CircuitNumber);
                                        child.createdBy                   = ds_ws.common_replaceSpecialCharacter(input.message.CreatedBy);
                                        child.creationDate                = input.message.CreationDate;
                                        child.customerIDNumber            = ds_ws.common_replaceSpecialCharacter(input.message.CustomerIDNumber);
                                        child.fictBillingNumber           = ds_ws.common_replaceSpecialCharacter(input.message.FictBillingNumber);
                                        child.icmsSONumber                = ds_ws.common_replaceSpecialCharacter(input.message.IcmsSONumber);
                                        child.oldCircuitNumber            = ds_ws.common_replaceSpecialCharacter(input.message.OldCircuitNumber);
          /*
                                        child.orderNumber                 = ds_ws.common_executeFunction_UniqueOrderNumber("XNG PRODUCTION [USER:STC_TARGET2]",
                                                                                                                                                                      input.message.OrderType,
                                                                                                                                                                      "CW");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " GENERATED ORDER NUMBER: '" + child.orderNumber + "' FOR THE NEW DS INSTANCE...");
          */
                                        child.orderStatus                 = ds_ws.common_replaceSpecialCharacter(input.message.OrderStatus);
                                        child.orderType                   = ds_ws.common_replaceSpecialCharacter(input.message.OrderType);
                                        child.priority                    = ds_ws.common_replaceSpecialCharacter(input.message.Priority);
                                        child.projectId                   = ds_ws.common_replaceSpecialCharacter(input.message.ProjectId);
                                        child.referenceTelNumber          = ds_ws.common_replaceSpecialCharacter(input.message.ReferenceTelNumber);
                                        child.remarks                     = ds_ws.common_replaceSpecialCharacter(input.message.Remarks);
                                        child.serviceDate                 = input.message.ServiceDate;
                                        child.serviceDescription          = ds_ws.common_replaceSpecialCharacter(input.message.ServiceDescription);
                                        child.serviceType                 = ds_ws.common_replaceSpecialCharacter(input.message.ServiceType);
                                        child.wires                       = ds_ws.common_replaceSpecialCharacter(input.message.Wires);
                                        child.customerName                = ds_ws.common_replaceSpecialCharacter(input.message.CustomerName);
                                        child.customerType                = ds_ws.common_replaceSpecialCharacter(input.message.CustomerType);
                                        child.customerContact             = ds_ws.common_replaceSpecialCharacter(input.message.CustomerContact);
                                        child.tbPortNumber                = ds_ws.common_replaceSpecialCharacter(input.message.TbPortNumber);
                                        child.businessUnit                = ds_ws.common_replaceSpecialCharacter(input.message.BusinessUnit);
                                        child.customerIDType              = ds_ws.common_replaceSpecialCharacter(input.message.CustomerIDType);
                                        child.customerNumber              = ds_ws.common_replaceSpecialCharacter(input.message.CustomerNumber);
                                        child.reservationNumber           = ds_ws.common_replaceSpecialCharacter(input.message.ReservationNumber);
                                        child.reservationExpiry           = input.message.ReservationExpiry;

                                        // - mapping of the 'Service Parameters' component
                                        child.serviceParameters[0].creationDate             = sp.CreationDate;
                                        child.serviceParameters[0].oldServiceNumber       = ds_ws.common_replaceSpecialCharacter(sp.OldServiceNumber);
                                        child.serviceParameters[0].serviceDate                   = sp.ServiceDate;
                                        child.serviceParameters[0].serviceDescription       = ds_ws.common_replaceSpecialCharacter(sp.ServiceDescription);
                                        child.serviceParameters[0].serviceNumber             = ds_ws.common_replaceSpecialCharacter((sp.ServiceNumber == "EMPTY") ? "" : sp.ServiceNumber);
                                        child.serviceParameters[0].serviceType                   = ds_ws.common_replaceSpecialCharacter(sp.ServiceType);
                                        child.serviceParameters[0].oldPlateId                   = ds_ws.common_replaceSpecialCharacter(sp.OldPlateID);
                                        child.serviceParameters[0].oldUnitNumber            = ds_ws.common_replaceSpecialCharacter(sp.OldUnitNumber);
                                        child.serviceParameters[0].plateID                         = ds_ws.common_replaceSpecialCharacter(sp.PlateID);
                                        child.serviceParameters[0].unitNumber                   = ds_ws.common_replaceSpecialCharacter(sp.UnitNumber);
                                        child.serviceParameters[0].orderRowItemID            = ds_ws.common_replaceSpecialCharacter(sp.OrderRowItemID);

          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[0] COMPONENT MAPPED...");

                                        // - [3] mapping of the 'Name Value' component
                                        if (sp.NameValue != null) {
                                              for (var k = 0; k < sp.NameValue.length; k++) {
                                                    child.serviceParameters[0].nameValue[k].name = ds_ws.common_replaceSpecialCharacter(sp.NameValue[k].Name);
                                                    child.serviceParameters[0].nameValue[k].value = ds_ws.common_replaceSpecialCharacter(sp.NameValue[k].Value);
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] COMPONENT MAPPED...");
                                              }
                                        }

                                        // - [4] Store the 'CW Document ID' in the final array
                                        plateIds[plateIds.length] = sp.ServiceNumber + sp.PlateID;
                                  }
                                  // - is created then add new SP branch
                                  else{
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " CHILD WITH PLATE ID: '" + sp.PlateID.toUpperCase() + "' FOUND, CREATE A NEW SP BRANCH...");

                                        // - [2] mapping of the 'Service Parameters' component
                                        var item = child.serviceParameters != null ? child.serviceParameters.length : 0;
                                        // - mapping of the 'Service Parameters' component
                                        child.serviceParameters[item].creationDate                   = sp.CreationDate;
                                        child.serviceParameters[item].oldServiceNumber             = ds_ws.common_replaceSpecialCharacter(sp.OldServiceNumber);
                                        child.serviceParameters[item].serviceDate                   = sp.ServiceDate;
                                        child.serviceParameters[item].serviceDescription       = ds_ws.common_replaceSpecialCharacter(sp.ServiceDescription);
                                        child.serviceParameters[item].serviceNumber             = ds_ws.common_replaceSpecialCharacter((sp.ServiceNumber == "EMPTY") ? "" : sp.ServiceNumber);
                                        child.serviceParameters[item].serviceType                   = ds_ws.common_replaceSpecialCharacter(sp.ServiceType);
                                        child.serviceParameters[item].oldPlateId                   = ds_ws.common_replaceSpecialCharacter(sp.OldPlateID);
                                        child.serviceParameters[item].oldUnitNumber                  = ds_ws.common_replaceSpecialCharacter(sp.OldUnitNumber);
                                        child.serviceParameters[item].plateID                         = ds_ws.common_replaceSpecialCharacter(sp.PlateID);
                                        child.serviceParameters[item].unitNumber                   = ds_ws.common_replaceSpecialCharacter(sp.UnitNumber);
                                        child.serviceParameters[item].orderRowItemID            = ds_ws.common_replaceSpecialCharacter(sp.OrderRowItemID);
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'SERVICE PARAMETERS'[" + item + "] COMPONENT MAPPED...");

                                        // - [3] mapping of the 'Name Value' component
                                        if (sp.NameValue != null) {
                                              for (var k = 0; k < sp.NameValue.length; k++) {
                                                    child.serviceParameters[item].nameValue[k].name = ds_ws.common_replaceSpecialCharacter(sp.NameValue[k].Name);
                                                    child.serviceParameters[item].nameValue[k].value = ds_ws.common_replaceSpecialCharacter(sp.NameValue[k].Value);
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " 'NAME VALUE'[" + k + "] COMPONENT MAPPED...");
                                              }
                                        }
                                  }
                                  orders[sp.ServiceNumber + sp.PlateID] = child;
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " PUT ORDER INTO THE ORDERS CONTAINER WITH KEY '" + sp.ServiceNumber + sp.PlateID + "'...");
                            }
                      }

                      // Generate the result gathering all the children DS created!
                      for (var e = 0; e < plateIds.length; e++) {
                            var quote = orders[plateIds[e]];

                            Global.commitTransaction("ORDER");

          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " EXECUTING QUOTE VALIDATION REQUEST FOR [" + plateIds[e] + "]...");
                            var result = ifGranite_jms.invokeGraniteIF_QuoteValidation_HOME(quote);
                            var outputJMS = result != null ? result[0] : null;
                            if (outputJMS != null) {
          /*
                                  if (outputJMS.quoteAcknowledgement != null &&
                                        outputJMS.quoteAcknowledgement.validationResponse != null &&
                                        outputJMS.quoteAcknowledgement.validationResponse.services != null) {
          */

                                        for (var j = 0; j < outputJMS.quoteAcknowledgement.validationResponse.services.length; j++) {
                                              var item = output.returns.QuoteAcknowledgement.ValidationResponse.Services != null ?
                                                                output.returns.QuoteAcknowledgement.ValidationResponse.Services.length : 0;
                                              output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].ServiceType =
                                                    outputJMS.quoteAcknowledgement.validationResponse.services[j].serviceType;
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " SERVICE TYPE ASSIGNED: " + outputJMS.quoteAcknowledgement.validationResponse.services[j].serviceType + "...");
                                              output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].ServiceNumber =
                                                    outputJMS.quoteAcknowledgement.validationResponse.services[j].serviceNumber;
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " SERVICE # ASSIGNED: " + outputJMS.quoteAcknowledgement.validationResponse.services[j].serviceNumber + "...");
                                              output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].OrderRowItemID =
                                                    outputJMS.quoteAcknowledgement.validationResponse.services[j].orderRowItemID;
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + " ORDER ROW ITEM ID ASSIGNED: " + outputJMS.quoteAcknowledgement.validationResponse.services[j].orderRowItemID + "...");
                                              output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Neid =
                                                    outputJMS.quoteAcknowledgement.validationResponse.services[j].neid;
                                              output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].ServiceDate =
                                                    outputJMS.quoteAcknowledgement.validationResponse.services[j].serviceDate;
                                              output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].MaxBandwidth =
                                                    outputJMS.quoteAcknowledgement.validationResponse.services[j].maxBandwidth;

                                              if (outputJMS.quoteAcknowledgement.validationResponse.services[j].failure != null){
                                                    output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.ErrorCode =
                                                          outputJMS.quoteAcknowledgement.validationResponse.services[j].failure.errorCode;
                                                    output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.ErrorDescription =
                                                          outputJMS.quoteAcknowledgement.validationResponse.services[j].failure.errorDescription;
                                                    output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.ErrorTime =
                                                          outputJMS.quoteAcknowledgement.validationResponse.services[j].failure.errorTime;
                                                    output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.ErrorType =
                                                          outputJMS.quoteAcknowledgement.validationResponse.services[j].failure.errorType;
                                                    output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.FunctionName =
                                                          outputJMS.quoteAcknowledgement.validationResponse.services[j].failure.functionName;
                                                    output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.ObjectId =
                                                          outputJMS.quoteAcknowledgement.validationResponse.services[j].failure.objectId;
                                                    output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.ProcessInstanceld =
                                                          outputJMS.quoteAcknowledgement.validationResponse.services[j].failure.processInstanceld;
                                                    output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.SourceErrorCode =
                                                          outputJMS.quoteAcknowledgement.validationResponse.services[j].failure.sourceErrorCode;
                                                    output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.Status =
                                                          outputJMS.quoteAcknowledgement.validationResponse.services[j].failure.status;
                                                    output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.SystemName =
                                                          outputJMS.quoteAcknowledgement.validationResponse.services[j].failure.systemName;
                                                    output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.TargetRecored =
                                                          outputJMS.quoteAcknowledgement.validationResponse.services[j].failure.targetRecored;
                                                    output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.UserId =
                                                          outputJMS.quoteAcknowledgement.validationResponse.services[j].failure.userId;
                                              }
                                        }
          //                        }
                            }
                            else{
                                  for (var j = 0; quote.serviceParameters && j < quote.serviceParameters.length; j++) {
                                        var item = output.returns.QuoteAcknowledgement.ValidationResponse.Services != null ?
                                                          output.returns.QuoteAcknowledgement.ValidationResponse.Services.length : 0;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].ServiceType =
                                              quote.serviceParameters[j].serviceType;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].ServiceNumber =
                                              quote.serviceParameters[j].serviceNumber;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].OrderRowItemID =
                                              quote.serviceParameters[j].orderRowItemID;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Neid = null;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].ServiceDate = null;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].MaxBandwidth = null;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.ErrorCode = null;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.ErrorDescription = null;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.ErrorTime =
                                              ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS();
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.ErrorType = null;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.FunctionName = "QUOTE VALIDATION";
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.ObjectId = null;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.ProcessInstanceld = null;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.SourceErrorCode = null;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.Status = "ERROR";
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.SystemName = "EXPEDITER";
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.TargetRecored = null;
                                        output.returns.QuoteAcknowledgement.ValidationResponse.Services[item].Failure.UserId = null;
                                  }
                            }
                      }
                }

          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "OUTPUT: " + output + "...");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");
                return output;
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_ReportFailure" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          var debug = "[[6] BINDING FOR EXPEDITER INTERFACE [JAVASCRIPT]: REPORT FAILURE - HOME] ";
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "START...");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INPUT: " + input + "...");

                var output = null;

          /*******************************************************************************
                // -----------------------------------------------------
                // COMMENTED OUT BECAUSE OF EXPEDITER BUG [TR # 406109]:
                // - the request is pushed forward vs. Granite through SOAP
                // -----------------------------------------------------
                var result = ifGranite_ws.invokeGraniteIF_ReportFailure(input);
                output = result != null ? result[0] : null;
                // -----------------------------------------------------
          *******************************************************************************/

                // -----------------------------------------------------
                // USING THIS BECAUSE OF EXPEDITER BUG [TR # 406109]:
                // - the request is simply stored
                // -----------------------------------------------------
                Global.logDebug(debug + "MESSAGE: " + (input != null ? input.toXML() : "<NULL>") + "...");

          /*
                output = new DataStructure("ds_ws:reportFailureResponse");
                output.returns.= input.;
          */
                // -----------------------------------------------------

          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "OUTPUT: " + output + "...");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");
                return output;
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_SiteInformationUpdateAck" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          var debug = "[[4] BINDING FOR EXPEDITER INTERFACE [JAVASCRIPT]: SITE INFORMATION UPDATE ACKNOWLEDGEMENT - HOME] ";
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "START...");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INPUT: " + input + "...");

                var output = null;

          /*******************************************************************************
                // -----------------------------------------------------
                // COMMENTED OUT BECAUSE OF EXPEDITER BUG [TR # 406109]:
                // - the request is pushed forward vs. Granite through SOAP
                // -----------------------------------------------------
                var result = ifGranite_ws.invokeGraniteIF_SiteInformationUpdateAcknowledgement(input);
                output = result != null ? result[0] : null;
                // -----------------------------------------------------
          *******************************************************************************/

                // -----------------------------------------------------
                // USING THIS BECAUSE OF EXPEDITER BUG [TR # 406109]:
                // - the request is simply stored
                // -----------------------------------------------------
                Global.logDebug(debug + "MESSAGE: " + (input != null ? input.toXML() : "<NULL>") + "...");

                output = new DataStructure("ds_ws:siteInformationUpdateAcknowledgementResponse");
                output.returns.Acknowledgement.Acknowledgement = ds_ws.common_replaceSpecialCharacter(input.siteInformationUpdateAcknowledgement.Acknowledgement);
                output.returns.Acknowledgement.SiteID = ds_ws.common_replaceSpecialCharacter(input.siteInformationUpdateAcknowledgement.SiteID);
                output.returns.Acknowledgement.BusinessUnit = ds_ws.common_replaceSpecialCharacter(input.siteInformationUpdateAcknowledgement.BusinessUnit);
                output.returns.Failure.ErrorTime = ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS();
                output.returns.Failure.ErrorType = "FUNCTIONAL";
                output.returns.Failure.Status = "SUCCESS";
                output.returns.Failure.SystemName = "EXPEDITER";
                // -----------------------------------------------------

          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "OUTPUT: " + output + "...");
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");
                return output;
        ]]></elementItem>
      </elementItemMap>
    </extension>
  </extensionList>
  <guid>{0cbb519b-4fe7-d5bd-3b3f-28a3d6047c6f}</guid>
  <highlight>36</highlight>
  <interface>iface_ifExpediter_ws.ifExpedtier_HOME</interface>
  <label>Javascript Binding For Expediter Interface</label>
  <metaVersion>3</metaVersion>
  <provider>prov_cwf.jsprov</provider>
</binding>