<?xml version="1.0" encoding="UTF-8" ?>
<process__revision filenameHash="269c354fa6a8ff55342b7961f614336" versionHash="eccbc87e4b5ce2fe28308fd9f2a7baf3" name="migrationSTC.orderSynchronizationGraniteExpediter_cwr3">
  <activity name="start" type="seqActivity">
    <guid>{044847ba-7f1e-316d-b56d-e06122643da5}</guid>
    <label>Start</label>
    <x>41.01758</x>
    <y>30.0</y>
    <childList>
      <child name="runStoredProcedure" type="scriptActivity">
        <guid>{083ba830-bef1-fad4-1a33-351704ff6600}</guid>
        <label>Run Stored Procedure</label>
        <x>32.666016</x>
        <y>122.0</y>
        <methodList>
          <method name="cwOnProcActBefore" type="action">
            <category>before</category>
            <guid>{0499de0d-3972-d076-fc00-b2d557bf1164}</guid>
            <system>true</system>
            <script><![CDATA[
              var submittedDateYear = this.process.processDocument.SUBMITTED_DATE_YEAR;
              var orderType         = this.process.processDocument.ORDER_TYPE;

              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] (orderSynchronizationGraniteExpediter) - " +
                                 "Running Stored Procedure with following parameters(" + submittedDateYear + "," + orderType + ")");

              Global.runDBStoredProcedure("XNG PRODUCTION [USER:STC_TARGET2]",
                                                        "call fill_hbu_expd_order_missing(?, ?)", [submittedDateYear, orderType]);
            ]]></script>
          </method>
        </methodList>
      </child>
      <child name="importAllMissingOrders" type="scriptActivity">
        <guid>{0b5ad5e2-1a71-9b3a-f8b5-7475d075437f}</guid>
        <label>Import All Missing Orders</label>
        <x>37.67871</x>
        <y>231.92578</y>
        <methodList>
          <method name="cwOnProcActBefore" type="action">
            <category>before</category>
            <guid>{04d0e694-bd78-4c73-7f3a-9caa984ba37f}</guid>
            <system>true</system>
            <script><![CDATA[
              var debug = "[" + this.process.id + "] (orderSynchronizationGraniteExpediter) - ";
              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Start Importing Missing Orders");

                    var finderResult = Finder.runFinder("migrationSTC:findAllMissingOrdersInExpediter", "select", null);
                    if(finderResult != null) {

                          Global.logDebug("orderSynchronizationGraniteExpediter - Found " + finderResult.size + " order must be imported in Expediter");

                          if(finderResult.size > 0) {
                                var processed = 0;
                                var good = 0;
                                var good_existing = 0;
                                var good_created = 0;
                                var bad = 0;
                                var validation_exception = 0;
                                var messages_EAI_sent = 0;


                                // loading correspoding page
                                finderResult.loadPage(0);
              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Loaded page 0");

                                for (var i = 0; i < finderResult.size && processed < this.process.processDocument.MAX_NUMBER_OF_ORDERS; i++){
                                      orderMissing = finderResult[i];
                                      try {
                                            // check domain
                                            if(orderMissing.DOMAIN_NAME != null && orderMissing.DOMAIN_NAME != "hbu__domain") {
                                                  continue;
                                            }
                                            // check correctness of serviceType
                                            if(this.process.processDocument.SERVICE_TYPE != null) {
                                                  if(orderMissing.SERVICE_TYPE != this.process.processDocument.SERVICE_TYPE) {
              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Found order " + orderMissing.ORDER_NUMBER + " with serviceType '" +
                                 orderMissing.SERVICE_TYPE + "' while requested ServiceType is '" + this.process.processDocument.SERVICE_TYPE + "'");
                                                        continue;
                                                  }
                                            }

                                            // check correctness of CircuitStatus
                                            if(this.process.processDocument.CIRCUIT_STATUS != null) {
                                                  if(orderMissing.CIRCUIT_STATUS != this.process.processDocument.CIRCUIT_STATUS) {
              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Found order " + orderMissing.ORDER_NUMBER + " with circuitStatus '" +
                                 orderMissing.CIRCUIT_STATUS + "' while requested CircuitStatus is '" + this.process.processDocument.CIRCUIT_STATUS + "'");
                                                        continue;
                                                  }
                                            }

                                            var expediterOrder = null;

                                            // [0]. Check if the order is already stored into Exepditer environment
                                            var orderMessage = ds_ws.searchOrderMessageHomeByOrderNumber(orderMissing.ORDER_NUMBER);
                                            if (orderMessage != null) {
                                                  expediterOrder = Order.getOrderById(orderMessage.orderId);
                                                  good_existing++;
                                            }
                                            else {
                                                  expediterOrder = new Order("ds_ws:default_orderSTC_HOME");
                                                  good_created++;
                                            }

                                            // [2]. Mapping the data found on the Child order
                                            migrationSTC.fillOrderWithMissingOrderFound(orderMissing, expediterOrder, true, orderMessage == null);

                                            // [3]. Validation of the order before make it persistent on the DB
                                            var validation = expediterOrder.validate(10, true);
                                            if (validation != null) {

                                                  for (var k = 0; k < validation.length; k = k + 2) {
              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "VALIDATION ERROR[" + k + "]: CODE '" + validation[k] + "' MESSAGE '" + validation[k + 1] + "'...");
                                                  }
                                                  validation_exception++;

                                                  var errorMessage = "";
                                                  if(validation.length > 1) {
                                                        errorMessage = (validation[1] == null ? validation[0] : validation[1]);
                                                  }
                                                  else if(validation.length > 0) {
                                                        errorMessage = validation[0];
                                                  }
                                                  // Customized exception AE0003:
                                                  // - Validation errors found while processing "{0}" with id. "{1}": {2}!
                                                  Global.throwException(Global.translateText("AE0003", null, ["Order STC", orderMissing.ORDER_NUMBER, errorMessage]));
                                            }
                                            expediterOrder.save();

                                            // [4]. Searching and Updating parent order
                                            var expediterParentOrder = null;

                                            var parentOrderMessage = ds_ws.searchOrderMessageHomeByOrderNumber(orderMissing.PARENT_ORDER_NUMBER);
                                            if (parentOrderMessage != null) {
                                                  expediterParentOrder = Order.getOrderById(parentOrderMessage.orderId);
                                            }
                                            else {
                                                  expediterParentOrder = new Order("ds_ws:default_orderSTC_HOME");
                                            }

                                            // [5]. Mapping the data found on the Parent order
                                            migrationSTC.fillOrderWithMissingOrderFound(orderMissing, expediterParentOrder, false, parentOrderMessage == null);
                                            expediterParentOrder.save();


                                            // [6]. Check if we need to send a Work Order Status Update message to EAI:
                                            // - in this case the script invoked updates the Order Status, Circuit Status and Service Date
                                            var input = new DataStructure("ds_jms:workOrderStatusUpdate_el");

                                            // [a]. create message for EAI...
                                            input.businessUnit                         = "Home";
                                            input.circuitStatus                        = orderMissing.CIRCUIT_STATUS;
                                            input.circuitNumber                        = orderMissing.CIRCUIT_NUMBER;
                                            input.orderNumber                          = orderMissing.ORDER_NUMBER;
                                            input.orderType                            = orderMissing.ORDER_TYPE;
                                            input.workOrderDescription                 = "";
                                            input.workOrder                            = orderMissing.ORDER_NUMBER;
                                            input.workOrderCircuitPathCompletionStatus = orderMissing.CIRCUIT_STATUS;
                                            input.workOrderLastModifiedBy              = orderMissing.CREATED_BY;
                                            input.workOrderLastModifiedTimestamp       =
                                                  (orderMissing.SERVICE_DATE != null ?
                                                    (orderMissing.SERVICE_DATE.indexOf(":") != -1 ? orderMissing.SERVICE_DATE : orderMissing.SERVICE_DATE + " 00:00:00") : null);
                                            input.workOrderName                        = orderMissing.ORDER_NUMBER;
                                            input.workOrderRemarks                     = "";
                                            input.workOrderStatus                      = orderMissing.ORDER_STATUS;
                                            input.workOrderTotalTime                   = "";
                                            input.circuitNumber                        = orderMissing.CIRCUIT_NUMBER;
                                            input.taskServiceType                      = orderMissing.SERVICE_TYPE;
                                            input.icmsSONumber                         = orderMissing.ICMS_SO_NUMBER;
                                            input.taskName                             = orderMissing.TASK_NAME;

                                            if(migrationSTC.hasCircuitIDToBeSentInWOSU(orderMissing.SERVICE_TYPE, orderMissing.ORDER_TYPE)) {
                                                  input.parameters[0]                        = new DataStructure("ds_jms:nameValue");
                                                  input.parameters[0].name                   = ifEAI_WOSU_17122008.getElementNameForSIPCircuitID();
                                                  input.parameters[0].value                  = orderMissing.CIRCUIT_NUMBER;
                                            }

                                            // [b]. save message in queue for EAI...
                                            ifGranite_jms.manageGraniteMsg_WorkOrderStatusUpdate(input);
                                            messages_EAI_sent++;
                                            good++;
                                      }
                                      catch(exc) {
              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "[ERROR] EXPEDITER RAISED EXCEPTION FOR ORDER #: " + orderMissing.ORDER_NUMBER + "; REASON '" + exc.message + "'...");
                                            bad++;
                                      }

                                      processed++;
                                }

                                var msg = "[INFORMATION] orderSynchronizationGraniteExpediter - Import missing orders COMPLETED AT '" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "'" +
                                              "\n XNG ORDERS RETRIEVED # '" + finderResult.size + "';" +
                                              "\n     - ORDER ADDED INTO EXPEDITER # '" + good_created + "';" +
                                              "\n     - ORDER FOUND INTO EXPEDITER # '" + good_existing + "';" +
                                              "\n  - EXPEDITER ORDERS WORKED PROPERLY # '" + good + "';" +
                                              "\n     - 'WORK ORDER STATUS UPDATE' MESSAGES SENT TO EAI # '" + messages_EAI_sent + "';" +
                                              "\n  - EXPEDITER ORDERS WORKED WITH EXCEPTION # '" + bad + "';" +
                                              "\n     - ORDER VALIDATION EXCEPTION INTO EXPEDITER # '" + validation_exception + "' (ORDERS NOT UPDATED ON EXPEDITER);";
              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "" + msg);
                                Global.logDebug(msg);
                          }
                    }
                    else {
                          Global.logDebug("orderSynchronizationGraniteExpediter - No orders found to be imported in Expediter");
                    }

              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Finish Imported Missing Orders");
            ]]></script>
          </method>
        </methodList>
      </child>
      <child name="synchronizeOrdersStatus" type="scriptActivity">
        <guid>{0da0afb6-ab5f-9ed0-305e-934fb5661347}</guid>
        <label>Synchronize Orders Status</label>
        <x>30.0</x>
        <y>354.81445</y>
        <methodList>
          <method name="cwOnProcActBefore" type="action">
            <category>before</category>
            <guid>{0c592eaa-46ef-3ccd-d9ed-89e21b029eb1}</guid>
            <system>true</system>
            <script><![CDATA[
              var debug = "[" + this.process.id + "] (orderSynchronizationGraniteExpediter) - ";
              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Start Synchronize Orders Status");

                    var myfinder = migrationSTC.getEnvironDB();

                    var finderResult = Finder.runFinder(myfinder, "select", null);
                    if(finderResult != null) {

              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Found " + finderResult.size + " orders to be synchronized in Expediter");
                          Global.logDebug("orderSynchronizationGraniteExpediter - Found " + finderResult.size + " orders to be synchronized in Expediter");

                          if(finderResult.size > 0) {

                                var good = 0;
                                var bad = 0;
                                var messages_EAI_sent = 0;

                                // loading correspoding page
                                finderResult.loadPage(0);
              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Loaded page 0");

                                for (var i = 0; i < finderResult.size; i++){
                                      var orderToBeSynch = finderResult[i];
                                      try {
                                            if(orderToBeSynch.DOMAIN_NAME != null && orderToBeSynch.DOMAIN_NAME != "hbu__domain") {
                                                  continue;
                                            }

                                            // [0]. Check if the order is already stored into Exepditer environment
                                            var orderMessage = ds_ws.searchOrderMessageHomeByOrderNumber(orderToBeSynch.ORDER_NUMBER);
                                            if (orderMessage == null) {
                                                  Global.logDebug("orderSynchronizationGraniteExpediter - Missing Order " + orderToBeSynch.ORDER_NUMBER + " in Expediter!!!");
                                                  Global.throwException(Global.translateText("AE0004", null, ["Order STC", orderToBeSynch.ORDER_NUMBER]));
                                            }

                                            // [1]. We need to send a Work Order Status Update message to EAI:
                                            // - in this case the script invoked updates the Order Status, Circuit Status and Service Date

                                            var input = new DataStructure("ds_jms:workOrderStatusUpdate_el");

                                            // [a]. create message for EAI...
                                            input.businessUnit                         = "Home";
                                            input.circuitStatus                        = orderToBeSynch.CIRCUIT_STATUS;
                                            input.circuitNumber                        = orderToBeSynch.CIRCUIT_NUMBER;
                                            input.orderNumber                          = orderToBeSynch.ORDER_NUMBER;
                                            input.orderType                            = orderToBeSynch.ORDER_TYPE;
                                            input.workOrderDescription                 = "";
                                            input.workOrder                            = orderToBeSynch.ORDER_NUMBER;
                                            input.workOrderCircuitPathCompletionStatus = orderToBeSynch.CIRCUIT_STATUS;
                                            input.workOrderLastModifiedBy              = orderToBeSynch.CREATED_BY;
                                            input.workOrderLastModifiedTimestamp       =
                                                  (orderToBeSynch.SERVICE_DATE != null ?
                                                    (orderToBeSynch.SERVICE_DATE.indexOf(":") != -1 ? orderToBeSynch.SERVICE_DATE : orderToBeSynch.SERVICE_DATE + " 00:00:00") : null);
                                            input.workOrderName                        = orderToBeSynch.ORDER_NUMBER;
                                            input.workOrderRemarks                     = "";
                                            input.workOrderStatus                      = orderToBeSynch.ORDER_STATUS;
                                            input.workOrderTotalTime                   = "";
                                            input.circuitNumber                        = orderToBeSynch.CIRCUIT_NUMBER;
              //                              input.orderRowItemID                       = orderToBeSynch.ORDER_ROW_ITEM_ID;
                                            input.taskServiceType                      = orderToBeSynch.SERVICE_TYPE;
                                            input.icmsSONumber                         = orderToBeSynch.ICMS_SO_NUMBER;
                                            input.taskName                             = orderToBeSynch.TASK_NAME;

                                            if(migrationSTC.hasCircuitIDToBeSentInWOSU(orderToBeSynch.SERVICE_TYPE, orderToBeSynch.ORDER_TYPE)) {
                                                  input.parameters[0]                        = new DataStructure("ds_jms:nameValue");
                                                  input.parameters[0].name                   = ifEAI_WOSU_17122008.getElementNameForSIPCircuitID();
                                                  input.parameters[0].value                  = orderToBeSynch.CIRCUIT_NUMBER;
                                            }

                                            // [b]. save message in queue for EAI...
                                            ifGranite_jms.manageGraniteMsg_WorkOrderStatusUpdate(input);
                                            messages_EAI_sent++;
                                            good++;
                                      }
                                      catch(exc) {
              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "[ERROR] EXPEDITER RAISED EXCEPTION FOR ORDER #: " + orderToBeSynch.ORDER_NUMBER + " REASON '" + exc.message + "'...");
                                            bad++;
                                      }
                                }

                                var msg = "[INFORMATION] orderSynchronizationGraniteExpediter - Synch Order Status COMPLETED AT '" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "'" +
                                              "\n  - EXPEDITER ORDERS WORKED PROPERLY # '" + good + "';" +
                                              "\n     - 'WORK ORDER STATUS UPDATE' MESSAGES SENT TO EAI # '" + messages_EAI_sent + "';" +
                                              "\n  - EXPEDITER ORDERS WORKED WITH EXCEPTION # '" + bad + "';";
              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + msg);
                                Global.logDebug(msg);
                          }
                    }
                    else {
                          Global.logDebug("orderSynchronizationGraniteExpediter - No orders to be synchronized found");
                    }

              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Finish Synchronize Orders Status");
            ]]></script>
          </method>
        </methodList>
      </child>
      <child name="end" type="completeActivity">
        <guid>{0bf17a32-bbc1-4d33-1ec5-a4bc139effe8}</guid>
        <label>End</label>
        <x>47.01758</x>
        <y>479.70312</y>
        <methodList>
          <method name="cwOnProcActBefore" type="action">
            <category>before</category>
            <guid>{07bfbde7-d2b2-c25d-82ee-3ceb1356da41}</guid>
            <system>true</system>
            <script><![CDATA[
              debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] (orderSynchronizationGraniteExpediter) - End");
            ]]></script>
          </method>
        </methodList>
      </child>
    </childList>
    <methodList>
      <method name="cwOnProcActBefore" type="action">
        <category>before</category>
        <guid>{0f596ddc-abfc-f1a8-5d8d-4190bf64d73b}</guid>
        <system>true</system>
        <script><![CDATA[
          debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] (orderSynchronizationGraniteExpediter) - Start");
        ]]></script>
      </method>
    </methodList>
  </activity>
  <document>doc_migrationSTC.processDocumentForOrderSynchronization</document>
  <label>Synchronize Orders Between Granite And Expediter</label>
  <metaVersion>3</metaVersion>
  <priority>8</priority>
  <process>proc_migrationSTC.orderSynchronizationGraniteExpediter</process>
  <revision>3</revision>
  <type>User</type>
</process__revision>