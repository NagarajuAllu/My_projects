<?xml version="1.0" encoding="UTF-8" ?>
<script filenameHash="8d6273b734387caf4f8f74b78e9f059e" versionHash="eccbc87e4b5ce2fe28308fd9f2a7baf3" name="ifEAI_WOSU_17122008.invokeEAIIF_WorkOrderStatusUpdate">
  <guid>{0f6d84a6-d9de-5010-9400-5274c1ef2939}</guid>
  <label>[17.12.2008] Invoke EAI Interface: Work Order Status Update [SOAP]</label>
  <metaVersion>3</metaVersion>
  <parameterList>
    <parameter name="input" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="circuitNumber" type="rifp">
      <type>dtype_ds_ws.string100</type>
    </parameter>
    <parameter name="update" type="rifp">
      <mandatory>true</mandatory>
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
    <parameter name="parentOrderNumber" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="orderRowItemID" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var debug = "[INVOKE EAI INTERFACE VIA 'SOAP': WORK ORDER STATUS UPDATE] ";
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "START...");
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INPUT: " + (input != null ? input.toXML() : "") + "...");

    var output = null;
    var formerOrderNumber = input.WorkOrderStatusUpdate.OrderNumber;
    var userData1 = input.WorkOrderStatusUpdate.OrderNumber;
    var userData2 = null;

    // Modify on 09.04.2009:
    // - to EAI in case of "Home" Business Unit, the details of the child are replaced with the ones from the father order
    if (input.WorkOrderStatusUpdate.BusinessUnit == "Home") {
        if(parentOrderNumber == null){
            var orderMessage = ds_ws.searchOrderMessageHomeByOrderNumber(input.WorkOrderStatusUpdate.OrderNumber);
            if (orderMessage != null && orderMessage.parentOrderNumber != null) {
                // - replacing the Order Number
                input.WorkOrderStatusUpdate.OrderNumber = orderMessage.parentOrderNumber;
                userData2 = userData1;
                userData1 = orderMessage.parentOrderNumber;
            }
            else {
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "WARNING: PARENT ORDER NOT FOUND FOR ORDER # " + input.WorkOrderStatusUpdate.OrderNumber + "...");
            }
        }
        else {
            input.WorkOrderStatusUpdate.OrderNumber = parentOrderNumber;
            userData2 = userData1;
            userData1 = parentOrderNumber;
        }
    }

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INVOKING INTERFACE WITH DATA: " + (input != null ? input.toXML() : "NULL"));

    // try {
    output = Global.invokeInterface("ifEAI_WOSU_17122008:WOSU",
                                    "WorkOrderStatusUpdate",
                                    input);
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "RESULT: " + output + "...");
    /****
    }
    catch(exc) {
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "exception: " + exc.message + "...");
    output = new Array(1);
    output[0] = new DataStructure("ifEAI_WOSU_17122008:WorkOrderStatusUpdateResponse_el");
    output[0].Status = "SUCCESS";
    }
    ****/

    var logMsgId = UserProfile.getMsgLogId();
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Adding UserData_1 = " + userData1 + " to id = " + logMsgId);

    // Modified on 05.01.2009:
    // - add the 'Order #' to the CWMESSAGELOG table in the USER_DATA1;
    UserProfile.setMsgLogData(userData1, userData2, null, logMsgId);

    if (update) {
        if (input.WorkOrderStatusUpdate.BusinessUnit == "Enterprise"){
            var orderMessage = ds_ws.searchOrderMessageByOrderNumber(formerOrderNumber);
            if (orderMessage != null) {
                var order = Order.getOrderById(orderMessage.orderId);
                if (order != null) {
                    // - [1] mapping the 'Order Status' field
                    order.orderMessage.orderStatus = input.WorkOrderStatusUpdate.WorkOrderStatus;
                    order.orderMessage.circuitStatus = input.WorkOrderStatusUpdate.CircuitStatus;
                    // - [3] mapping the 'Circuit Number' field
                    if (circuitNumber != null){
                        order.orderMessage.circuitNumber = circuitNumber;
                    }
                    // - [4] mapping the 'Service Status' field
                    if (input.WorkOrderStatusUpdate.TaskServiceNumber != null && input.WorkOrderStatusUpdate.TaskServiceType != null) {
                        var item = -1;
                        var services = order.serviceParametersList;
                        if (services != null) {
                            for (var k = 0; k < services.count; k++) {
                                if (services[k].serviceParameters.serviceNumber == input.WorkOrderStatusUpdate.TaskServiceNumber &&
                                    services[k].serviceParameters.serviceType == input.WorkOrderStatusUpdate.TaskServiceType) {
                                    item = k;
                                    break;
                                }
                            }
                        }
                        if (item > -1) {
                            order.serviceParametersList[item].serviceParameters.serviceStatus = input.WorkOrderStatusUpdate.TaskServiceStatus;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "'SERVICE STATUS' FIELD MAPPED TO " + input.WorkOrderStatusUpdate.TaskServiceStatus + "...");
                        }
                    }
                    order.save();
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Enterprise ORDER MADE PERSISTENT ON THE DB...");
                    Global.logDebug("<WORK ORDER STATUS UPDATE> Enterprise REQUEST WITH 'ORDER #': '" + formerOrderNumber + "', 'ORDER STATUS': '" + input.WorkOrderStatusUpdate.WorkOrderStatus + "' WORKED CORRECTLY!");
                }
            }
            else{
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Enterprise ORDER NOT FOUND IN THE DB...");
            }
        }
        else if (input.WorkOrderStatusUpdate.BusinessUnit == "Home"){
            // Updating the Child Order STC:
            // - [0] seeking the Order instance in the DB
            var orderMessage = ds_ws.searchOrderMessageHomeByOrderNumber(formerOrderNumber);
            if (orderMessage != null) {
                var order = Order.getOrderById(orderMessage.orderId);
                if (order != null) {
                    // - [1] mapping the 'Circuit Status' field
                    order.orderMessage.circuitStatus = input.WorkOrderStatusUpdate.CircuitStatus;
                    // - [2] mapping the 'Circuit Number' field
                    if (circuitNumber != null){
                        order.orderMessage.circuitNumber = circuitNumber;
                    }

                    var isWOCompleted = ifEAI_WOSU_17122008.isWorkOrderCompleted(input.WorkOrderStatusUpdate);

                    var item = -1;
                    // - [3] mapping the 'Service Status' field
                    var services = order.serviceParametersList;
                    if (services != null) {
                        if(services.count == 1) {
                            item = 0;
                            orderRowItemID = services[0].serviceParameters.orderRowItemID;
                        }
                        else {
                            // looking for the service using the received orderRowItemId
                            if (orderRowItemID != null) {
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "SEARCHING THE SERVICE PARAMETERS COMPONENT BY ORDERROWITEMID: " + orderRowItemID + "...");
                                for (var k = 0; k < services.count; k++) {
                                    if (services[k].serviceParameters.orderRowItemID == orderRowItemID) {
                                        item = k;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "FOUND THE SERVICE PARAMETERS ON ITEM " + item + "...");
                                        break;
                                    }
                                }
                            }
                            else {
                                if(input.WorkOrderStatusUpdate.TaskServiceNumber != null && input.WorkOrderStatusUpdate.TaskServiceType != null) {
                                    // looking for the service using the serviceNumber in the event
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "SEARCHING THE SERVICE PARAMETERS COMPONENT BY SERVICENUMBER: " + input.WorkOrderStatusUpdate.TaskServiceNumber + "...");
                                    for (var k = 0; k < services.count; k++) {
                                        if (services[k].serviceParameters.serviceNumber == input.WorkOrderStatusUpdate.TaskServiceNumber &&
                                            services[k].serviceParameters.serviceType == input.WorkOrderStatusUpdate.TaskServiceType) {
                                            item = k;
                                            orderRowItemID = services[k].serviceParameters.orderRowItemID;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "FOUND THE SERVICE PARAMETERS ON ITEM " + item + "...");
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (item > -1) {
                        if(isWOCompleted) {
                            if(order.serviceParametersList[item].serviceParameters.toBeCancelled) {
                                order.serviceParametersList[item].serviceParameters.serviceStatus = "CANCELLED";
                            }
                            else {
                                order.serviceParametersList[item].serviceParameters.serviceStatus = "COMPLETED";
                            }
                        }
                        else {
                            order.serviceParametersList[item].serviceParameters.serviceStatus = input.WorkOrderStatusUpdate.WorkOrderStatus;
                        }
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "'SERVICE STATUS' FIELD MAPPED TO " + order.serviceParametersList[item].serviceParameters.serviceStatus + "...");
                    }
                    else {
                        Global.logDebug("<WORK ORDER STATUS UPDATE> 'ORDER #': '" + formerOrderNumber + "', 'ORDER STATUS': '" + input.WorkOrderStatusUpdate.WorkOrderStatus + "': UNABLE TO IDENTIFY UNIQUELY SERVICE!");
                    }

                    // - [4] mapping the 'Order Status' field
                    if(!isWOCompleted) {
                        order.orderMessage.orderStatus = input.WorkOrderStatusUpdate.WorkOrderStatus;
                    }
                    else {
                        var updateOrderStatus = true;
                        var services = order.serviceParametersList;
                        if (services != null) {
                            for (var k = 0; k < services.count && updateOrderStatus; k++) {
                                // only if service is not live (COMPLETED or CANCELLED), the order status must be updated for this WO
                                updateOrderStatus = !ds_ws.isServiceLive(services[k].serviceParameters);
                            }
                        }
                        if(updateOrderStatus) {
                            order.orderMessage.orderStatus = "COMPLETED";
                            order.orderMessage.completionDate = new Date();
                        }
                    }
                    order.save();
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Home ORDER MADE PERSISTENT ON THE DB...");
                    Global.logDebug("<WORK ORDER STATUS UPDATE> REQUEST WITH 'ORDER #': '" +
                                                      formerOrderNumber + "', 'ORDER STATUS': '" +
                                                      input.WorkOrderStatusUpdate.WorkOrderStatus + "' WORKED CORRECTLY!");

                    // Modify on 09.04.2009:
                    // - check the status of all the child orders
                    // - if all are COMPLETED then the father order is set too
                    if (order.orderMessage.parentOrderNumber != null){
                        // update the status of the service in the parent order
                        var fatherOrderMessage = ds_ws.searchOrderMessageHomeByOrderNumber(order.orderMessage.parentOrderNumber);
                        if (fatherOrderMessage != null){
                            var fatherOrder = Order.getOrderById(fatherOrderMessage.orderId);

                            if(fatherOrder.serviceParametersList != null) {
                                var services = fatherOrder.serviceParametersList;

                                if(orderRowItemID != null) {
                                    for (var k = 0; k < services.count; k++) {
                                        if(services[k].serviceParameters.orderRowItemID == orderRowItemID) {
                                            if(isWOCompleted) {
                                                if(services[k].serviceParameters.toBeCancelled) {
                                                    services[k].serviceParameters.serviceStatus = "CANCELLED";
                                                }
                                                else {
                                                    services[k].serviceParameters.serviceStatus = "COMPLETED";
                                                }
                                            }
                                            else {
                                                services[k].serviceParameters.serviceStatus = input.WorkOrderStatusUpdate.WorkOrderStatus;
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                            fatherOrder.save();

                            if(isWOCompleted) {
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "CHECK THE STATUS OF THE CHILD ORDER IN ORDER TO UPDATE THE STATUS OF THE FATHER...");
                                // - retrieve all the child orders
                                var childOrders = ds_ws.searchOrderMessageHomeByParentOrderNumber(order.orderMessage.parentOrderNumber);
                                if (childOrders != null && childOrders.length > 0) {
                                    var updateFather = true;
                                    for (var ss = 0; ss < childOrders.length; ss++) {
                                        var child = childOrders[ss];
                                        if (child.orderStatus.toUpperCase() != "COMPLETED") {
                                            updateFather = false;
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "THE CHILD ORDER WITH ORDER # " + child.orderNumber + " HAS A STATUS NOT EQUAL TO COMPLETED...");
                                            break;
                                        }
                                    }
                                    if (updateFather){
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "ALL THE CHILD ORDERS HAVE STATUS COMPLETED, SO UPDATE THE FATHER...");
                                        fatherOrder.orderMessage.orderStatus    = order.orderMessage.orderStatus;
                                        fatherOrder.orderMessage.completionDate = new Date();
                                        fatherOrder.save();
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "UPDATE THE STATUS OF THE FATHER TO COMPLETED...");
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else{
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "Home ORDER NOT FOUND IN THE DB...");
            }
        }
        else{
    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INVALID Business Unit: " + input.WorkOrderStatusUpdate.BusinessUnit);
        }
    }

    debugPrintln("[" + ds_ws.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");
    return output;
  ]]></script>
</script>