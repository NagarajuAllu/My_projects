<?xml version="1.0" encoding="UTF-8" ?>
<script filenameHash="45775e7c2ec72844b19828e5d920bfe7" versionHash="a87ff679a2f3e71d9181a67b7542122c" name="ds_ws.updateExistingNV_BlockCircParamsForResubmit">
  <label>Update Existing NV Pair and Block Parameters For Circuit For Resubmit</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="existingLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="receivedLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="validationErrors" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="lineItemIdentifier" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="existingOrder" type="rifp">
      <type>order_ds_ws.bundleOrderSTC</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    // nv check; it loops in existing NV pair and verifies if it exists also in received one
    if(receivedLineItemContainer.circuitParameters != null) {
        for(var i=0; i<receivedLineItemContainer.circuitParameters.length; i++) {
            var receivedNVName = receivedLineItemContainer.circuitParameters[i].circuitParameter.name;
            var found = false;

            if(existingLineItemContainer.circuitParameters != null) {
                for(var j=0; j<existingLineItemContainer.circuitParameters.length && !found; j++) {
                    if(receivedNVName == existingLineItemContainer.circuitParameters[j].circuitParameter.name) {
                        // found; comparing the values
                        found = true;
                        existingLineItemContainer.circuitParameters[j].circuitParameter.value = receivedLineItemContainer.circuitParameters[i].circuitParameter.value;
                        existingLineItemContainer.circuitParameters[j].circuitParameter.action = receivedLineItemContainer.circuitParameters[i].circuitParameter.action;
                    }
                }
            }

            if(!found) {
                var position = (existingLineItemContainer.circuitParameters != null ? existingLineItemContainer.circuitParameters.length : 0);
                var containerItemPath = (existingLineItemContainer.circuitParameters != null ? existingLineItemContainer.circuitParameters.orderDataPath : (existingLineItemContainer.orderDataPath + ".circuitParameters"));
                var nvDoc = existingOrder.createOrderItemByPath(containerItemPath + "." + (position+1) + ".circuitParameter");
                nvDoc.name = receivedLineItemContainer.circuitParameters[i].circuitParameter.name;
                nvDoc.value = receivedLineItemContainer.circuitParameters[i].circuitParameter.value;
                nvDoc.action = receivedLineItemContainer.circuitParameters[i].circuitParameter.action;
                nvDoc.parentElementId = existingLineItemContainer.circuit.id;
            }
        }
    }

    // bv check; it loops in existing blockValue pair and verifies if it exists also in received one
    if(receivedLineItemContainer.circuitBlockParameters != null) {
        for(var i=0; i<receivedLineItemContainer.circuitBlockParameters.length; i++) {
            var receivedNVName = receivedLineItemContainer.circuitBlockParameters[i].circuitBlockParameter.name;
            var found = false;

            if(existingLineItemContainer.circuitBlockParameters != null) {
                for(var j=0; j<existingLineItemContainer.circuitBlockParameters.length && !found; j++) {
                    if(receivedNVName == existingLineItemContainer.circuitBlockParameters[j].circuitBlockParameter.name) {
                        // found; delete the existing
                        found = true;
                        ds_ws.deleteAllBlockValuesByParentId(existingLineItemContainer.circuitBlockParameters[j].circuitBlockParameter.id, existingOrder.id);

                        var receivedBlockValuesArray = ds_ws.getBlockValuesAsArray(receivedLineItemContainer.circuitBlockParameters[i].circuitBlockParameter.id);
                        if(receivedBlockValuesArray != null) {
                            for(var k=0; k<receivedBlockValuesArray.length; k++) {
                                 createBlockValue_(receivedBlockValuesArray[k].blockValue, existingLineItemContainer.circuitBlockParameters[j].circuitBlockParameter.id, existingOrder);
                            }
                        }
                    }
                }
            }

            if(!found) {
                var position = (existingLineItemContainer.circuitBlockParameters != null ? existingLineItemContainer.circuitBlockParameters.length : 0);
                var containerItemPath = (existingLineItemContainer.circuitBlockParameters != null ? existingLineItemContainer.circuitBlockParameters.orderDataPath : (existingLineItemContainer.orderDataPath + ".circuitBlockParameters"));
                var bvDoc = existingOrder.createOrderItemByPath(containerItemPath + "." + (position+1) + ".circuitBlockParameter");
                bvDoc.name = receivedLineItemContainer.circuitBlockParameters[i].circuitBlockParameter.name;
                bvDoc.action = receivedLineItemContainer.circuitBlockParameters[i].circuitBlockParameter.action;
                bvDoc.parentElementId = existingLineItemContainer.circuit.id;

                var receivedBlockValuesArray = ds_ws.getBlockValuesAsArray(receivedLineItemContainer.circuitBlockParameters[i].circuitBlockParameter.id);
                if(receivedBlockValuesArray != null) {
                    for(var k=0; k<receivedBlockValuesArray.length; k++) {
                         createBlockValue_(receivedBlockValuesArray[k].blockValue, bvDoc.id, existingOrder);
                    }
                }
            }
        }
    }

    return validationErrors;


    function createBlockValue_(value, parentDocId, existingOrder) {
        var blockValueDoc = new Document("ds_ws:blockValue");
        blockValueDoc.parentDocId = parentDocId;
        blockValueDoc.cwOrderId = existingOrder.id;
        blockValueDoc.blockValue = value;
        blockValueDoc.save();
    }
  ]]></script>
</script>