<?xml version="1.0" encoding="UTF-8" ?>
<script filenameHash="96d4bd025e3962bbd6a855dcb03ca397" versionHash="a87ff679a2f3e71d9181a67b7542122c" name="ds_ws.checkIfLineItemIsWaitingForGraniteResp">
  <label>Check If LineItem Is Waiting For GraniteResponse</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="existingBundleOrder" type="rifp">
      <type>order_ds_ws.bundleOrderSTC</type>
    </parameter>
    <parameter name="failureArray" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var lineItemStatusForWaiting = "Waiting for Granite Resp";

    var foundLineItemWaiting = false;
    var validationErrors = null;

    for(var i=0; i<existingBundleOrder.bundles.length; i++) {
        foundLineItemWaiting = (existingBundleOrder.bundles[i].bundle.lineItemStatus == lineItemStatusForWaiting);
        if(foundLineItemWaiting) {
            validationErrors = appendToValidationErrors_("ParentLineItem", existingBundleOrder.bundles[i].bundle.lineItemIdentifier);
        }

        if(existingBundleOrder.bundles[i].circuits != null) {
            for(var j=0; j<existingBundleOrder.bundles[i].circuits.length; j++) {
                foundLineItemWaiting = (existingBundleOrder.bundles[i].circuits[j].circuit.lineItemStatus == lineItemStatusForWaiting);
                if(foundLineItemWaiting) {
                    validationErrors = appendToValidationErrors_("Service", existingBundleOrder.bundles[i].circuits[j].circuit.lineItemIdentifier);
                }

                if(existingBundleOrder.bundles[i].circuits[j].services != null) {
                    for(var k=0; k<existingBundleOrder.bundles[i].circuits[j].services.length; k++) {
                        foundLineItemWaiting = (existingBundleOrder.bundles[i].circuits[j].services[k].service.lineItemStatus == lineItemStatusForWaiting);
                        if(foundLineItemWaiting) {
                            validationErrors = appendToValidationErrors_("SubService", existingBundleOrder.bundles[i].circuits[j].services[k].service.lineItemIdentifier);
                        }

                        if(existingBundleOrder.bundles[i].circuits[j].services[k].subServices != null) {
                            for(var l=0; l<existingBundleOrder.bundles[i].circuits[j].services[k].subServices.length; l++) {
                                foundLineItemWaiting = (existingBundleOrder.bundles[i].circuits[j].services[k].subServices[l].subService.lineItemStatus == lineItemStatusForWaiting);
                                if(foundLineItemWaiting) {
                                    validationErrors = appendToValidationErrors_("Sub-SubService", existingBundleOrder.bundles[i].circuits[j].services[k].subServices[l].subService.lineItemIdentifier);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    if(validationErrors != null) {
        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingBundleOrder.orderHeader.orderNumber, failureArray, false);
    }

    return failureArray;




    function appendToValidationErrors_(elementType, elementId) {
        var debugMsg = "checkIfThereIsALineItemWaitingForGraniteResp (" + existingBundleOrder.orderHeader.orderNumber + ")";
        return ds_ws.appendToValidationErrors("AE0086", Global.translateText("AE0086", null, [elementType, elementId]), validationErrors, debugMsg);
    }
  ]]></script>
</script>