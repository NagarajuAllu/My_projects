<?xml version="1.0" encoding="UTF-8" ?>
<script filenameHash="5d905d3127d8cbb3a2dcd9fa953d2bfc" versionHash="a87ff679a2f3e71d9181a67b7542122c" name="ds_ws.compareAndUpdateReceivedLineItemWithExistingOne">
  <label>Compare And Update Received LineItem With Existing One</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="existingLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="receivedLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="elementTypeInOrderTree" type="rifp">
      <type>dtype_ds_ws.elementTypeInOrderTree</type>
    </parameter>
    <parameter name="isCancel" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
    <parameter name="orderType" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="existingOrderWasKO" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
    <parameter name="failureArray" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var validationErrors = null;

    // extract existingLineItem and receivedLineItem from the container according to the elementTypeInOrderTree parameter
    var existingLineItem = null;
    var receivedLineItem = null;

    var childElementTypeInOrderTree = null;
    var childExistingLineItemContainer = null;
    var childReceivedLineItemContainer = null;

    if(elementTypeInOrderTree == "B") {
        existingLineItem = existingLineItemContainer.bundle;
        receivedLineItem = receivedLineItemContainer.bundle;
        childElementTypeInOrderTree = "C";
        childExistingLineItemContainer = existingLineItemContainer.circuits;
        childReceivedLineItemContainer = receivedLineItemContainer.circuits;
    }
    else if(elementTypeInOrderTree == "C") {
        existingLineItem = existingLineItemContainer.circuit;
        receivedLineItem = receivedLineItemContainer.circuit;
        childElementTypeInOrderTree = "S";
        childExistingLineItemContainer = existingLineItemContainer.services;
        childReceivedLineItemContainer = receivedLineItemContainer.services;
    }
    else if(elementTypeInOrderTree == "S") {
        existingLineItem = existingLineItemContainer.service;
        receivedLineItem = receivedLineItemContainer.service;
        childElementTypeInOrderTree = "T";
        childExistingLineItemContainer = existingLineItemContainer.subServices;
        childReceivedLineItemContainer = receivedLineItemContainer.subServices;
    }
    else if(elementTypeInOrderTree == "T") {
        existingLineItem = existingLineItemContainer.subService;
        receivedLineItem = receivedLineItemContainer.subService;
    }


    if(existingLineItem != null && receivedLineItem != null) {
        // ORIGINAL Requirements
        // all line items attributes except:
        // - the ones created by CW
        // - workOrderNumber (generated by CW while processing the order)
        // - action
        // - remarks
        // - serviceDate (as requested by Dharvesh with email 2015-07-29)
        // - creationDate (as requested by Denis with email 2015-12-08)
        // - locationACity, locationBCity (as requested by Waleed with email 2015-12-30)

        // ONLY FOR REVISE
        // and also for Cancel as requested by Lotfi (see email sent by Denis 27/10/2015 "STC SMR 1467 - SIP Backup - Post-cutover support actions")
        // - locationAContactAddress
        // - locationAContactName
        // - locationAContactTel
        // - locationAContactEmail
        // - locationBContactAddress
        // - locationBContactName
        // - locationBContactTel
        // - locationBContactEmail
        var lineItemAttributesToCheckForRevise = ["lineItemIdentifier", "lineItemType", "priority", "serviceType", "serviceNumber", "oldServiceNumber", "productType", "icmsSONumber", "fictBillingNumber",
            "referenceTelNumber", "serviceDescription", "bandwidth", "accountNumber", "oldAccountNumber", "projectId", "locationACCLICode", "locationAAccessCircuit", "locationAJVCode",
            "locationAExchangeSwitchCode", "locationAAccessType", "locationAPlateID", "locationAOldPlateID", "locationAUnitNumber", "locationAInterface", "locationARemarks", "locationBCCLICode",
            "locationBAccessCircuit", "locationBJVCode", "locationBExchangeSwitchCode", "locationBAccessType", "locationBPlateID", "locationBOldPlateID", "locationBUnitNumber", "locationBInterface",
            "locationBRemarks", "tbPortNumber", "wires", "dependencies"];

        // 2016-05-20: In Cancel, the only attributes that has to be monitored are:
        // - Service/Circuit Identifier
        // - Priority
        // - Product/Service Type
        // - LineItem Type
        var lineItemAttributesToCheckForCancel = ["lineItemIdentifier", "lineItemType", "priority", "serviceType", "serviceNumber", "productType"];

        // 2016-05-20: setting the attributes to check according to the operation (Cancel or Revise)
        var lineItemAttributesToCheck = (isCancel ? lineItemAttributesToCheckForCancel : lineItemAttributesToCheckForRevise);

        // 2015-12-30: repush for updateOrder management; in case of repush the action cannot change
        if(existingOrderWasKO && !isCancel) {
            lineItemAttributesToCheck.push("action");
        }

        for(var i=0; i<lineItemAttributesToCheck.length; i++) {
            var attributeToCheck = lineItemAttributesToCheck[i];
            compareValues_(receivedLineItem[attributeToCheck], existingLineItem[attributeToCheck], attributeToCheck, "Attribute");
        }

        // 2016-05-30: in case of Cancel, reasonCode has not to be checked
        if(!isCancel) {
            if (!ds_ws.compareReasonCodesWithExistingOnes(existingLineItem.id, receivedLineItem.id)){
               validationErrors = ds_ws.appendToValidationErrors("AE0114", Global.translateText("AE0114", null, [existingLineItem.lineItemIdentifier]), validationErrors);
            }
        }

        // checking action
        if(isCancel) {
            // possible values are: Cancel or it has to have the old value
            if(receivedLineItem.action != "C") {
                compareValues_(receivedLineItem.action, existingLineItem.action, "action", "Attribute");
            }
        }
        else {
            if(receivedLineItem.action != "M") {
                if(elementTypeInOrderTree == "B") {
                    validationErrors = ds_ws.appendToValidationErrors("AE0044", Global.translateText("AE0044", null, [orderType, receivedLineItem.action, "Revise"]), validationErrors);
                }
                else {
                    validationErrors = ds_ws.appendToValidationErrors("AE0043", Global.translateText("AE0043", null, [orderType, "M", receivedLineItem.action, "Revise"]), validationErrors);
                }
            }
        }


        if(validationErrors == null) {
            // copy processing attributes from existingLineItem to received one
            receivedLineItem.workOrderNumber = existingLineItem.workOrderNumber;
            receivedLineItem.alreadySentToGranite = existingLineItem.alreadySentToGranite;
            receivedLineItem.sentAnytimeToGranite = existingLineItem.sentAnytimeToGranite;
            receivedLineItem.alreadyReceivedCancel = existingLineItem.alreadyReceivedCancel;
            receivedLineItem.requestedActionIsA = existingLineItem.requestedActionIsA;
            receivedLineItem.provisioningFlag = existingLineItem.provisioningFlag;
            receivedLineItem.completionDate = existingLineItem.completionDate;


            // setting new action according
            if(isCancel) {
                validationErrors = ds_ws.updateLineItemActionForCancelOrder(receivedLineItem, existingLineItem, orderType, existingOrderWasKO, validationErrors);
            }
            else {
                validationErrors = ds_ws.updateLineItemActionForReviseOrder(receivedLineItem, existingLineItem, existingOrderWasKO, validationErrors);
            }

            if(validationErrors != null) {
                failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingLineItem.lineItemIdentifier, failureArray, false);
            }
        }
        else {
            failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingLineItem.lineItemIdentifier, failureArray, false);
        }

        // 2016-05-30: in case of Cancel, NV pairs and block parameters have not to be checked
        if(!isCancel) {
            // checking nvPair & blockParameters
            validationErrors = null;
            if(elementTypeInOrderTree == "B") {
                validationErrors = ds_ws.compareReceivedNV_BlockBundleParamsWithExistingOne(existingLineItemContainer, receivedLineItemContainer, validationErrors, existingLineItem.lineItemIdentifier);
            }
            else if(elementTypeInOrderTree == "C") {
                validationErrors = ds_ws.compareReceivedNV_BlockCircParamsWithExistingOne(existingLineItemContainer, receivedLineItemContainer, validationErrors, existingLineItem.lineItemIdentifier);
            }
            else if(elementTypeInOrderTree == "S") {
                validationErrors = ds_ws.compareReceivedNV_BlockServParamsWithExistingOne(existingLineItemContainer, receivedLineItemContainer, validationErrors, existingLineItem.lineItemIdentifier);
            }
            else if(elementTypeInOrderTree == "T") {
                validationErrors = ds_ws.compareReceivedNV_BlockSubSerParamsWithExistingOne(existingLineItemContainer, receivedLineItemContainer, validationErrors, existingLineItem.lineItemIdentifier);
            }


            if(validationErrors != null) {
                failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingLineItem.lineItemIdentifier, failureArray, false);
            }
        }

        // processing the child elements
        validationErrors = null;
        if(childExistingLineItemContainer != null) {
            var missingReceived = 0;
            for(var i=0; i<childExistingLineItemContainer.length; i++) {
                var existingChildLineItemId = null;
                if(childElementTypeInOrderTree == "C") {
                    existingChildLineItemId = childExistingLineItemContainer[i].circuit.lineItemIdentifier;
                }
                else if(childElementTypeInOrderTree == "S") {
                    existingChildLineItemId = childExistingLineItemContainer[i].service.lineItemIdentifier;
                }
                else if(childElementTypeInOrderTree == "T") {
                    existingChildLineItemId = childExistingLineItemContainer[i].subService.lineItemIdentifier;
                }
                var found = false;

                // search child in received
                if(childReceivedLineItemContainer != null) {
                    for(var j=0; j<childReceivedLineItemContainer.length && !found; j++) {
                        var receivedChildLineItemId = null;
                        if(childElementTypeInOrderTree == "C") {
                            receivedChildLineItemId = childReceivedLineItemContainer[j].circuit.lineItemIdentifier;
                        }
                        else if(childElementTypeInOrderTree == "S") {
                            receivedChildLineItemId = childReceivedLineItemContainer[j].service.lineItemIdentifier;
                        }
                        else if(childElementTypeInOrderTree == "T") {
                            receivedChildLineItemId = childReceivedLineItemContainer[j].subService.lineItemIdentifier;
                        }

                        if(existingChildLineItemId == receivedChildLineItemId) {
                            // found; comparing the 2 lineItems and the entire hierarchy
                            found = true;
                            failureArray = ds_ws.compareAndUpdateReceivedLineItemWithExistingOne(childExistingLineItemContainer[i], childReceivedLineItemContainer[j], childElementTypeInOrderTree, isCancel, orderType, existingOrderWasKO, failureArray);
                        }
                    }
                }

                if(!found) {
                    // not found child; adding error
                    validationErrors = ds_ws.appendToValidationErrors("AE0067", Global.translateText("AE0067", null, existingLineItem.lineItemIdentifier), validationErrors, "compareAndUpdateReceivedLineItemWithExistingOne (" + existingChildLineItemId + ")");
                    missingReceived++;
                }
            }

            if(childReceivedLineItemContainer != null) {
                if((childReceivedLineItemContainer.length + missingReceived) != childExistingLineItemContainer.length) {
                    // it means that there are additional attributes in received that are not in existing! ERROR!
                    validationErrors = ds_ws.appendToValidationErrors("AE0059", Global.translateText("AE0059",  null, [childElementTypeInOrderTree, "existing"]), validationErrors, "compareAndUpdateReceivedLineItemWithExistingOne (" + existingChildLineItemId + ")");
                }
            }
        }
        else {
            if(childReceivedLineItemContainer != null) {
                // it means that there are bundles in received that are not in existing! ERROR!
                validationErrors = ds_ws.appendToValidationErrors("AE0059", Global.translateText("AE0059",  null, [childElementTypeInOrderTree, "existing"]), validationErrors, "compareAndUpdateReceivedLineItemWithExistingOne (" + existingLineItem.lineItemIdentifier + ")");
            }
        }

        if(validationErrors != null) {
            failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingLineItem.lineItemIdentifier, failureArray, false);
        }
    }
    else {
        validationErrors = ["AE0058", Global.translateText("AE0058", null, [(existingLineItem != null ? "Received" : "Existing"), existingLineItem.lineItemIdentifier])];
        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, existingLineItem.lineItemIdentifier, failureArray, false);
    }

    return failureArray;


    function notIn_(attributeName, attributesToSkipArray) {
        var exist = false;
        for(var i=0; i<attributesToSkipArray.length && !exist; i++) {
            exist = (attributesToSkipArray[i] == attributeName);
        }
        return (!exist);
    }

    function compareValues_(receivedAttribute, existingAttribute, attributeName, category) {
        var debugMsg = "compareAndUpdateReceivedLineItemWithExistingOne (" + existingLineItem.lineItemIdentifier + ")";
        if(receivedAttribute == null) {
            if(existingAttribute != null) {
                validationErrors = ds_ws.appendToValidationErrors("AE0055", Global.translateText("AE0055", null, [category, attributeName, "existing"]), validationErrors, debugMsg);
            }
        }
        else {
            if(existingAttribute == null) {
                validationErrors = ds_ws.appendToValidationErrors("AE0057", Global.translateText("AE0057", null, [category, attributeName, "existing"]), validationErrors, debugMsg);
            }
            else {
                if(attributeName == 'creationDate' || attributeName == 'serviceDate') {
                    var receivedDate = new Date(receivedAttribute.getFullYear(), receivedAttribute.getMonth(), receivedAttribute.getDate());
                    var existingDate = new Date(existingAttribute.getFullYear(), existingAttribute.getMonth(), existingAttribute.getDate());

                    if(receivedDate.getTime() != existingDate.getTime()) {
                        validationErrors = ds_ws.appendToValidationErrors("AE0056", Global.translateText("AE0056", null, [category, attributeName, receivedDate, existingDate, "existing"]), validationErrors, debugMsg);
                    }
                }
                else {
                    if(! receivedAttribute.toString().equals(existingAttribute.toString())) {
                        validationErrors = ds_ws.appendToValidationErrors("AE0056", Global.translateText("AE0056", null, [category, attributeName, receivedAttribute, existingAttribute, "existing"]), validationErrors, debugMsg);
                    }
                }
            }
        }
    }
  ]]></script>
</script>