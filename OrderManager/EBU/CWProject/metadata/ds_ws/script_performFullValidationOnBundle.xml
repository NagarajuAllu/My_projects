<?xml version="1.0" encoding="UTF-8" ?>
<script filenameHash="fa265382213f2ee15f1e4ad984f873c8" versionHash="a87ff679a2f3e71d9181a67b7542122c" name="ds_ws.performFullValidationOnBundle">
  <label>Perform Full Validation On Bundle</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="bundleContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="failureArray" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="orderHeader" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="isSubmit" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    // bundle
    failureArray = ds_ws.validateElementOfOrder(bundleContainer.bundle, bundleContainer.bundle.lineItemIdentifier, isSubmit, failureArray);

    if(ds_ws.isLegacyService(bundleContainer) || orderHeader.orderType == "F") {
        // perform validation for legacy services and for Feasibility orders
        failureArray = ds_ws.performValidationOfMandatoryAttrsOnBundleForLegacy(bundleContainer, bundleContainer.bundle.lineItemIdentifier, orderHeader.orderType, isSubmit, failureArray);

        if(orderHeader.orderType != null && orderHeader.orderType == "F") {
            // perform custom validations for Feasibility orders
            failureArray = ds_ws.performFullValidationOnFeasibilityOrder(orderHeader, bundleContainer, isSubmit, failureArray);
        }
        else {
            // perform custom validations for Leagacy orders
            failureArray = ds_ws.performFullValidationOnLegacyOrder(orderHeader, bundleContainer, isSubmit, failureArray);
        }
    }
    else {
        // it's a bundle; if there are blockParameters or NV parameters, it's an error (HLD: OrderRestriction.1.b)
        if((bundleContainer.bundleParameters != null && bundleContainer.bundleParameters.length > 0) ||
           (bundleContainer.bundleBlockParameters != null && bundleContainer.bundleBlockParameters.length > 0)) {
            var validationError = ["AE0042", Global.translateText("AE0042")];
    debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "] performFullValidationOnBundle (" + bundleContainer.bundle.lineItemIdentifier + "): Found error [" + validationError + "]");
            failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, bundleContainer.bundle.lineItemIdentifier, failureArray, isSubmit);
        }
    }

    // check compatibility between OrderType, ParentAction and ItemAction
    if(!ds_ws.checkIfActionIsOKWithOrderTypeAndParentAction(orderHeader.orderType, orderHeader.orderStatus, null, null, bundleContainer.bundle.action, bundleContainer.bundle.serviceType, bundleContainer.bundle.lineItemStatus)) {
        var validationError = ["AE0044", Global.translateText("AE0044", null, [orderHeader.orderType, bundleContainer.bundle.action, orderHeader.orderStatus])];
    debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "] performFullValidationOnBundle (" + bundleContainer.bundle.lineItemIdentifier + "): Found error [" + validationError + "]");
        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, bundleContainer.bundle.lineItemIdentifier, failureArray, isSubmit);
    }

    if(isSubmit) {
        // to contain the instance of the bundleLineItem with provisioningFlag = "ACTIVE"
        var bundleLineItemActive = null;
        // to know if there was an error in looking for bundleLineItem "ACTIVE"
        var errorFoundInSearchingActiveBundle = false;

        // check provisioningFlag
        if((orderHeader.orderType != "I" && orderHeader.orderType != "F") ||
            (orderHeader.orderType == "F" && orderHeader.feasibilityFor != null && orderHeader.feasibilityFor == "CHANGE")) {
            // 1st request: no other provisioning processes for the lineItemIdentifier
            var bundleLineItemsProvisioning = ds_ws.getAllLineItemsByIdentifierAndProvisioningFlag(bundleContainer.bundle.lineItemIdentifier, "B", "PROVISIONING");
            if(bundleLineItemsProvisioning != null && bundleLineItemsProvisioning.length > 0) {
                errorFoundInSearchingActiveBundle = true;
                validationError = ["AE0045", Global.translateText("AE0045", null, [bundleContainer.bundle.lineItemIdentifier])];
    debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "] performFullValidationOnBundle (" + bundleContainer.bundle.lineItemIdentifier + "): Found error [" + validationError + "]");
                failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, bundleContainer.bundle.lineItemIdentifier, failureArray, isSubmit);
            }
            else {
                // 2nd request: an "ACTIVE" bundle (and only one) has to exist!
                var bundleLineItemsActive = ds_ws.getAllLineItemsByIdentifierAndProvisioningFlag(bundleContainer.bundle.lineItemIdentifier, "B", "ACTIVE");
                if(bundleLineItemsActive == null || bundleLineItemsActive.length == 0) {
                    errorFoundInSearchingActiveBundle = true;
                    validationError = ["AE0046", Global.translateText("AE0046", null, [bundleContainer.bundle.lineItemIdentifier])];
    debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "] performFullValidationOnBundle (" + bundleContainer.bundle.lineItemIdentifier + "): Found error [" + validationError + "]");
                    failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, bundleContainer.bundle.lineItemIdentifier, failureArray, isSubmit);
                }
                else if(bundleLineItemsActive.length > 1) {
                    errorFoundInSearchingActiveBundle = true;
                    validationError = ["AE0047", Global.translateText("AE0047", null, [bundleContainer.bundle.lineItemIdentifier])];
    debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "] performFullValidationOnBundle (" + bundleContainer.bundle.lineItemIdentifier + "): Found error [" + validationError + "]");
                    failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationError, bundleContainer.bundle.lineItemIdentifier, failureArray, isSubmit);
                }
                else {
                    bundleLineItemActive = bundleLineItemsActive[0];
                }
            }
        }

        if(!errorFoundInSearchingActiveBundle) {
            if(isSubmit) {
                // check lineItemIdentifier existance ds_ws.checkIfActionIsCorrectForLineItemIdentifier(bundleLineItemActive, lineItemToCheck)
                var validationErrors = ds_ws.checkIfActionIsCorrectForLineItemIdentifier(bundleLineItemActive, bundleContainer.bundle);
                if(validationErrors != null) {
                    failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleContainer.bundle.lineItemIdentifier, failureArray, isSubmit);
                }
            }
        }


        if(orderHeader.orderType == "O" && ds_ws.isLegacyService(bundleContainer)) {
            var validationErrors = granite.checkPathChannelUtilization(bundleContainer.bundle.serviceNumber);
            if(validationErrors != null) {
                failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleContainer.bundle.lineItemIdentifier, failureArray, isSubmit);
            }
        }
    }

    // bundle NV pair
    if(bundleContainer.bundleParameters != null) {
        for(var i=0; i<bundleContainer.bundleParameters.length; i++) {
            failureArray = ds_ws.validateElementOfOrder(bundleContainer.bundleParameters[i], bundleContainer.bundle.lineItemIdentifier, isSubmit, failureArray);
            failureArray = ds_ws.validateNVPairValueForServiceTypeInPickList(bundleContainer.bundle.serviceType, bundleContainer.bundle.lineItemIdentifier,
                                                                             bundleContainer.bundleParameters[i].bundleParameter.name, bundleContainer.bundleParameters[i].bundleParameter.value,
                                                                             isSubmit, failureArray);
        }

        failureArray = ds_ws.performValidationOfMandatoryNVPairs(bundleContainer.bundleParameters, orderHeader.orderType, bundleContainer.bundle.serviceType, bundleContainer.bundle.lineItemIdentifier, isSubmit, failureArray);
    }

    // bundle Block NV pair
    if(bundleContainer.bundleBlockParameters != null) {
        for(var i=0; i<bundleContainer.bundleBlockParameters.length; i++) {
            failureArray = ds_ws.validateElementOfOrder(bundleContainer.bundleBlockParameters[i], bundleContainer.bundle.lineItemIdentifier, isSubmit, failureArray);
        }
    }


    // circuits
    if(bundleContainer.circuits != null) {

        if(orderHeader.orderType != null && orderHeader.orderType == "F") {
            // feasibility orders support only 1 parent LineItem
            var validationErrors = ["AE0095", Global.translateText("AE0095", null, ["Feasibility Order", "Service"])];
            failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleContainer.bundle.lineItemIdentifier, failureArray, isSubmit);
        }
        else if(orderHeader.reservationNumber != null) {
            // orders linked to reservation support only 1 parent LineItem
            var validationErrors = ["AE0095", Global.translateText("AE0095", null, ["Order linked to Reservation", "Service"])];
            failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleContainer.bundle.lineItemIdentifier, failureArray, isSubmit);
        }


        for(var i=0; i<bundleContainer.circuits.length; i++) {
            var circuitContainer = bundleContainer.circuits[i];
            failureArray = ds_ws.performFullValidationOnCircuit(circuitContainer, failureArray, orderHeader.orderType, orderHeader.orderStatus, bundleContainer.bundle.action, bundleContainer.bundle.lineItemStatus, bundleLineItemActive, isSubmit);
        }
    }

    return failureArray;
  ]]></script>
</script>