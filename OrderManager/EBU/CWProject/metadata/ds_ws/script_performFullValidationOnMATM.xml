<?xml version="1.0" encoding="UTF-8" ?>
<script filenameHash="2f9ee1d5d90236d0c8d513dcda54ba35" versionHash="a87ff679a2f3e71d9181a67b7542122c" name="ds_ws.performFullValidationOnMATM">
  <label>Perform Full Validation On MATM</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="bundleOrder" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="isSubmit" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
    <parameter name="failureArray" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var validationErrors = null;

    var validationErrors = null;
    var noIssueInCheck = true;


    var reasonCodeForBundleChanged = "Bundle Changed";

    /*****
     * Loading Definition from DB
     ***/
    var bundleMATMProductTypes  = ds_ws.getAllCRMProductTypesForOMInternalProductType("Bundle MATM");
    if(bundleMATMProductTypes == null || bundleMATMProductTypes.length == 0) {
        validationErrors = ["AE0083", Global.translateText("AE0083", null, "Bundle MATM")];
        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
        noIssueInCheck = false;
    }

    var IPVPNServiceTypeName = ds_ws.getCRMServiceTypeForOMInternalServiceType("MATM/IPVPN");
    if(IPVPNServiceTypeName == null) {
        validationErrors = ["AE0084", Global.translateText("AE0084", null, "MATM/IPVPN")];
        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
        noIssueInCheck = false;
    }
    var VSATServiceTypeName  = ds_ws.getCRMServiceTypeForOMInternalServiceType("MATM/VSAT");
    if(VSATServiceTypeName == null) {
        validationErrors = ["AE0084", Global.translateText("AE0084", null, "MATM/VSAT")];
        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
        noIssueInCheck = false;
    }
    var MOBILEServiceTypeName  = ds_ws.getCRMServiceTypeForOMInternalServiceType("MATM/MOBILE");
    if(MOBILEServiceTypeName == null) {
        validationErrors = ["AE0084", Global.translateText("AE0084", null, "MATM/MOBILE")];
        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.orderHeader.orderNumber, failureArray, isSubmit);
        noIssueInCheck = false;
    }

    if(noIssueInCheck) {
        // performing validations according to the productType of the bundle
        for(var i=0; i<bundleOrder.bundles.length; i++) {
            var bundleContainer = bundleOrder.bundles[i];
            var bundleProductType = bundleContainer.bundle.productType;
            if(isMATMProductType_(bundleProductType)) {
                // implement checks for MATM Bundle:
                // 1. - Possible situations are:
                //      - IPVPN + VSAT
                //      - IPVPN + MOBILE
                //      - VSAT + MOBILE
                //      - IPVPN
                //      - MOBILE
                // 2. - No other circuits can be accepted except IPVPN, VSAT, MOBILE
                // 3. - reject if action on VSAT == "Add" or == "Delete" and IPVPN <> "Modify"
                // 4. - reject if action on MOBILE == "Add" or == "Delete" and IPVPN <> "Modify"

                // 1st check: circuits of the bundle
                var foundIPVPNLineItemIdentifier = null;
                var foundIPVPNLineItemAction = null;
                var foundIPVPNLineItemPosition = null;
                var foundVSATLineItemIdentifier = null;
                var foundVSATLineItemAction = null;
                var foundVSATLineItemPosition = null;
                var foundMOBILELineItemIdentifier = null;
                var foundMOBILELineItemAction = null;
                var foundMOBILELineItemPosition = null;
                var noIssueInCheck = true;
                for(var j=0; j<bundleContainer.circuits.length; j++) {
                    var serviceType = bundleContainer.circuits[j].circuit.serviceType;
                    var circuitIdentifier = bundleContainer.circuits[j].circuit.lineItemIdentifier;
                    if(serviceType == IPVPNServiceTypeName) {
                        if(foundIPVPNLineItemIdentifier != null) {
                            // found too many IPVPN circuits
                            validationErrors = ["AE0060", Global.translateText("AE0060", null, [serviceType, circuitIdentifier, foundIPVPNLineItemIdentifier, bundleProductType])];
                            failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                            noIssueInCheck = false;
                        }
                        else {
                            foundIPVPNLineItemIdentifier = bundleContainer.circuits[j].circuit.lineItemIdentifier;
                            foundIPVPNLineItemAction = bundleContainer.circuits[j].circuit.action;
                            foundIPVPNLineItemPosition = j;
                        }
                    }
                    else if(serviceType == VSATServiceTypeName) {
                        if(foundVSATLineItemIdentifier != null) {
                            // found too many VSAT circuits
                            validationErrors = ["AE0060", Global.translateText("AE0060", null, [serviceType, circuitIdentifier, foundVSATLineItemIdentifier, bundleProductType])];
                            failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                            noIssueInCheck = false;
                        }
                        else {
                            foundVSATLineItemIdentifier = bundleContainer.circuits[j].circuit.lineItemIdentifier;
                            foundVSATLineItemAction = bundleContainer.circuits[j].circuit.action;
                            foundVSATLineItemPosition = j;
                        }
                    }
                    else if(serviceType == MOBILEServiceTypeName) {
                        if(foundMOBILELineItemIdentifier != null) {
                            // found too many VSAT circuits
                            validationErrors = ["AE0060", Global.translateText("AE0060", null, [serviceType, circuitIdentifier, foundMOBILELineItemIdentifier, bundleProductType])];
                            failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                            noIssueInCheck = false;
                        }
                        else {
                            foundMOBILELineItemIdentifier = bundleContainer.circuits[j].circuit.lineItemIdentifier;
                            foundMOBILELineItemAction = bundleContainer.circuits[j].circuit.action;
                            foundMOBILELineItemPosition = j;
                        }
                    }
                    else {
                        validationErrors = ["AE0061", Global.translateText("AE0061", null, [serviceType, circuitIdentifier, bundleProductType])];
                        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                        noIssueInCheck = false;
                    }
                }


                // 2nd check: check if it's a valid combination of circuit LineItems
                var validCombination = (foundIPVPNLineItemIdentifier != null && foundVSATLineItemIdentifier != null && foundMOBILELineItemIdentifier == null) ||
                                       (foundIPVPNLineItemIdentifier != null && foundVSATLineItemIdentifier == null && foundMOBILELineItemIdentifier != null) ||
                                       (foundIPVPNLineItemIdentifier == null && foundVSATLineItemIdentifier != null && foundMOBILELineItemIdentifier != null) ||
                                       (foundIPVPNLineItemIdentifier != null && foundVSATLineItemIdentifier == null && foundMOBILELineItemIdentifier == null) ||
                                       (foundIPVPNLineItemIdentifier == null && foundVSATLineItemIdentifier == null && foundMOBILELineItemIdentifier != null);

                if(!validCombination) {
                    validationErrors = ["AE0077", Global.translateText("AE0077", null, [IPVPNServiceTypeName, (foundIPVPNLineItemIdentifier != null ? "Y" : "N"),
                                                                                        VSATServiceTypeName, (foundVSATLineItemIdentifier != null ? "Y" : "N"),
                                                                                        MOBILEServiceTypeName, (foundMOBILELineItemIdentifier != null ? "Y" : "N")])];
                    failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                    noIssueInCheck = false;
                }

                if(noIssueInCheck) {
                    if(bundleOrder.orderHeader.orderType == 'C') {
                        // 3rd check: reject if "VSAT".action == "Add" or "Delete" and "IPVPN".action <> "Modify" in Change order
                        if(foundVSATLineItemAction == "A" || foundVSATLineItemAction == "D") {
                            if(foundIPVPNLineItemIdentifier != null) {
                                if(foundIPVPNLineItemAction != "M" && foundIPVPNLineItemAction != "N") {
                                    validationErrors = ["AE0078", Global.translateText("AE0078", null, [IPVPNServiceTypeName, foundIPVPNLineItemIdentifier, VSATServiceTypeName, foundVSATLineItemIdentifier, foundVSATLineItemAction])];
                                    failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                                }
                                else {
                                    if(foundIPVPNLineItemAction == "N") {
                                        // new requirement from NSS STC (see email thread: "Upgrade and Downgrade scenarios changes - MATM - HLD - PB1"
                                        // the request is: if the action in IPVPN is "N", OM has to:
                                        // - change the action to "M"
                                        // - add a reason code equals to "Bundle Changed"
                                        bundleContainer.circuits[foundIPVPNLineItemPosition].circuit.action = "M";
                                        bundleContainer.circuits[foundIPVPNLineItemPosition].circuit.lineItemStatus = "Hold";
                                        createReasonCode_(reasonCodeForBundleChanged, bundleContainer.circuits[foundIPVPNLineItemPosition].circuit.id);
                                    }
                                }
                            }
                            else if(foundMOBILELineItemIdentifier != null) {
                                if(foundMOBILELineItemAction != "M" && foundMOBILELineItemAction != "N") {
                                    validationErrors = ["AE0078", Global.translateText("AE0078", null, [MOBILEServiceTypeName, foundMOBILELineItemIdentifier, VSATServiceTypeName, foundVSATLineItemIdentifier, foundVSATLineItemAction])];
                                    failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                                }
                                else {
                                    if(foundMOBILELineItemAction == "N") {
                                        // new requirement from NSS STC (see email thread: "Upgrade and Downgrade scenarios changes - MATM - HLD - PB1"
                                        // the request is: if the action in Mobile is "N", OM has to:
                                        // - change the action to "M"
                                        // - add a reason code equals to "Bundle Changed"
                                        bundleContainer.circuits[foundMOBILELineItemPosition].circuit.action = "M";
                                        bundleContainer.circuits[foundMOBILELineItemPosition].circuit.lineItemStatus = "Hold";
                                        createReasonCode_(reasonCodeForBundleChanged, bundleContainer.circuits[foundMOBILELineItemPosition].circuit.id);
                                    }
                                }
                            }
                            else {
                                validationErrors = ["AE0079", Global.translateText("AE0079", null, [VSATServiceTypeName, foundVSATLineItemIdentifier, foundVSATLineItemAction])];
                                failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                            }
                        }

                        // 4th check: reject if "MOBILE".action == "Add" or "Delete" and "IPVPN".action <> "Modify" in Change order
                        if(foundMOBILELineItemAction == "A" || foundMOBILELineItemAction == "D") {
                            if(foundIPVPNLineItemIdentifier != null) {
                                if(foundIPVPNLineItemAction != "M" && foundIPVPNLineItemAction != "N") {
                                    validationErrors = ["AE0078", Global.translateText("AE0078", null, [IPVPNServiceTypeName, foundIPVPNLineItemIdentifier, MOBILEServiceTypeName, foundMOBILELineItemIdentifier, foundMOBILELineItemAction])];
                                    failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                                }
                                else {
                                    if(foundIPVPNLineItemAction == "N") {
                                        // new requirement from NSS STC (see email thread: "Upgrade and Downgrade scenarios changes - MATM - HLD - PB1"
                                        // the request is: if the action in IPVPN is "N", OM has to:
                                        // - change the action to "M"
                                        // - add a reason code equals to "Bundle Changed"
                                        bundleContainer.circuits[foundIPVPNLineItemPosition].circuit.action = "M";
                                        bundleContainer.circuits[foundIPVPNLineItemPosition].circuit.lineItemStatus = "Hold";
                                        createReasonCode_(reasonCodeForBundleChanged, bundleContainer.circuits[foundIPVPNLineItemPosition].circuit.id);
                                    }
                                }
                            }
                            else {
                                validationErrors = ["AE0079", Global.translateText("AE0079", null, [MOBILEServiceTypeName, foundMOBILELineItemIdentifier, foundMOBILELineItemAction])];
                                failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                            }
                        }

                        // 5th check: reject if "MOBILE".action == "Delete" and there are no other circuits
                        if(foundMOBILELineItemAction == "D" && foundIPVPNLineItemIdentifier == null && foundVSATLineItemIdentifier == null) {
                            validationErrors = ["AE0079", Global.translateText("AE0079", null, [MOBILEServiceTypeName, foundMOBILELineItemIdentifier, foundMOBILELineItemAction])];
                            failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                        }

                        // 6th check: reject if "IPVPN".action == "Delete" ...
                        if(foundIPVPNLineItemAction == "D") {
                            if(foundVSATLineItemIdentifier == null && foundMOBILELineItemIdentifier == null) {
                                // ... and there are no other circuits, then error!
                                validationErrors = ["AE0079", Global.translateText("AE0079", null, [IPVPNServiceTypeName, foundIPVPNLineItemIdentifier, foundIPVPNLineItemAction])];
                                failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                            }
                            else {
                                if(foundMOBILELineItemIdentifier != null) {
                                    // ... it means that there is MOBILE
                                    if(foundMOBILELineItemAction != "M" && foundMOBILELineItemAction != "N") {
                                        validationErrors = ["AE0078", Global.translateText("AE0078", null, [MOBILEServiceTypeName, foundMOBILELineItemIdentifier, VSATServiceTypeName, foundVSATLineItemIdentifier, foundVSATLineItemAction])];
                                        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                                    }
                                    else {
                                        if(foundMOBILELineItemAction == "N") {
                                            // new requirement from NSS STC (see email thread: "Upgrade and Downgrade scenarios changes - MATM - HLD - PB1"
                                            // the request is: if the action in Mobile is "N", OM has to:
                                            // - change the action to "M"
                                            // - add a reason code equals to "Bundle Changed"
                                            bundleContainer.circuits[foundMOBILELineItemPosition].circuit.action = "M";
                                            bundleContainer.circuits[foundMOBILELineItemPosition].circuit.lineItemStatus = "Hold";
                                            createReasonCode_(reasonCodeForBundleChanged, bundleContainer.circuits[foundMOBILELineItemPosition].circuit.id);
                                        }
                                    }
                                }
                                else {
                                    validationErrors = ["AE0079", Global.translateText("AE0079", null, [IPVPNServiceTypeName, foundIPVPNLineItemIdentifier, foundIPVPNLineItemAction])];
                                    failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                                }
                            }
                        }


                        // 7th check: reject if "IPVPN".action == "Add" ...
                        if(foundIPVPNLineItemAction == "A") {
                            if(foundVSATLineItemIdentifier == null && foundMOBILELineItemIdentifier == null) {
                                // ... and there are no other circuits, then error!
                                validationErrors = ["AE0079", Global.translateText("AE0079", null, [IPVPNServiceTypeName, foundIPVPNLineItemIdentifier, foundIPVPNLineItemAction])];
                                failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                            }
                            else {
                                if(foundVSATLineItemIdentifier != null) {
                                    // ... there is also VSAT
                                    if(foundVSATLineItemAction != "M" && foundVSATLineItemAction != "N") {
                                        validationErrors = ["AE0078", Global.translateText("AE0078", null, [VSATServiceTypeName, foundVSATLineItemIdentifier, MOBILEServiceTypeName, foundMOBILELineItemIdentifier, foundMOBILELineItemAction])];
                                        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                                    }
                                    else {
                                        if(foundVSATLineItemAction == "N") {
                                            // new requirement from NSS STC (see email thread: "Upgrade and Downgrade scenarios changes - MATM - HLD - PB1"
                                            // the request is: if the action in IPVPN is "N", OM has to:
                                            // - change the action to "M"
                                            // - add a reason code equals to "Bundle Changed"
                                            bundleContainer.circuits[foundVSATLineItemPosition].circuit.action = "M";
                                            bundleContainer.circuits[foundVSATLineItemPosition].circuit.lineItemStatus = "Hold";
                                            createReasonCode_(reasonCodeForBundleChanged, bundleContainer.circuits[foundVSATLineItemPosition].circuit.id);
                                        }
                                    }
                                }
                                else if(foundMOBILELineItemIdentifier != null) {
                                    // ... it means that there is MOBILE
                                    if(foundMOBILELineItemAction != "M" && foundMOBILELineItemAction != "N") {
                                        validationErrors = ["AE0078", Global.translateText("AE0078", null, [MOBILEServiceTypeName, foundMOBILELineItemIdentifier, VSATServiceTypeName, foundVSATLineItemIdentifier, foundVSATLineItemAction])];
                                        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, bundleOrder.bundles[i].bundle.lineItemIdentifier, failureArray, isSubmit);
                                    }
                                    else {
                                        if(foundMOBILELineItemAction == "N") {
                                            // new requirement from NSS STC (see email thread: "Upgrade and Downgrade scenarios changes - MATM - HLD - PB1"
                                            // the request is: if the action in Mobile is "N", OM has to:
                                            // - change the action to "M"
                                            // - add a reason code equals to "Bundle Changed"
                                            bundleContainer.circuits[foundMOBILELineItemPosition].circuit.action = "M";
                                            bundleContainer.circuits[foundMOBILELineItemPosition].circuit.lineItemStatus = "Hold";
                                            createReasonCode_(reasonCodeForBundleChanged, bundleContainer.circuits[foundMOBILELineItemPosition].circuit.id);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    return failureArray;

    function isMATMProductType_(foundProductType) {
        var found = false;
        for(var i=0; i<bundleMATMProductTypes.length && !found; i++) {
            found = (foundProductType == bundleMATMProductTypes[i]);
        }

        return found;
    }


    function createReasonCode_(value, parentDocId) {
        var reasonCodeDoc = new Document("ds_ws:reasonCode");
        reasonCodeDoc.parentDocId = parentDocId;
        reasonCodeDoc.cwOrderId = bundleOrder.id;
        reasonCodeDoc.reasonCode = value;
        reasonCodeDoc.save();

    debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "] performFullValidationOnMATM (" + bundleOrder.orderHeader.orderNumber + ") - created ReasonCode(" + value + ") for lineItem " + parentDocId);

    }
  ]]></script>
</script>