<?xml version="1.0" encoding="UTF-8" ?>
<script filenameHash="dd77ca7d590e24ad024de6bb59e62bec" versionHash="a87ff679a2f3e71d9181a67b7542122c" name="ds_ws.checkReceivedItemCompliantWithActive_Transer">
  <label>Check If Received LineItem Is Compliant With Active For Transfer</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="receivedLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="activeLineItemContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="elementTypeInOrderTree" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="parentAccountNumber" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="parentOldAccountNumber" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="parentFictBillingNumber" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="failureArray" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="bundleIdentifier" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="isOrderMigrated" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var validationErrors = null;

    // extract existingLineItem and receivedLineItem from the container according to the elementTypeInOrderTree parameter
    var activeLineItem = null;
    var receivedLineItem = null;

    var childElementTypeInOrderTree = null;
    var childActiveLineItemContainer = null;
    var childReceivedLineItemContainer = null;

    if(elementTypeInOrderTree == "B") {
        activeLineItem = activeLineItemContainer.bundle;
        receivedLineItem = receivedLineItemContainer.bundle;
        childElementTypeInOrderTree = "C";
        childActiveLineItemContainer = activeLineItemContainer.circuits;
        childReceivedLineItemContainer = receivedLineItemContainer.circuits;
    }
    else if(elementTypeInOrderTree == "C") {
        activeLineItem = activeLineItemContainer.circuit;
        receivedLineItem = receivedLineItemContainer.circuit;
        childElementTypeInOrderTree = "S";
        childActiveLineItemContainer = activeLineItemContainer.services;
        childReceivedLineItemContainer = receivedLineItemContainer.services;
    }
    else if(elementTypeInOrderTree == "S") {
        activeLineItem = activeLineItemContainer.service;
        receivedLineItem = receivedLineItemContainer.service;
        childElementTypeInOrderTree = "T";
        childActiveLineItemContainer = activeLineItemContainer.subServices;
        childReceivedLineItemContainer = receivedLineItemContainer.subServices;
    }
    else if(elementTypeInOrderTree == "T") {
        activeLineItem = activeLineItemContainer.subService;
        receivedLineItem = receivedLineItemContainer.subService;
    }

    if(receivedLineItem != null && activeLineItem != null) {

        // all line items attributes except:
        // - the ones created by CW
        // - workOrderNumber (generated by CW while processing the order)
        // - remarks (updated by WOSU events)
        // - creationDate & serviceDate (updated while creating the new instance of the order)
        // - action
        // - and accountNumber/oldAccountNumber/fictBillingNumber ==>  OF COURSE!!! they are the only one that can change in Transfer orders
        // 2015-07-13 (mail from Waleed): also icmsSONumber can change!
        // 2015-12-30 (mail from Waleed): remove checks for locationACity & locationBCity
        var lineItemAttributesToCheck = ["lineItemIdentifier", "lineItemType", "priority", "serviceType", "serviceNumber", "oldServiceNumber", "productType", "referenceTelNumber",
            "serviceDescription", "bandwidth", "projectId", "locationACCLICode", "locationAAccessCircuit", "locationAJVCode", "locationAExchangeSwitchCode", "locationAAccessType", "locationAPlateID",
            "locationAOldPlateID", "locationAContactAddress", "locationAContactName", "locationAContactTel", "locationAContactEmail", "locationAUnitNumber", "locationAInterface", "locationARemarks",
            "locationBCCLICode", "locationBAccessCircuit", "locationBJVCode", "locationBExchangeSwitchCode", "locationBAccessType", "locationBPlateID", "locationBOldPlateID", "locationBContactAddress",
            "locationBContactName", "locationBContactTel", "locationBContactEmail", "locationBUnitNumber", "locationBInterface", "locationBRemarks", "tbPortNumber", "wires", "dependencies"];

        var lineItemAttributesToSkipForMigration = ["lineItemType", "locationACCLICode", "locationAAccessCircuit", "locationAJVCode", "locationAExchangeSwitchCode", "locationAAccessType", "locationAPlateID",
            "locationAOldPlateID", "locationAContactAddress", "locationAContactName", "locationAContactTel", "locationAContactEmail", "locationAUnitNumber", "locationAInterface", "locationARemarks",
            "locationBCCLICode", "locationBAccessCircuit", "locationBJVCode", "locationBExchangeSwitchCode", "locationBAccessType", "locationBPlateID", "locationBOldPlateID", "locationBContactAddress",
            "locationBContactName", "locationBContactTel", "locationBContactEmail", "locationBUnitNumber", "locationBInterface", "locationBRemarks"];

        for(var i=0; i<lineItemAttributesToCheck.length; i++) {
            var attributeToCheck = lineItemAttributesToCheck[i];
            if(!isOrderMigrated || notIn_(attributeToCheck, lineItemAttributesToSkipForMigration)) {
                compareValues_(receivedLineItem[attributeToCheck], activeLineItem[attributeToCheck], attributeToCheck, "Attribute");
            }
        }

        /*****
         * Commented as requested by Waleed and Rao - refer to email thread "Transfer orders - validation rules" started Tue 2015-08-11
         *
         *
         *  if(elementTypeInOrderTree == "S" || elementTypeInOrderTree == "T") {
         *      // checking that accountNumber is the same of the parent
         *     compareWithParentValue_(receivedLineItem.accountNumber, parentAccountNumber, "accountNumber", "Attribute");
         *
         *     // checking that oldAccountNumber is the same of the parent
         *     compareWithParentValue_(receivedLineItem.oldAccountNumber, parentOldAccountNumber, "oldAccountNumber", "Attribute");
         *
         *     // checking that oldAccountNumber is the same of the parent
         *     compareWithParentValue_(receivedLineItem.fictBillingNumber, parentFictBillingNumber, "fictBillingNumber", "Attribute");
         *  }
         *
         ****/

        if(validationErrors != null) {
            failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, activeLineItem.lineItemIdentifier, failureArray, true);
        }

        // checking nvPair & blockParameters
        validationErrors = null;

        /****
         * Commented as requested by Waleed and Dharvesh - refer to email thread "Transfer NV pair validations : HIGH PRIORITY" started Wed 2015-08-05
         *
         *
         *    if(elementTypeInOrderTree == "B") {
         *        validationErrors = ds_ws.compareReceivedNV_BlockBundleParamsWithExistingOne(activeLineItemContainer, receivedLineItemContainer, validationErrors, activeLineItem.lineItemIdentifier);
         *    }
         *    else if(elementTypeInOrderTree == "C") {
         *        validationErrors = ds_ws.compareReceivedNV_BlockCircParamsWithExistingOne(activeLineItemContainer, receivedLineItemContainer, validationErrors, activeLineItem.lineItemIdentifier);
         *    }
         *    else if(elementTypeInOrderTree == "S") {
         *        validationErrors = ds_ws.compareReceivedNV_BlockServParamsWithExistingOne(activeLineItemContainer, receivedLineItemContainer, validationErrors, activeLineItem.lineItemIdentifier);
         *    }
         *    else if(elementTypeInOrderTree == "T") {
         *        validationErrors = ds_ws.compareReceivedNV_BlockSubSerParamsWithExistingOne(activeLineItemContainer, receivedLineItemContainer, validationErrors, activeLineItem.lineItemIdentifier);
         *    }
         *
         *    if(validationErrors != null) {
         *        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, activeLineItem.lineItemIdentifier, failureArray, true);
         *    }
         ***/


        // processing the child elements
        validationErrors = null;
        if(childActiveLineItemContainer != null) {
            var missingReceived = 0;
            for(var i=0; i<childActiveLineItemContainer.length; i++) {
                var activeChildLineItemId = null;
                if(childElementTypeInOrderTree == "C") {
                    activeChildLineItemId = childActiveLineItemContainer[i].circuit.lineItemIdentifier;
                }
                else if(childElementTypeInOrderTree == "S") {
                    activeChildLineItemId = childActiveLineItemContainer[i].service.lineItemIdentifier;
                }
                else if(childElementTypeInOrderTree == "T") {
                    activeChildLineItemId = childActiveLineItemContainer[i].subService.lineItemIdentifier;
                }
                var found = false;

                // search child in received
                if(childReceivedLineItemContainer != null) {
                    for(var j=0; j<childReceivedLineItemContainer.length && !found; j++) {
                        var receivedChildLineItemId = null;

                        if(childElementTypeInOrderTree == "C") {
                            receivedChildLineItemId = childReceivedLineItemContainer[j].circuit.lineItemIdentifier;
                            parentAccountNumber = childReceivedLineItemContainer[j].circuit.accountNumber;
                            parentOldAccountNumber = childReceivedLineItemContainer[j].circuit.oldAccountNumber;
                            parentFictBillingNumber = childReceivedLineItemContainer[j].circuit.fictBillingNumber;
                        }
                        else if(childElementTypeInOrderTree == "S") {
                            receivedChildLineItemId = childReceivedLineItemContainer[j].service.lineItemIdentifier;
                        }
                        else if(childElementTypeInOrderTree == "T") {
                            receivedChildLineItemId = childReceivedLineItemContainer[j].subService.lineItemIdentifier;
                        }

                        if(activeChildLineItemId == receivedChildLineItemId) {
                            // found; comparing the 2 lineItems and the entire hierarchy
                            found = true;
                            failureArray = ds_ws.checkReceivedItemCompliantWithActive_Transer(childReceivedLineItemContainer[j], childActiveLineItemContainer[i], childElementTypeInOrderTree,
                                                                                              parentAccountNumber, parentOldAccountNumber, parentFictBillingNumber,
                                                                                              failureArray, bundleIdentifier, isOrderMigrated);
                        }
                    }
                }

                if(!found) {
                    // not found child; adding error
                    validationErrors = ds_ws.appendToValidationErrors("AE0049", Global.translateText("AE0049", null, [activeLineItem.lineItemIdentifier, bundleIdentifier]), validationErrors, "checkReceivedItemCompliantWithActiveTranser (" + activeChildLineItemId + ")");
                    missingReceived++;
                }
            }

            if(childReceivedLineItemContainer != null) {
                if((childReceivedLineItemContainer.length + missingReceived) != childActiveLineItemContainer.length) {
                    // it means that there are additional attributes in received that are not in existing! ERROR!
                    validationErrors = ds_ws.appendToValidationErrors("AE0059", Global.translateText("AE0059",  null, [childElementTypeInOrderTree, "\"ACTIVE\""]), validationErrors, "checkReceivedItemCompliantWithActiveTranser (" + activeChildLineItemId + ")");
                }
            }
        }
        else {
            if(childReceivedLineItemContainer != null) {
                // it means that there are bundles in received that are not in existing! ERROR!
                validationErrors = ds_ws.appendToValidationErrors("AE0059", Global.translateText("AE0059",  null, [childElementTypeInOrderTree, "\"ACTIVE\""]), validationErrors, "checkReceivedItemCompliantWithActiveTranser (" + activeChildLineItemId.lineItemIdentifier + ")");
            }
        }

        if(validationErrors != null) {
            failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, activeLineItem.lineItemIdentifier, failureArray, true);
        }
    }
    else {
        validationErrors = ["AE0058", Global.translateText("AE0058", null, [(receivedLineItem != null ? "Received" : "Active"), receivedLineItem.lineItemIdentifier])];
        failureArray = ds_ws.addValidationErrorsToFailureArrayForSub_UpdInWD(validationErrors, receivedLineItem.lineItemIdentifier, failureArray, true);
    }

    return failureArray;



    function notIn_(attributeName, attributesToSkipArray) {
        var exist = false;
        for(var i=0; i<attributesToSkipArray.length && !exist; i++) {
            exist = (attributesToSkipArray[i] == attributeName);
        }
        return (!exist);
    }


    function compareWithParentValue_(receivedAttribute, activeAttribute, attributeName, category) {
        compare2Values_(receivedAttribute, activeAttribute, attributeName, "parent");
    }

    function compareValues_(receivedAttribute, activeAttribute, attributeName, category) {
        compare2Values_(receivedAttribute, activeAttribute, attributeName, "\"ACTIVE\"");
    }

    function compare2Values_(receivedAttribute, activeAttribute, attributeName, msgInError, category) {
        var debugMsg = "checkReceivedItemCompliantWithActiveTranser (" + activeLineItem.lineItemIdentifier + ")";
        if(receivedAttribute == null) {
            if(activeAttribute != null) {
                validationErrors = ds_ws.appendToValidationErrors("AE0055", Global.translateText("AE0055", null, [category, attributeName, msgInError]), validationErrors, debugMsg);
            }
        }
        else {
            if(activeAttribute == null) {
                validationErrors = ds_ws.appendToValidationErrors("AE0057", Global.translateText("AE0057", null, [category, attributeName, msgInError]), validationErrors, debugMsg);
            }
            else {
                if(attributeName == 'creationDate' || attributeName == 'serviceDate') {
                    var receivedDate = new Date(receivedAttribute.getFullYear(), receivedAttribute.getMonth(), receivedAttribute.getDate());
                    var activeDate = new Date(activeAttribute.getFullYear(), activeAttribute.getMonth(), activeAttribute.getDate());

                    if(receivedDate.getTime() != activeDate.getTime()) {
                        validationErrors = ds_ws.appendToValidationErrors("AE0056", Global.translateText("AE0056", null, [category, attributeName, receivedDate, activeDate, msgInError]), validationErrors, debugMsg);
                    }
                }
                else {
                    if(! receivedAttribute.toString().equals(activeAttribute.toString())) {
                        validationErrors = ds_ws.appendToValidationErrors("AE0056", Global.translateText("AE0056", null, [category, attributeName, receivedAttribute, activeAttribute, msgInError]), validationErrors, debugMsg);
                    }
                }
            }
        }
    }
  ]]></script>
</script>