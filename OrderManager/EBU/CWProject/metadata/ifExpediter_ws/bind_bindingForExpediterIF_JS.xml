<?xml version="1.0" encoding="UTF-8" ?>
<binding filenameHash="762a2e195ff00fc6e930238d5ce2bc7a" versionHash="eccbc87e4b5ce2fe28308fd9f2a7baf3" name="ifExpediter_ws.bindingForExpediterIF_JS">
  <extensionList>
    <extension name="operation_CustomerInformationUpdate" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          var debug = "[[1] BINDING FOR EXPEDITER INTERFACE [JAVASCRIPT]: CUSTOMER INFORMATION UPDATE] ";
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "START...");
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INPUT: " + input + "...");

                var output = null;

                // -----------------------------------------------------
                // USING THIS BECAUSE OF EXPEDITER BUG [TR # 406109]:
                // - the request is pushed forward vs. Granite through JMS
                // -----------------------------------------------------
                var inputJMS = new DataStructure("ds_jms:customerInformationUpdate_el");
                inputJMS.accountNumber = common.common_replaceSpecialCharacter(input.AccountNumber);
                inputJMS.customerAddress = common.common_replaceSpecialCharacter(input.CustomerAddress);
                inputJMS.customerArabicName = common.common_replaceSpecialCharacter(input.CustomerArabicName);
                inputJMS.customerClass = common.common_replaceSpecialCharacter(input.CustomerClass);
                inputJMS.customerEnglishName = common.common_replaceSpecialCharacter(input.CustomerEnglishName);
                inputJMS.customerNumber = common.common_replaceSpecialCharacter(input.CustomerNumber);
                inputJMS.customerSubtype = common.common_replaceSpecialCharacter(input.CustomerSubtype);
                inputJMS.customerType = common.common_replaceSpecialCharacter(input.CustomerType);
                inputJMS.sector = common.common_replaceSpecialCharacter(input.Sector);
                inputJMS.status = common.common_replaceSpecialCharacter(input.Status);
                inputJMS.businessUnit = common.common_replaceSpecialCharacter(input.BusinessUnit);

                var result = ifGranite_jms.invokeGraniteIF_CustomerInformationUpdate(inputJMS);
                var outputJMS = result != null ? result[0] : null;
                if (outputJMS != null) {
                      output = new DataStructure("ds_ws:CustomerInformationUpdateAckWithFailure");
                      if (outputJMS.customerUpdateAcknowledgement != null) {
                            output.CustomerUpdateAcknowledgement.Acknowledgement = outputJMS.customerUpdateAcknowledgement.acknowledgement;
                            output.CustomerUpdateAcknowledgement.CustomerNumber = outputJMS.customerUpdateAcknowledgement.customerNumber;
                      }
                      if (outputJMS.failure != null) {
                            output.Failure.ErrorCode = outputJMS.failure.errorCode;
                            output.Failure.ErrorDescription = outputJMS.failure.errorDescription;
                            output.Failure.ErrorTime = outputJMS.failure.errorTime;
                            output.Failure.ErrorType = outputJMS.failure.errorType;
                            output.Failure.FunctionName = outputJMS.failure.functionName;
                            output.Failure.ObjectId = outputJMS.failure.objectId;
                            output.Failure.ProcessInstanceld = outputJMS.failure.processInstanceld;
                            output.Failure.SourceErrorCode = outputJMS.failure.sourceErrorCode;
                            output.Failure.Status = outputJMS.failure.status;
                            output.Failure.SystemName = outputJMS.failure.systemName;
                            output.Failure.TargetRecored = outputJMS.failure.targetRecored;
                            output.Failure.UserId = outputJMS.failure.userId;
                      }
                }
                // -----------------------------------------------------

          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "OUTPUT: " + output + "...");
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");
                return output;
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_SubmitOrder" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          var debug = "[[2] BINDING FOR EXPEDITER INTERFACE [JAVASCRIPT]: SUBMIT ORDER] ";
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Start");

          // checking that the input message is not empty
          if(input == null || input.message == null) {
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Received empty message!!! Returning message error...");

              var output = createRejectionResponse_("NA", ["AE0034", Global.translateText("AE0034")]);
              return output;
          }


          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Received: " + input.toXML());


          // setting the UserData1 in CWMESSAGELOG to OrderNumber, so the input message can be easily found
          var logDoc = UserProfile.getMsgLogDoc();
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Adding UserData_1 = " + input.message.OrderNumber + " to id = " + logDoc.messageID);
          logDoc.userData1 = input.message.OrderNumber;
          logDoc.save();

          debug = debug + "(" + input.message.OrderNumber + ") ";

          // adding orderNumber to the list of orders under management
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Adding order to list of OrdersUnderManagement");
          try {
              ds_ws.addOrderToOrdersUnderManagement(input.message.OrderNumber);
          }
          catch(exc) {
              var validationErrors = ["AE0018", Global.translateText("AE0018", null, input.message.OrderNumber)];
              var output = createRejectionResponse_(input.message.OrderNumber, validationErrors);

              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- OM is already processing the order! - Output: " + output.toXML() + "...");
              return output;
          }


          // performing base validation on the received data structure
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Starting Base Validation for incoming DataStructure");
          var validationErrors = ds_ws.performBaseValidationForIncomingDSForSubmitOrder(input);
          if(validationErrors != null && validationErrors.length > 0) {
              // remove order from list of orders under management
              ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

              var output = createRejectionResponse_(input.message.OrderNumber, validationErrors);

              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Errors in Base Validation - Output: " + output.toXML());
              return output;
          }

          // mapping the received data structure into an order
          var orderForReceivedData = null;
          var existOrder = false;

          try {
              // checking if the order exists
              var searchDoc = new Document("ds_ws.search_bundleOrder");
              searchDoc.orderNumber = input.message.OrderNumber;
              var orderListFound = Finder.runFinder("ds_ws.findAllSTCBundleOrders", "select", searchDoc);
              if(orderListFound != null && orderListFound.length > 0) {
                  // CR for resubmit orders
                  existOrder = true;
                  var existingOrder = Order.getOrderById(orderListFound[0].cwOrderId, false);


                  var failureArray = ds_ws.updateExistingOrderForResubmit(existingOrder, input);
                  if(failureArray != null && failureArray.length > 0) {
                      // remove order from list of orders under management
                      ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

                      var output = createRejectionResponseWithFailureArray_(input.message.OrderNumber, failureArray);

                      debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Error in updating existing order with received data - Output: " + output.toXML() + "...");
                      return output;
                  }

                  orderForReceivedData = existingOrder;
              }
              else {
                  // the method has to throws exceptions in case of errors
                  orderForReceivedData = ds_ws.mappingIncomingDSIntoBundleOrder(input, true, false);
              }

              if(orderForReceivedData == null) {
                  // remove order from list of orders under management
                  ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

                  // strange situation - order converted is null but no exception throws ...
                  var output = createRejectionResponse_(input.message.OrderNumber, ["AE0035", Global.translateText("AE0035")]);

                  debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Unable to convert input DS to order [NULL!] - Output: " + output.toXML() + "...");
                  return output;
              }
          }
          catch(exc) {
              // remove order from list of orders under management
              ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

              // mappingIncomingDSIntoOrder throws exception with message equals to the reason or rejection; the message has to be in Application Resource
              var validationErrors = [exc.message,  Global.translateText(exc.message)];
              var output = createRejectionResponse_(input.message.OrderNumber, validationErrors);

              if(orderForReceivedData != null && !existOrder) {
                  cleanUpOrder_(orderForReceivedData);
              }

              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Unable to convert input DS to order - Output: " + output.toXML() + "...");
              return output;
          }

          debugPrintln("Received Order = " + orderForReceivedData.toXML());

          // performing full validation on the order
          if(!existOrder) {
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Starting Full Validation for Order");
              var failureArray = ds_ws.performFullValidationForSubmitOrder(orderForReceivedData);
              if(failureArray != null && failureArray.length > 0) {
                  // remove order from list of orders under management
                  ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

                  var output = createRejectionResponseWithFailureArray_(input.message.OrderNumber, failureArray);

                  if(orderForReceivedData != null && !existOrder) {
                      cleanUpOrder_(orderForReceivedData);
                  }

                  debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Errors in Full Validation - Output: " + output.toXML() + "...");
                  return output;
              }
          }

          if(existOrder) {
              // delete old orchestration table
              try {
                  processSTC.deleteOrchestrationTableForOrder(orderForReceivedData.id);
              }
              catch(exc) {
                  // remove order from list of orders under management
                  ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

                  var validationErrors = [exc.message,  Global.translateText(exc.message)];
                  var output = createRejectionResponse_(input.message.OrderNumber, validationErrors);

                  debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Error in Cleaining Orchestration Table for ResubmitOrder - Output: " + output.toXML() + "...");
                  return output;
              }
          }

          // performing orchestration analysis
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Starting Orchestration Analysis for Order");
          var orchestrationError = processSTC.writeSequenceForOrder(orderForReceivedData);
          if(orchestrationError != null) {
              // remove order from list of orders under management
              ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

              var output = createRejectionResponseWithFailureArray_(input.message.OrderNumber, [orchestrationError]);

              if(orderForReceivedData != null && !existOrder) {
                  cleanUpOrder_(orderForReceivedData);
              }

              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Error in Orchestration Analysis - Output: " + output.toXML() + "...");
              return output;
          }


          try {
              orderForReceivedData.save();
          }
          catch(exc) {
              // remove order from list of orders under management
              ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

              var persistentErrorArray = ["AE0090", Global.translateText("AE0090", null, null)];

              var excMessage = exc.message;
              if(excMessage.indexOf("java.sql.SQLIntegrityConstraintViolationException: ORA-00001:") >= 0) {
                  var detailMsg = Global.translateText("AE0092", null, null);
                  persistentErrorArray = ds_ws.appendToValidationErrors("AE0092", detailMsg, persistentErrorArray, debug);

                  debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- " + detailMsg);
              }
              else {
                  if(excMessage.indexOf("java.sql.SQLException") >= 0) {
                      var detailMsg =  Global.translateText("AE0119", null, excMessage.substring(excMessage.indexOf("java.sql.SQLException")));
                      persistentErrorArray = ds_ws.appendToValidationErrors("AE0119", detailMsg, persistentErrorArray, debug);
                  }
                  else {
                      var detailMsg =  Global.translateText("AE0119", null, excMessage);
                      persistentErrorArray = ds_ws.appendToValidationErrors("AE0119", detailMsg, persistentErrorArray, debug);
                  }
              }

              var output = createRejectionResponse_(input.message.OrderNumber, persistentErrorArray);

              if(orderForReceivedData != null) {
                  cleanUpOrder_(orderForReceivedData);
              }

              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Error in Orchestration Analysis - Output: " + output.toXML() + "...");
              return output;
          }


          // starting orchestration process
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Starting OrchestrationProcess For Order " + orderForReceivedData.id);
          var processId = Process.startProcess ("processSTC.mainSTCOrchestrationProcess", orderForReceivedData.id, orderForReceivedData.id);

          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Started OrchestrationProcess For Order " + orderForReceivedData.id + "; processId = " + processId);


          var output = createPositiveResponse_(input.message.OrderNumber);

          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Response: " + output.toXML() + "...");
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- END!");

          return output;



          function createRejectionResponse_(orderNumber, validationErrors) {
              var output = new DataStructure("ds_ws:submitOrderResponse");
              output.returns.MasterOrderNumber = orderNumber;
              output.returns.MasterOrderStatus = "Rejected";

              var failureCounter = 0;
              for (var j=0; j<validationErrors.length; j=(j+2)) {
                  var failureDS = new DataStructure("ds_ws:OrderFailure");
                  failureDS.ErrorCode = ((validationErrors[j] == null) ? "DE1107" : validationErrors[j]);
                  failureDS.ErrorDescription = validationErrors[j+1];
                  failureDS.ErrorTime = common.common_currentDateAsStringDDMMYYYYHH24MISS();
                  failureDS.ErrorType = "Validation Error";
                  failureDS.FunctionName = "SUBMIT ORDER";
                  failureDS.ObjectId = ((input == null || input.message == null) ? null : input.message.OrderNumber);
                  failureDS.SystemName = "EXPEDITER";

                  output.returns.Failure[failureCounter] = failureDS;
                  failureCounter++;
              }
              return output;
          }

          function createRejectionResponseWithFailureArray_(orderNumber, failureArray) {
              var output = new DataStructure("ds_ws:submitOrderResponse");
              output.returns.MasterOrderNumber = orderNumber;
              output.returns.MasterOrderStatus = "Rejected";
              for(var i=0; i<failureArray.length; i++) {
                  output.returns.Failure[i] = failureArray[i];
              }
              return output;
          }


          function createPositiveResponse_(orderNumber) {
              var output = new DataStructure("ds_ws:submitOrderResponse");
              output.returns.MasterOrderNumber = orderNumber;
              output.returns.MasterOrderStatus = "New";

              return output;
          }

          function cleanUpOrder_(order) {
              ds_ws.deleteAllReasonCodesInOrder(order.id);
              ds_ws.deleteAllBlockValuesInOrder(order.id);

              // reset the setting into the referred order
              // ds_ws.linkReceivedSIP_SIPMWToExistingBundle(bundleOrderReceived, isSubmit, isCancel, isRequestedToRollbackSetting, failureArray)
              ds_ws.linkReceivedSIP_SIPMWToExistingBundle(order, true, false, true, null);
          }
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_UpdateOrder" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          var debug = "[[3] BINDING FOR EXPEDITER INTERFACE [JAVASCRIPT]: UPDATE ORDER] ";
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Start");

          // checking that the input message is not empty
          if(input == null || input.message == null) {
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Received empty message!!! Returning message error...");

              var output = createRejectionResponse_("NA", ["AE0034", Global.translateText("AE0034")]);
              return output;
          }


          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Received: " + input.toXML());


          // setting the UserData1 in CWMESSAGELOG to OrderNumber, so the input message can be easily found
          var logDoc = UserProfile.getMsgLogDoc();
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Adding UserData_1 = " + input.message.OrderNumber + " to id = " + logDoc.messageID);
          logDoc.userData1 = input.message.OrderNumber;
          logDoc.save();

          debug = debug + "(" + input.message.OrderNumber + ") ";

          // adding orderNumber to the list of orders under management
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Adding order to list of OrdersUnderManagement");
          try {
              ds_ws.addOrderToOrdersUnderManagement(input.message.OrderNumber);
          }
          catch(exc) {
              var validationErrors = ["AE0018", Global.translateText("AE0018", null, input.message.OrderNumber)];
              var output = createRejectionResponse_(input.message.OrderNumber, validationErrors);

              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- OM is already processing the order! - Output: " + output.toXML() + "...");
              return output;
          }

          // performing base validation on the received data structure
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Starting Base Validation for incoming DataStructure");
          var validationErrors = ds_ws.performBaseValidationForIncomingDSForUpdateOrder(input);
          if(validationErrors != null && validationErrors.length > 0) {
              // remove order from list of orders under management
              ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

              var output = createRejectionResponse_(input.message.OrderNumber, validationErrors);

              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Errors in Base Validation - Output: " + output.toXML());
              return output;
          }

          var isCancel = (input.message.OrderStatus.toUpperCase() == "CANCEL");


          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Starting Mapping for incoming DataStructure");
          // mapping the received data structure into an order
          var orderForReceivedData = null;
          try {
              // the method has to throws exceptions in case of errors
              orderForReceivedData = ds_ws.mappingIncomingDSIntoBundleOrder(input, false, isCancel);
              if(orderForReceivedData == null) {
                  // remove order from list of orders under management
                  ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

                  // strange situation - order converted is null but no exception throws ...
                  var output = createRejectionResponse_(input.message.OrderNumber, ["AE0035", Global.translateText("AE0035")]);

                  debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Unable to convert input DS to order [NULL!] - Output: " + output.toXML() + "...");
                  return output;
              }
          }
          catch(exc) {
              // remove order from list of orders under management
              ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

              // mappingIncomingDSIntoOrder throws exception with message equals to the reason or rejection; the message has to be in Application Resource
              var validationErrors = [exc.message,  Global.translateText(exc.message)];
              var output = createRejectionResponse_(input.message.OrderNumber, validationErrors);

              if(orderForReceivedData != null) {
                  cleanUpOrder_(orderForReceivedData, isCancel);
              }

              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Unable to convert input DS to order - Output: " + output.toXML() + "...");
              return output;
          }

          debugPrintln("Received Order = " + orderForReceivedData.toXML());


          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Starting searching existingOrder with Order # " + input.message.OrderNumber);
          // search exising order to compare it with the just received
          var searchDoc = new Document("ds_ws.search_bundleOrder");
          searchDoc.orderNumber = input.message.OrderNumber;
          var orderListFound = Finder.runFinder("ds_ws.findAllSTCBundleOrders", "select", searchDoc);
          if(orderListFound == null) {
              // remove order from list of orders under management
              ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

              var validationErrors = ["AE0004", Global.translateText("AE0004", null, ["Bundle Order STC", input.message.OrderNumber])];
              var output = createRejectionResponse_(input.message.OrderNumber, validationErrors);

              if(orderForReceivedData != null) {
                  cleanUpOrder_(orderForReceivedData, isCancel);
              }

              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Unable to find existingOrder in WD - Output: " + output.toXML() + "...");
              return output;
          }

          // loading the order
          var orderFound = Order.getOrderById(orderListFound[0].cwOrderId, false);

          // performing full validation on the order
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Starting Full Validation for Order");
          var failureArray = ds_ws.performFullValidationForUpdateOrder(orderForReceivedData, orderFound, isCancel);
          if(failureArray != null && failureArray.length > 0) {
              // remove order from list of orders under management
              ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

              var output = createRejectionResponseWithFailureArray_(input.message.OrderNumber, failureArray);

              if(orderForReceivedData != null) {
                  cleanUpOrder_(orderForReceivedData, isCancel);
              }

              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Errors in Full Validation - Output: " + output.toXML() + "...");
              return output;
          }

          // performing orchestration analysis
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Starting Orchestration Analysis for Order");
          var orchestrationError = processSTC.writeSequenceForOrder(orderForReceivedData);
          if(orchestrationError != null) {
              // remove order from list of orders under management
              ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

              var output = createRejectionResponseWithFailureArray_(input.message.OrderNumber, [orchestrationError]);

              if(orderForReceivedData != null) {
                  cleanUpOrder_(orderForReceivedData, isCancel);
              }

              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Error in Orchestration Analysis - Output: " + output.toXML() + "...");
              return output;
          }


          var archivedExistingOrder = false;

          try {
              // interrupt existing process
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Interrupting Existing Provisining Process");
              var errorsInInterruptingProcess = processSTC.interruptProvisioningProcessesForOrder(orderFound);
              if(errorsInInterruptingProcess != null) {
                  // remove order from list of orders under management
                  ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

                  var output = createRejectionResponseWithFailureArray_(input.message.OrderNumber, [errorsInInterruptingProcess]);

                  if(orderForReceivedData != null) {
                      cleanUpOrder_(orderForReceivedData, isCancel);
                  }
                  orderForReceivedData.deleteOrder();

                  debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Error in Interrupting existing provisioning process - Output: " + output.toXML() + "...");
                  return output;
              }

              // archiving existing order:
              // - renaming existing order from xxxx to xxxx_CANCELLED_<DATE_IN_FORMAT YYYYMMDDHH24MISS> in case of Cancel, otherwise to xxx_REVISED_<DATE_IN_FORMAT YYYYMMDDHH24MISS>
              // - renaming the order in orchestration record
              // - chnage the provisioning flag of the bundle to OLD
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Archiving existing order");
              ds_ws.archiveExistingOrderDueToUpdate(orderFound, isCancel);

              archivedExistingOrder = true;

              orderForReceivedData.save();
          }
          catch(exc) {
              // remove order from list of orders under management
              ds_ws.removeOrderToOrdersUnderManagement(input.message.OrderNumber);

              var persistentErrorArray = ["AE0090", Global.translateText("AE0090", null, null)];

              var excMessage = exc.message;
              if(excMessage.indexOf("java.sql.SQLIntegrityConstraintViolationException: ORA-00001:") >= 0) {
                  var detailMsg = null;
                  if(archivedExistingOrder) {
                      detailMsg = Global.translateText("AE0092", null, null);
                      persistentErrorArray = ds_ws.appendToValidationErrors("AE0092", detailMsg, persistentErrorArray, debug);
                  }
                  else {
                      detailMsg = Global.translateText("AE0091", null, (isCancel ? "Cancel" : "Revise"));
                      persistentErrorArray = ds_ws.appendToValidationErrors("AE0091", detailMsg, persistentErrorArray, debug);
                  }
                  debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- " + detailMsg);
              }
              else {
                  if(excMessage.indexOf("java.sql.SQLException") >= 0) {
                      var detailMsg =  Global.translateText("AE0119", null, excMessage.substring(excMessage.indexOf("java.sql.SQLException")));
                      persistentErrorArray = ds_ws.appendToValidationErrors("AE0119", detailMsg, persistentErrorArray, debug);
                  }
                  else {
                      var detailMsg =  Global.translateText("AE0119", null, excMessage);
                      persistentErrorArray = ds_ws.appendToValidationErrors("AE0119", detailMsg, persistentErrorArray, debug);
                  }
              }


              var output = createRejectionResponse_(input.message.OrderNumber, persistentErrorArray);

              if(orderForReceivedData != null) {
                  cleanUpOrder_(orderForReceivedData, isCancel);
              }
              orderForReceivedData.deleteOrder();

              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Error in Orchestration Analysis - Output: " + output.toXML() + "...");
              return output;
          }

          // starting orchestration process
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Starting OrchestrationProcess For Order " + orderForReceivedData.id + "; " + orderForReceivedData.toXML());
          var processId = Process.startProcess ("processSTC.mainSTCOrchestrationProcess", orderForReceivedData.id, orderForReceivedData.id);

          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Started OrchestrationProcess For Order " + orderForReceivedData.id + "; processId = " + processId);


          var output = createPositiveResponse_(input.message.OrderNumber);

          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- Response: " + output.toXML() + "...");
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "- END!");

          return output;


          function cleanUpOrder_(order, isCancel) {
              ds_ws.deleteAllReasonCodesInOrder(order.id);
              ds_ws.deleteAllBlockValuesInOrder(order.id);

              // ds_ws.linkReceivedSIP_SIPMWToExistingBundle(bundleOrderReceived, isSubmit, isCancel, isRequestedToRollbackSetting, failureArray)
              ds_ws.linkReceivedSIP_SIPMWToExistingBundle(order, false, isCancel, true, null);
          }


          function createRejectionResponse_(orderNumber, validationErrors) {
              var output = new DataStructure("ds_ws:updateOrderResponse");
              output.returns.MasterOrderNumber = orderNumber;
              output.returns.MasterOrderStatus = "Rejected";

              var failureCounter = 0;
              for (var j=0; j<validationErrors.length; j=(j+2)) {
                  var failureDS = new DataStructure("ds_ws:OrderFailure");
                  failureDS.ErrorCode = ((validationErrors[j] == null) ? "DE1107" : validationErrors[j]);
                  failureDS.ErrorDescription = validationErrors[j+1];
                  failureDS.ErrorTime = common.common_currentDateAsStringDDMMYYYYHH24MISS();
                  failureDS.ErrorType = "Validation Error";
                  failureDS.FunctionName = "UPDATE ORDER";
                  failureDS.ObjectId = ((input == null || input.message == null) ? null : input.message.OrderNumber);
                  failureDS.SystemName = "EXPEDITER";

                  output.returns.Failure[failureCounter] = failureDS;
                  failureCounter++;
              }
              return output;
          }

          function createRejectionResponseWithFailureArray_(orderNumber, failureArray) {
              var output = new DataStructure("ds_ws:updateOrderResponse");
              output.returns.MasterOrderNumber = orderNumber;
              output.returns.MasterOrderStatus = "Rejected";
              for(var i=0; i<failureArray.length; i++) {
                  output.returns.Failure[i] = failureArray[i];
              }
              return output;
          }


          function createPositiveResponse_(orderNumber) {
              var output = new DataStructure("ds_ws:updateOrderResponse");
              output.returns.MasterOrderNumber = orderNumber;
              output.returns.MasterOrderStatus = "New";

              return output;
          }
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_RedliningAcknowledgement" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          var debug = "[[4] BINDING FOR EXPEDITER INTERFACE [JAVASCRIPT]: REDLINING ACKNOWLEDGEMENT] ";
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "START...");
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INPUT: " + input + "...");

                var output = null;


                // -----------------------------------------------------
                // USING THIS BECAUSE OF EXPEDITER BUG [TR # 406109]:
                // - the request is simply stored
                // -----------------------------------------------------
                Global.logDebug(debug + "MESSAGE: " + (input != null ? input.toXML() : "<NULL>") + "...");

                output = new DataStructure("ds_ws:redliningOrderAcknowledgementResponse");
                output.returns.OrderAcknowledgement.OrderNumber = common.common_replaceSpecialCharacter(input.acknowledgement.OrderNumber);
                output.returns.OrderAcknowledgement.Remarks = common.common_replaceSpecialCharacter(input.acknowledgement.Remarks);
                output.returns.OrderAcknowledgement.XngOrderNumber = common.common_replaceSpecialCharacter(input.acknowledgement.XngOrderNumber);
                output.returns.OrderAcknowledgement.BusinessUnit = common.common_replaceSpecialCharacter(input.acknowledgement.BusinessUnit);
                output.returns.Failure.ErrorTime = common.common_currentDateAsStringDDMMYYYYHH24MISS();
                output.returns.Failure.ErrorType = "FUNCTIONAL";
                output.returns.Failure.Status = "SUCCESS";
                output.returns.Failure.SystemName = "EXPEDITER";
                // -----------------------------------------------------

          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "OUTPUT: " + output + "...");
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");
                return output;
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_QuoteValidation" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          var debug = "[[5] BINDING FOR EXPEDITER INTERFACE [JAVASCRIPT]: QUOTE VALIDATION] ";
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "START...");
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INPUT: " + input + "...");

                var output = null;

                // -----------------------------------------------------
                // USING THIS BECAUSE OF EXPEDITER BUG [TR # 406109]:
                // - the request is pushed forward vs. Granite through JMS
                // -----------------------------------------------------
                var inputJMS = new DataStructure("ds_jms:orderMessage_el");
                // - components "ServiceParameter"
                if (input.message.ServiceParameters != null) {
                      for (var j = 0; j < input.message.ServiceParameters.length; j++) {
                            inputJMS.serviceParameters[j].creationDate = input.message.ServiceParameters[j].CreationDate;
                            inputJMS.serviceParameters[j].oldServiceNumber = common.common_replaceSpecialCharacter(input.message.ServiceParameters[j].OldServiceNumber);
                            inputJMS.serviceParameters[j].serviceDate = input.message.ServiceParameters[j].ServiceDate;
                            inputJMS.serviceParameters[j].serviceDescription = common.common_replaceSpecialCharacter(input.message.ServiceParameters[j].ServiceDescription);
                            inputJMS.serviceParameters[j].serviceNumber = common.common_replaceSpecialCharacter(input.message.ServiceParameters[j].ServiceNumber);
                            inputJMS.serviceParameters[j].serviceType = common.common_replaceSpecialCharacter(input.message.ServiceParameters[j].ServiceType);
                            // - components "NameValue"
                            if (input.message.ServiceParameters[j].NameValue != null) {
                                  for (var k = 0; k < input.message.ServiceParameters[j].NameValue.length; k++) {
                                        inputJMS.serviceParameters[j].nameValue[k].name = common.common_replaceSpecialCharacter(input.message.ServiceParameters[j].NameValue[k].Name);
                                        inputJMS.serviceParameters[j].nameValue[k].value = common.common_replaceSpecialCharacter(input.message.ServiceParameters[j].NameValue[k].Value);
                                  }
                            }
                      }
                }
                // - main leaves of the order
                inputJMS.accountNumber               = common.common_replaceSpecialCharacter(input.message.AccountNumber);
                inputJMS.alternativeSolution         = common.common_replaceSpecialCharacter(input.message.AlternativeSolution);
                inputJMS.bandwidth                   = common.common_replaceSpecialCharacter(input.message.Bandwidth);
                inputJMS.cctType                     = common.common_replaceSpecialCharacter(input.message.CctType);
                inputJMS.circuitNumber               = common.common_replaceSpecialCharacter(input.message.CircuitNumber);
                inputJMS.createdBy                   = common.common_replaceSpecialCharacter(input.message.CreatedBy);
                inputJMS.creationDate                = input.message.CreationDate;
                inputJMS.customerIDNumber            = common.common_replaceSpecialCharacter(input.message.CustomerIDNumber);
                inputJMS.fictBillingNumber           = common.common_replaceSpecialCharacter(input.message.FictBillingNumber);
                inputJMS.icmsSONumber                = common.common_replaceSpecialCharacter(input.message.IcmsSONumber);
                inputJMS.locationAAccessCircuit      = common.common_replaceSpecialCharacter(input.message.LocationAAccessCircuit);
                inputJMS.locationAAccessType         = common.common_replaceSpecialCharacter(input.message.LocationAAccessType);
                inputJMS.locationACCLICode           = common.common_replaceSpecialCharacter(input.message.LocationACCLICode);
                inputJMS.locationACity               = common.common_replaceSpecialCharacter(input.message.LocationACity);
                inputJMS.locationAContactAddress     = common.common_replaceSpecialCharacter(input.message.LocationAContactAddress);
                inputJMS.locationAContactEmail       = common.common_replaceSpecialCharacter(input.message.LocationAContactEmail);
                inputJMS.locationAContactName        = common.common_replaceSpecialCharacter(input.message.LocationAContactName);
                inputJMS.locationAContactTel         = common.common_replaceSpecialCharacter(input.message.LocationAContactTel);
                inputJMS.locationAExchangeSwitchCode = common.common_replaceSpecialCharacter(input.message.LocationAExchangeSwitchCode);
                inputJMS.locationAInterface          = common.common_replaceSpecialCharacter(input.message.LocationAInterface);
                inputJMS.locationAJVCode             = common.common_replaceSpecialCharacter(input.message.LocationAJVCode);
                inputJMS.locationAPlateID            = common.common_replaceSpecialCharacter(input.message.LocationAPlateID);
                inputJMS.locationARemarks            = common.common_replaceSpecialCharacter(input.message.LocationARemarks);
                inputJMS.locationBAccessCircuit      = common.common_replaceSpecialCharacter(input.message.LocationBAccessCircuit);
                inputJMS.locationBAccessType         = common.common_replaceSpecialCharacter(input.message.LocationBAccessType);
                inputJMS.locationBCCLICode           = common.common_replaceSpecialCharacter(input.message.LocationBCCLICode);
                inputJMS.locationBCity               = common.common_replaceSpecialCharacter(input.message.LocationBCity);
                inputJMS.locationBContactAddress     = common.common_replaceSpecialCharacter(input.message.LocationBContactAddress);
                inputJMS.locationBContactEmail       = common.common_replaceSpecialCharacter(input.message.LocationBContactEmail);
                inputJMS.locationBContactName        = common.common_replaceSpecialCharacter(input.message.LocationBContactName);
                inputJMS.locationBContactTel         = common.common_replaceSpecialCharacter(input.message.LocationBContactTel);
                inputJMS.locationBExchangeSwitchCode = common.common_replaceSpecialCharacter(input.message.LocationBExchangeSwitchCode);
                inputJMS.locationBInterface          = common.common_replaceSpecialCharacter(input.message.LocationBInterface);
                inputJMS.locationBJVCode             = common.common_replaceSpecialCharacter(input.message.LocationBJVCode);
                inputJMS.locationBPlateID            = common.common_replaceSpecialCharacter(input.message.LocationBPlateID);
                inputJMS.locationBRemarks            = common.common_replaceSpecialCharacter(input.message.LocationBRemarks);
                inputJMS.oldCircuitNumber            = common.common_replaceSpecialCharacter(input.message.OldCircuitNumber);
                inputJMS.orderNumber                 = common.common_replaceSpecialCharacter(input.message.OrderNumber);
                inputJMS.orderStatus                 = common.common_replaceSpecialCharacter(input.message.OrderStatus);
                inputJMS.orderType                   = common.common_replaceSpecialCharacter(input.message.OrderType);
                inputJMS.priority                    = common.common_replaceSpecialCharacter(input.message.Priority);
                inputJMS.projectId                   = common.common_replaceSpecialCharacter(input.message.ProjectId);
                inputJMS.referenceTelNumber          = common.common_replaceSpecialCharacter(input.message.ReferenceTelNumber);
                inputJMS.remarks                     = common.common_replaceSpecialCharacter(input.message.Remarks);
                inputJMS.serviceDate                 = input.message.ServiceDate;
                inputJMS.serviceDescription          = common.common_replaceSpecialCharacter(input.message.ServiceDescription);
                inputJMS.serviceType                 = common.common_replaceSpecialCharacter(input.message.ServiceType);
                inputJMS.wires                       = common.common_replaceSpecialCharacter(input.message.Wires);
                inputJMS.customerName                = common.common_replaceSpecialCharacter(input.message.CustomerName);
                inputJMS.customerType                = common.common_replaceSpecialCharacter(input.message.CustomerType);
                inputJMS.customerContact             = common.common_replaceSpecialCharacter(input.message.CustomerContact);
                inputJMS.plateID                     = common.common_replaceSpecialCharacter(input.message.PlateID);
                inputJMS.oldPlateId                  = common.common_replaceSpecialCharacter(input.message.OldPlateId);
                inputJMS.tbPortNumber                = common.common_replaceSpecialCharacter(input.message.TbPortNumber);
                inputJMS.unitNumber                  = common.common_replaceSpecialCharacter(input.message.UnitNumber);
                inputJMS.oldUnitNumber               = common.common_replaceSpecialCharacter(input.message.OldUnitNumber);
                inputJMS.businessUnit                = common.common_replaceSpecialCharacter(input.message.BusinessUnit);
                inputJMS.customerIDType              = common.common_replaceSpecialCharacter(input.message.CustomerIDType);
                inputJMS.customerNumber              = common.common_replaceSpecialCharacter(input.message.CustomerNumber);

                var result = ifGranite_jms.invokeGraniteIF_QuoteValidation(inputJMS);
                var outputJMS = result != null ? result[0] : null;
                if (outputJMS != null) {
                      output = new DataStructure("ds_ws:quoteValidationResponse");
                      if (outputJMS.quoteAcknowledgement != null) {
                            output.returns.QuoteAcknowledgement.CircuitRemarks = outputJMS.quoteAcknowledgement.circuitRemarks;
                            output.returns.QuoteAcknowledgement.OrderNumber = outputJMS.quoteAcknowledgement.orderNumber;
                            output.returns.QuoteAcknowledgement.ValidationResponse = outputJMS.quoteAcknowledgement.validationResponse;
                            output.returns.QuoteAcknowledgement.BusinessUnit="Enterprise";
                      }
                      if (outputJMS.failure != null) {
                            output.returns.Failure.ErrorCode = outputJMS.failure.errorCode;
                            output.returns.Failure.ErrorDescription = outputJMS.failure.errorDescription;
                            output.returns.Failure.ErrorTime = outputJMS.failure.errorTime;
                            output.returns.Failure.ErrorType = outputJMS.failure.errorType;
                            output.returns.Failure.FunctionName = outputJMS.failure.functionName;
                            output.returns.Failure.ObjectId = outputJMS.failure.objectId;
                            output.returns.Failure.ProcessInstanceld = outputJMS.failure.processInstanceld;
                            output.returns.Failure.SourceErrorCode = outputJMS.failure.sourceErrorCode;
                            output.returns.Failure.Status = outputJMS.failure.status;
                            output.returns.Failure.SystemName = outputJMS.failure.systemName;
                            output.returns.Failure.TargetRecored = outputJMS.failure.targetRecored;
                            output.returns.Failure.UserId = outputJMS.failure.userId;
                      }
                }
                // -----------------------------------------------------

          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "OUTPUT: " + output + "...");
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");
                return output;
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_ReportFailure" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          var debug = "[[6] BINDING FOR EXPEDITER INTERFACE [JAVASCRIPT]: REPORT FAILURE] ";
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "START...");
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INPUT: " + input + "...");

                var output = null;


                // -----------------------------------------------------
                // USING THIS BECAUSE OF EXPEDITER BUG [TR # 406109]:
                // - the request is simply stored
                // -----------------------------------------------------
                Global.logDebug(debug + "MESSAGE: " + (input != null ? input.toXML() : "<NULL>") + "...");


          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "OUTPUT: " + output + "...");
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");
                return output;
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_SiteInformationUpdateAck" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          var debug = "[[4] BINDING FOR EXPEDITER INTERFACE [JAVASCRIPT]: SITE INFORMATION UPDATE ACKNOWLEDGEMENT] ";
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "START...");
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "INPUT: " + input + "...");

                var output = null;

                // -----------------------------------------------------
                // USING THIS BECAUSE OF EXPEDITER BUG [TR # 406109]:
                // - the request is simply stored
                // -----------------------------------------------------
                Global.logDebug(debug + "MESSAGE: " + (input != null ? input.toXML() : "<NULL>") + "...");

                output = new DataStructure("ds_ws:siteInformationUpdateAcknowledgementResponse");
                output.returns.Acknowledgement.Acknowledgement = common.common_replaceSpecialCharacter(input.siteInformationUpdateAcknowledgement.Acknowledgement);
                output.returns.Acknowledgement.SiteID = common.common_replaceSpecialCharacter(input.siteInformationUpdateAcknowledgement.SiteID);
                output.returns.Acknowledgement.BusinessUnit = common.common_replaceSpecialCharacter(input.siteInformationUpdateAcknowledgement.BusinessUnit);
                output.returns.Failure.ErrorTime = common.common_currentDateAsStringDDMMYYYYHH24MISS();
                output.returns.Failure.ErrorType = "FUNCTIONAL";
                output.returns.Failure.Status = "SUCCESS";
                output.returns.Failure.SystemName = "EXPEDITER";
                // -----------------------------------------------------

          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "OUTPUT: " + output + "...");
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "]" + debug + "END...");
                return output;
        ]]></elementItem>
      </elementItemMap>
    </extension>
  </extensionList>
  <guid>{0feec3eb-7c46-395a-b1e8-4436f5487816}</guid>
  <highlight>66</highlight>
  <interface>iface_ifExpediter_ws.ifExpedtier</interface>
  <label>Javascript Binding For Expediter Interface</label>
  <metaVersion>3</metaVersion>
  <provider>prov_cwf.jsprov</provider>
</binding>