<?xml version="1.0" encoding="UTF-8" ?>
<process filenameHash="84ce0597171571882d7e09d12ad8453b" versionHash="a87ff679a2f3e71d9181a67b7542122c" name="processSTC.mainSTCOrchestrationProcess">
  <activity name="start" type="seqActivity">
    <guid>{e8dda420-ad3a-4c9f-be64-96e2d5ac4ebf}</guid>
    <label>Start</label>
    <x>49.0</x>
    <y>164.0</y>
    <childList>
      <child name="setProcessIdInOrchestrationTable" type="scriptActivity">
        <guid>{daf76e84-47eb-4a21-8b87-84c0caced00a}</guid>
        <label>Set ProcessId In Orchestration Table</label>
        <x>197.0</x>
        <y>135.0</y>
        <methodList>
          <method name="cwOnProcActBefore" type="action">
            <category>before</category>
            <system>true</system>
            <script><![CDATA[
              var recordInOrchestrationTable = processSTC.getRecordInOrchestrationTableByLineItemId(this.process.processOrderItem.id);
              recordInOrchestrationTable.orchestrationProcessId = this.process.id;
              recordInOrchestrationTable.save();

              // removing ordernumber from orders under management list
              ds_ws.removeOrderToOrdersUnderManagement(this.process.processOrder.orderHeader.orderNumber);
            ]]></script>
          </method>
        </methodList>
      </child>
      <child name="isPermanentOrTempDisconnect" type="switchActivity">
        <guid>{34c86ba7-ac3c-49b8-bdf9-c6555c989bf0}</guid>
        <label>Is Permanent Disconnect Or Temporary Disconnect?</label>
        <x>392.0</x>
        <y>127.0</y>
        <childList>
          <child name="disconnect" type="caseActivity">
            <guid>{e88924e4-840a-463a-9caa-3f68ef6596a1}</guid>
            <label>Disconnect</label>
            <x>35.0</x>
            <y>342.0</y>
            <childList>
              <child name="startDisconnect" type="seqActivity">
                <guid>{0a502f22-549d-4788-b2ec-b527f9aa5d97}</guid>
                <label>Start Disconnect</label>
                <x>394.0</x>
                <y>354.0</y>
                <childList>
                  <child name="performProvisioningOfAllChildElements_Disconnect" type="subflowActivity">
                    <element>proc_processSTC.performProvisioningOfAllChildElements_Delete</element>
                    <guid>{c15c80cf-2805-43b2-b8cc-fec40e62bfdd}</guid>
                    <label>Perform Provisioning Of All Child Elements - Disconnect</label>
                    <x>588.0</x>
                    <y>321.0</y>
                    <methodList>
                      <method name="cwOnProcActBefore" type="action">
                        <category>before</category>
                        <system>true</system>
                        <script><![CDATA[this.process.processDocument.elementTypeInOrderTree = 'B';]]></script>
                      </method>
                    </methodList>
                  </child>
                </childList>
              </child>
            </childList>
            <methodList>
              <method name="cwOnProcActCond" type="action">
                <category>cond</category>
                <system>true</system>
                <script><![CDATA[
                  var order = this.process.processOrder;
                  var orderType = order.orderHeader.orderType;
                  var scanMode = order.bundles[0].bundle.scanMode;
                  var isDisconnect = false;

                  debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - ScanMode for isDeleteOrSuspend: " + scanMode);

                  if(scanMode == "default" || scanMode == null){
                      isDisconnect = (orderType == "D" || orderType == "O");
                  }
                  else if(scanMode == "TopDown"){
                      isDisconnect = false;
                  }
                  else if(scanMode == "BottomUp"){
                      isDisconnect = true;
                  }

                  debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - IsDisconnect = " + isDisconnect);

                  return isDisconnect;
                ]]></script>
              </method>
            </methodList>
          </child>
          <child name="notDisconnect" type="caseActivity">
            <guid>{61f0d1d6-2cf2-4627-b21c-b269f248c258}</guid>
            <label>Not Disconnect</label>
            <x>231.0</x>
            <y>77.0</y>
            <childList>
              <child name="startNormalProcessing" type="seqActivity">
                <guid>{825a0754-2ab9-4b2d-bdeb-0ff5cfda9cfe}</guid>
                <label>Start Normal Processing</label>
                <x>533.0</x>
                <y>163.0</y>
                <childList>
                  <child name="performProvisioningOfAllChildElements_NoDisconnect" type="subflowActivity">
                    <element>proc_processSTC.performProvisioningOfAllChildElements_NotDelete</element>
                    <guid>{064500ef-50e5-4610-bc91-49a98533cfe2}</guid>
                    <label>Perform Provisioning Of All Child Elements - No Disconnect</label>
                    <x>680.0</x>
                    <y>120.0</y>
                    <methodList>
                      <method name="cwOnProcActBefore" type="action">
                        <category>before</category>
                        <system>true</system>
                        <script><![CDATA[this.process.processDocument.elementTypeInOrderTree = 'B';]]></script>
                      </method>
                    </methodList>
                  </child>
                </childList>
              </child>
            </childList>
          </child>
        </childList>
      </child>
      <child name="sendWOSUForOrderToEAI" type="scriptActivity">
        <guid>{22468149-b3b2-4e83-8305-de8c8234e81d}</guid>
        <label>Send WOSU For Order To EAI</label>
        <x>829.0</x>
        <y>323.0</y>
        <methodList>
          <method name="cwOnProcActBefore" type="action">
            <category>before</category>
            <system>true</system>
            <script><![CDATA[
              if(! processSTC.checkIfExistProcessKOInOrchestrationTable(this.process.processOrder.id)) {
                  // updating provisioningFlag for all the bundles
                  var bundleOrder = this.process.processOrder;
                  for(var i=0; i<bundleOrder.bundles.length; i++) {
                      var bundleElement = bundleOrder.bundles[i].bundle;

                      var bundleStatusUpperCase = bundleElement.lineItemStatus.toUpperCase();
                      if(bundleStatusUpperCase != "CANCELLED" && bundleStatusUpperCase != "COMPLETED") {
                          if(ds_ws.checkThatAllLineItemsInBundleHaveOneOfTheseStatus(["CANCELLED"], bundleElement, bundleOrder, false)) {
                              bundleElement.lineItemStatus = "CANCELLED";
                          }
                          else {
                              bundleElement.lineItemStatus = "COMPLETED";
                          }
                          bundleElement.completionDate = new Date();
                      }

                      if(bundleElement.isCancel || bundleElement.lineItemStatus == "CANCELLED") {
                          bundleElement.provisioningFlag = "CANCELLED";
                      }
                      else {
                          var activeLineItems = ds_ws.getAllLineItemsByIdentifierAndProvisioningFlag(bundleElement.lineItemIdentifier, "B", "ACTIVE");
                          for(var j=0; j<activeLineItems.length; j++) {
                              activeLineItems[j].provisioningFlag = "OLD";
                              activeLineItems[j].save();
                          }

                          bundleElement.provisioningFlag = "ACTIVE";
                      }
                      bundleElement.save();
                  }

                  var orderStatusUpperCase = bundleOrder.orderHeader.orderStatus.toUpperCase();
                  if(orderStatusUpperCase != "CANCELLED" && orderStatusUpperCase != "COMPLETED") {
                      // it happens only if there is no lineItem sent to Granite and so no WOSU received
                      if(ds_ws.checkThatAllLineItemsInOrderHaveOneOfTheseStatus(["CANCELLED"], bundleOrder, false)) {
                          bundleOrder.orderHeader.orderStatus = "CANCELLED";
                      }
                      else {
                          bundleOrder.orderHeader.orderStatus = "COMPLETED";
                      }
                      bundleOrder.orderHeader.completionDate = new Date();
                  }
                  bundleOrder.save();

                  if(! processSTC.checkIfExistProvisionProcessInOrchestrationTable(bundleOrder.id)) {
                      // sending "closing" WOSU to EAI
                      processSTC.generateLastWOSUForOrder(bundleOrder);
                  }
              }
            ]]></script>
          </method>
        </methodList>
      </child>
      <child name="createDisconnectOrderAndStartProcess" type="scriptActivity">
        <guid>{e444339b-a8ab-47a6-b847-9f4651e15c58}</guid>
        <label>Create Disconnect Order And Start Provisioning Process</label>
        <x>994.0</x>
        <y>310.0</y>
        <methodList>
          <method name="cwOnProcActBefore" type="action">
            <category>before</category>
            <system>true</system>
            <script><![CDATA[
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - Check disconnect");

              if(! processSTC.checkIfExistProcessKOInOrchestrationTable(this.process.processOrder.id)) {

              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - Exist KO = false");

                  var bundleSIPMWProductTypes  = ds_ws.getAllCRMProductTypesForOMInternalProductType("Bundle SIPMW");
                  var bundleSIPProductTypes  = ds_ws.getAllCRMProductTypesForOMInternalProductType("Bundle SIP");
                  var primarySIPMWServiceTypeName = ds_ws.getCRMServiceTypeForOMInternalServiceType("SIPMW/Primary SIPMW");
                  var primarySIPServiceTypeName = ds_ws.getCRMServiceTypeForOMInternalServiceType("SIP/Primary SIP");
                  var bundleOrder = this.process.processOrder;

                  if(bundleOrder.orderHeader.orderType == "I") {
                      for(var i=0; i<bundleOrder.bundles.length; i++) {
                          var bundleContainer = bundleOrder.bundles[i];

                          if(! bundleContainer.bundle.isCancel) {
                              if(isSIPMWProductType_(bundleContainer.bundle.productType) || isSIPProductType_(bundleContainer.bundle.productType)) {
                                  if(bundleContainer.bundle.disconnectOrderLinked) {
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - The order under management is an Install SIP/SIPMW and the disconnectOrderLink is enabled... checking if it has to start disconnect order");

                                      for(var j=0; j< bundleOrder.bundles[i].circuits.length; j++) {
                                          if(bundleContainer.circuits[j].circuit.serviceType == primarySIPServiceTypeName || bundleContainer.circuits[j].circuit.serviceType == primarySIPMWServiceTypeName) {
                                              if( !bundleContainer.circuits[j].circuit.isCancel) {

                                                  var existingCircuitNVPair = foundNVPair_("Existing Circuit", bundleContainer.circuits[j].circuitParameters);

                                                  if(existingCircuitNVPair != null && !common.isNullValue(existingCircuitNVPair.value)) {

                                                      var subOrderTypeNVPair = foundNVPair_("Sub Order Type", bundleContainer.circuits[j].circuitParameters);
                                                      if(subOrderTypeNVPair != null && !common.isNullValue(subOrderTypeNVPair.value)) {
                                                          if(subOrderTypeNVPair.value == "Migration" || subOrderTypeNVPair.value == "Transfer") {
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - SubOrderType " + subOrderTypeNVPair.value + "; managing disconnect process");
                                                              var reasonCodeValue = subOrderTypeNVPair.value;


              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - Looking for ACTIVE order of bundle " + existingCircuitNVPair.value);
                                                              var existingCircuitActiveList = ds_ws.getAllLineItemsByIdentifierAndProvisioningFlag(existingCircuitNVPair.value, 'B', "ACTIVE");
                                                              if(existingCircuitActiveList != null && existingCircuitActiveList.length > 0) {
                                                                  var referredOrder = Order.getOrderById(existingCircuitActiveList[0].orderId);

                                                                  if(referredOrder != null) {
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - Cloning and starting disconnect process for orderNumber " + referredOrder.orderHeader.orderNumber + " & orderId " + referredOrder.id);

                                                                      var failureArray = new Array();
                                                                      var pId = ds_ws.cloneOrderForDisconnectAndStartProvisingProcess(referredOrder, bundleOrder.orderHeader.orderNumber, reasonCodeValue, failureArray);

                                                                      if(pId != null) {
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - Started disconnect process for orderNumber " + referredOrder.orderHeader.orderNumber + "; processId = " + pId);
                                                                      }
                                                                      else {
                                                                          var exceptionMsg = (failureArray.length > 0 ? failureArray[0].ErrorDescription : null);
                                                                          Global.throwException("AE0106", exceptionMsg);
                                                                      }
                                                                  }
                                                              }
                                                          }
                                                          else {
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - 'Sub Order Type' NVPair value is " + subOrderTypeNVPair.value + "; NOT REQUESTED disconnect process");
                                                          }
                                                      }
                                                      else {
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - 'Sub Order Type' NVPair value is null; no disconnect process has to be started");
                                                      }
                                                  }
                                                  else {
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - 'Existing Circuit' NVPair value is null; no disconnect process has to be started");
                                                  }
                                              }
                                              else {
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - Primary Circuit has 'isCancel' flag enabled so no disconnect process has to be started");
                                              }
                                          }
                                      }
                                  }
                                  else {
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - Bundle ProductType is '" + bundleContainer.bundle.productType + "' but the disconnectOrderLink is disabled; no disconnect process has to be started");
                                  }
                              }
                              else {
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - Bundle ProductType is '" + bundleContainer.bundle.productType + "' so no disconnect process has to be started");
                              }
                          }
                          else {
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - Bundle has 'isCancel' flag enabled so no disconnect process has to be started");
                          }
                      }
                  }
              }

              return;


              function foundNVPair_(nvPairName, lineItemParameters) {
                  var foundNVPair = null;
                  if(lineItemParameters != null) {
                      for(var j=0; j<lineItemParameters.length && foundNVPair == null; j++) {
                          if(lineItemParameters[j].circuitParameter.name == nvPairName) {
                              foundNVPair = lineItemParameters[j].circuitParameter;
                          }
                      }
                  }

                  return foundNVPair;
              }

              function isSIPProductType_(foundProductType) {
                  var found = false;
                  for(var i=0; i<bundleSIPProductTypes.length && !found; i++) {
                      found = (foundProductType == bundleSIPProductTypes[i]);
                  }

                  return found;
              }

              function isSIPMWProductType_(foundProductType) {
                  var found = false;
                  for(var i=0; i<bundleSIPMWProductTypes.length && !found; i++) {
                      found = (foundProductType == bundleSIPMWProductTypes[i]);
                  }

                  return found;
              }
            ]]></script>
          </method>
        </methodList>
      </child>
      <child name="end" type="completeActivity">
        <guid>{6ddbb3c1-d608-4d7a-8a5c-ce9502544f04}</guid>
        <label>End</label>
        <x>1010.0</x>
        <y>521.0</y>
        <methodList>
          <method name="cwOnProcActBefore" type="action">
            <category>before</category>
            <system>true</system>
            <script><![CDATA[
              debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - End");
            ]]></script>
          </method>
        </methodList>
      </child>
      <child name="stopProcess" type="onExceptionActivity">
        <element>excp_cwf_pm.stop</element>
        <guid>{20f26050-d796-4fd6-a5d4-48b11dc00b6e}</guid>
        <label>Stop Process</label>
        <x>49.0</x>
        <y>264.0</y>
        <childList>
          <child name="start" type="seqActivity">
            <guid>{e3d9036f-6578-4478-9d35-caceda49845d}</guid>
            <label>Start</label>
            <x>49.0</x>
            <y>341.0</y>
            <childList>
              <child name="stopOrchestrationProcess" type="completeActivity">
                <guid>{ef42a169-eb83-4703-ba97-97160eb16b2b}</guid>
                <label>Stop Orchestration Process</label>
                <x>207.0</x>
                <y>329.0</y>
                <methodList>
                  <method name="cwOnProcActBefore" type="action">
                    <category>before</category>
                    <system>true</system>
                    <script><![CDATA[
                      debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - Received Stop for this Orchestration process");
                    ]]></script>
                  </method>
                </methodList>
              </child>
            </childList>
          </child>
        </childList>
      </child>
    </childList>
    <methodList>
      <method name="cwOnProcActBefore" type="action">
        <category>before</category>
        <system>true</system>
        <script><![CDATA[
          debugPrintln("[" + common.common_currentDateAsStringDDMMYYYYHH24MISS() + "][" + this.process.id + "] - Start");
        ]]></script>
      </method>
    </methodList>
  </activity>
  <curRevision>true</curRevision>
  <description><![CDATA[
    <p style="margin-top: 0">
      Main process responsible for the Provisioning orchestration; no
      orderItem!!!
    </p>
    <p style="margin-top: 0">
      It uses the 2 following subflows to orchestrate provisioning according
      to the action of the element:
    </p>
    <p style="margin-top: 0">
      - performProvisioningOfAllChildElements_NotDelete
    </p>
    <p style="margin-top: 0">
      - performProvisioningOfAllChildElements_Delete
    </p>
  ]]></description>
  <document>doc_processSTC.stcOrchestrationProcessDocument</document>
  <guid>{0aeec12c-6ba7-45ed-9e08-c212116b6d5d}</guid>
  <label>Main STC Orchestration Process</label>
  <metaVersion>4</metaVersion>
  <priority>8</priority>
  <revision>33</revision>
  <type>User</type>
</process>