<?xml version="1.0" encoding="UTF-8" ?>
<script filenameHash="8d1f4bf0f9f9faf2015c1f8d16d42af3" versionHash="a87ff679a2f3e71d9181a67b7542122c" name="processSTC.writeSequenceForSubServicesInBundle">
  <label>Write Sequence For SubServices In Order</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="bundleOrder" type="rifp">
      <type>order_ds_ws.bundleOrderSTC</type>
    </parameter>
    <parameter name="serviceContainer" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var sequence                = 1;
    var priority                = 1;
    var child_processed         = 0;
    var count_processed_in_loop = 0;
    var errorFound              = null;
    var exceptionFound          = null;
    var found_record_with_higher_priority = false;

    if(serviceContainer.subServices == null) {
        return errorFound;
    }

    try {
        while(child_processed < serviceContainer.subServices.length && errorFound == null) {
            count_processed_in_loop = 0;
            found_record_with_higher_priority = false;

            for(var i=0; i<serviceContainer.subServices.length && errorFound == null; i++) {
                var isProvisionable = (!processSTC.isLineItemCompleted(serviceContainer.subServices[i].subService.lineItemStatus) &&
                                       !ds_ws.isVAS(serviceContainer.subServices[i].subService.lineItemType) &&
                                       ds_ws.checkIfServiceTypeAllowsProvisioning(serviceContainer.subServices[i].subService.serviceType) &&
                                       serviceContainer.subServices[i].subService.action != 'N');

                if(serviceContainer.subServices[i].subService.priority == priority) {
                    // priority is good; checking if already processed
                    if(! processSTC.existRecordInOrchestrationTable(serviceContainer.subServices[i].subService.id)) {
                        // to be processed; checking if has dependencies
                        if(serviceContainer.subServices[i].subService.dependencies == null || serviceContainer.subServices[i].subService.dependencies.length == 0) {
                            // no dependencies ==> add record to table
                            processSTC.writeRecordForLineItemInOrchestrationTable(bundleOrder.orderHeader.orderNumber,
                                                                                  bundleOrder.id,
                                                                                  serviceContainer.service.id,
                                                                                  sequence,
                                                                                  isProvisionable,
                                                                                  serviceContainer.subServices[i].subService,
                                                                                  'T');
                            child_processed++;
                            count_processed_in_loop++;
                        }
                        else {
                            // there are dependencies; checking if already processed
                            var all_dependencies_processed = true;
                            var dependencies = serviceContainer.subServices[i].subService.dependencies.split(";");
                            for(var j=0; j<dependencies.length && all_dependencies_processed; j++) {
                                // check if the dependencies is in table; if yes, continue, otherwise stop;
                                var recordInOrchestrationTable = processSTC.getRecordInOrchTabByItemIdentifier_OrdNum_CwOrdId(bundleOrder.orderHeader.orderNumber, bundleOrder.id, dependencies[j]);
                                if(recordInOrchestrationTable != null) {
                                    if(recordInOrchestrationTable.elementTypeInOrchestration != 'T') {
                                        // Error in orchestration: element {0} depends on a not sibling element: {1}
                                        exceptionFound = "AE0032";
                                        Global.throwException(Global.translateText("AE0032", null, [serviceContainer.subServices[i].subService.lineItemIdentifier, dependencies[j]]));
                                    }

                                    if(!recordInOrchestrationTable.provisionable) {
                                        // Error in orchestration: element {0} depends on a non provisionable element: {1}
                                        exceptionFound = "AE0033";
                                        Global.throwException(Global.translateText("AE0033", null, [serviceContainer.subServices[i].subService.lineItemIdentifier, dependencies[j]]));
                                    }


                                    // checking that the current element has a higher sequence that the dependency
                                    all_dependencies_processed = (recordInOrchestrationTable.sequence < sequence);
                                }
                                else {
                                    all_dependencies_processed = false;
                                }
                            }

                            if(all_dependencies_processed) {
                                // all dependencies have been already processed ==> add record to table
                                processSTC.writeRecordForLineItemInOrchestrationTable(bundleOrder.orderHeader.orderNumber,
                                                                                      bundleOrder.id,
                                                                                      serviceContainer.service.id,
                                                                                      sequence,
                                                                                      isProvisionable,
                                                                                      serviceContainer.subServices[i].subService,
                                                                                      'T');
                                child_processed++;
                                count_processed_in_loop++;
                            }
                        }
                    }
                    else {
                        // already processed, so skipped
                    }
                }
                else {
                    // priority is different
                    if(!found_record_with_higher_priority) {
                        found_record_with_higher_priority = (serviceContainer.subServices[i].subService.priority > priority);
                    }
                }
            } // end for

            if(count_processed_in_loop == 0) {
                // found no processable record in the for
                if(found_record_with_higher_priority) {
                    // but found a child with higher priority, so increase the priority
                    priority++
                }
                else {
                    errorFound = new DataStructure("ds_ws:OrderFailure");
                    errorFound.ErrorCode = "AE0031";
                    errorFound.ErrorDescription = Global.translateText("AE0031", null, [serviceContainer.service.lineItemIdentifier, bundleOrder.orderHeader.orderNumber]);
                    errorFound.ErrorTime = common.common_currentDateAsStringDDMMYYYYHH24MISS();
                    errorFound.ErrorType = "VALIDATION ERROR";
                    errorFound.FunctionName = "SUBMIT ORDER";
                    errorFound.ObjectId = bundleOrder.orderHeader.orderNumber;
                    errorFound.SystemName = "Workflow Director";
                }
            }
            else {
                // increasing the sequence because a new loop has to start
                sequence++;
            }
        }  // end while
    }
    catch(exc) {
        errorFound = new DataStructure("ds_ws:OrderFailure");
        errorFound.ErrorCode = exceptionFound;
        errorFound.ErrorDescription = exc.message;
        errorFound.ErrorTime = common.common_currentDateAsStringDDMMYYYYHH24MISS();
        errorFound.ErrorType = "VALIDATION ERROR";
        errorFound.FunctionName = "SUBMIT ORDER";
        errorFound.ObjectId = bundleOrder.orderHeader.orderNumber;
        errorFound.SystemName = "Workflow Director";
    }
    return errorFound;
  ]]></script>
</script>