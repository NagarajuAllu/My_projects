<?xml version="1.0" encoding="UTF-8" ?>
<script filenameHash="13380e543ddc1d037b1ac68fd1f44615" versionHash="a87ff679a2f3e71d9181a67b7542122c" name="processSTC.mapLineItemIntoJMSDSOrder">
  <label>Map LineItem Into JMS DSOrder</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="bundleOrder" type="rifp">
      <type>order_ds_ws.bundleOrderSTC</type>
    </parameter>
    <parameter name="orderItem" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="lineItemDS" type="rifp">
      <type>nmeta_com.conceptwave.system.Object</type>
    </parameter>
    <parameter name="isService" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    // mapping lineItem
    orderItem.mapTo(lineItemDS);

    // mapping bundleInfo
    lineItemDS.bundleProductType = bundleOrder.bundles[0].bundle.productType;
    lineItemDS.bundleServiceType = bundleOrder.bundles[0].bundle.serviceType;

    // mapping parentLineItemServiceNumber
    if(orderItem.elementTypeInOrderTree == 'B') {
        lineItemDS.parentItemServiceNumber = null;
    }
    else {
        var orchestrationRecord = processSTC.getRecordInOrchestrationTableByLineItemId(orderItem.id);
        if(orchestrationRecord == null) {
            Global.throwException("Error in finding orchestrationRecord[" + orderItem.id + "]");
        }
        var parentItemId = orchestrationRecord.cwParentObjectId;
        var parentLineItemDoc = Document.readDoc("ds_ws.lineItemDocument", parentItemId);
        if(parentLineItemDoc == null) {
            Global.throwException("Error in loading lineItem document with id " + parentItemId);
        }
        lineItemDS.parentItemServiceNumber = parentLineItemDoc.serviceNumber;
    }


    // adding reasonCode array to lineItem
    var reasonCodeArray = ds_ws.getReasonCodesAsArray(orderItem.id);
    if(reasonCodeArray != null) {
        for(var i=0; i<reasonCodeArray.length; i++) {
            lineItemDS.reasonCode[i] = reasonCodeArray[i];
        }
    }

    // loading orderItemContainer because all the other objects (NV, Block and VAS) are children of the container
    var orderItemContainer = bundleOrder.findItemById(orderItem.cwParentId);

    if(orderItem.elementTypeInOrderTree == 'B') {
        // mapping bundle parameters (NV)
        if(orderItemContainer.bundleParameters != null) {
            for(var i=0; i<orderItemContainer.bundleParameters.length; i++) {
                orderItemContainer.bundleParameters[i].bundleParameter.mapTo(lineItemDS.nameValueParameters[i]);
            }
        }

        // mapping bundle block parameters
        if(orderItemContainer.bundleBlockParameters != null) {
            for(var i=0; i<orderItemContainer.bundleBlockParameters.length; i++) {
                orderItemContainer.bundleBlockParameters[i].bundleBlockParameter.mapTo(lineItemDS.blockParameters[i]);
                // Added to unroll values to block parameters
                var values = ds_ws.getBlockValuesAsArray(orderItemContainer.bundleBlockParameters[i].bundleBlockParameter.cwDocId);
                for( var v=0; v < values.length; v++){
                  lineItemDS.blockParameters[i].value[v] = values[v].blockValue;
                }
            }
        }

        if(isService) {
            // loop in all children items to check if there is any VAS service
            if(orderItemContainer.circuits != null) {
                var childrenCount = 0;
                for(var i=0; i<orderItemContainer.circuits.length; i++) {
                    if(ds_ws.isVAS(orderItemContainer.circuits[i].circuit.lineItemType)) {
                        var vasLineItemDS = new DataStructure("ds_jms.vasLineItem");
                        vasLineItemDS = processSTC.mapLineItemIntoJMSDSOrder(bundleOrder, orderItemContainer.circuits[i].circuit, vasLineItemDS, false);
                        lineItemDS[childrenCount] = vasLineItemDS;
                        childrenCount++;
                    }
                }
            }
        }
    }
    else if(orderItem.elementTypeInOrderTree == 'C') {
        // mapping circuit parameters (NV)
        if(orderItemContainer.circuitParameters != null) {
            for(var i=0; i<orderItemContainer.circuitParameters.length; i++) {
                orderItemContainer.circuitParameters[i].circuitParameter.mapTo(lineItemDS.nameValueParameters[i]);
            }
        }

        // mapping circuit block parameters
        if(orderItemContainer.circuitBlockParameters != null) {
            for(var i=0; i<orderItemContainer.circuitBlockParameters.length; i++) {
                orderItemContainer.circuitBlockParameters[i].circuitBlockParameter.mapTo(lineItemDS.blockParameters[i]);
                // Added to unroll values to block parameters
                var values = ds_ws.getBlockValuesAsArray(orderItemContainer.circuitBlockParameters[i].circuitBlockParameter.cwDocId);
                for( var v=0; v < values.length; v++){
                  lineItemDS.blockParameters[i].value[v] = values[v].blockValue;
                }
            }
        }

        if(isService) {
            // loop in all children items to check if there is any VAS service
            if(orderItemContainer.services != null) {
                var childrenCount = 0;
                for(var i=0; i<orderItemContainer.services.length; i++) {
                    if(ds_ws.isVAS(orderItemContainer.services[i].service.lineItemType)) {
                        var vasLineItemDS = new DataStructure("ds_jms.vasLineItem");
                        vasLineItemDS = processSTC.mapLineItemIntoJMSDSOrder(bundleOrder, orderItemContainer.services[i].service, vasLineItemDS, false);
                        lineItemDS[childrenCount] = vasLineItemDS;
                        childrenCount++;
                    }
                }
            }
        }
    }
    else if(orderItem.elementTypeInOrderTree == 'S') {
        // mapping service parameters (NV)
        if(orderItemContainer.serviceParameters != null) {
            for(var i=0; i<orderItemContainer.serviceParameters.length; i++) {
                orderItemContainer.serviceParameters[i].serviceParameter.mapTo(lineItemDS.nameValueParameters[i]);
            }
        }

        // mapping service block parameters
        if(orderItemContainer.serviceBlockParameters != null) {
            for(var i=0; i<orderItemContainer.serviceBlockParameters.length; i++) {
                orderItemContainer.serviceBlockParameters[i].serviceBlockParameter.mapTo(lineItemDS.blockParameters[i]);
                // Added to unroll values to block parameters
                var values = ds_ws.getBlockValuesAsArray(orderItemContainer.serviceBlockParameters[i].serviceBlockParameter.cwDocId);
                for( var v=0; v < values.length; v++){
                  lineItemDS.blockParameters[i].value[v] = values[v].blockValue;
                }
            }
        }

        if(isService) {
            // loop in all children items to check if there is any VAS service
            if(orderItemContainer.subServices != null) {
                var childrenCount = 0;
                for(var i=0; i<orderItemContainer.subServices.length; i++) {
                    if(ds_ws.isVAS(orderItemContainer.subServices[i].subService.lineItemType)) {
                        var vasLineItemDS = new DataStructure("ds_jms.vasLineItem");
                        vasLineItemDS = processSTC.mapLineItemIntoJMSDSOrder(bundleOrder, orderItemContainer.subServices[i].subService, vasLineItemDS, false);
                        lineItemDS[childrenCount] = vasLineItemDS;
                        childrenCount++;
                    }
                }
            }
        }
    }
    else if(orderItem.elementTypeInOrderTree == 'T') {
        // mapping subService parameters (NV)
        if(orderItemContainer.subServiceParameters != null) {
            for(var i=0; i<orderItemContainer.subServiceParameters.length; i++) {
                orderItemContainer.subServiceParameters[i].subServiceParameter.mapTo(lineItemDS.nameValueParameters[i]);
            }
        }

        // mapping subService block parameters
        if(orderItemContainer.subServiceBlockParameters != null) {
            for(var i=0; i<orderItemContainer.subServiceBlockParameters.length; i++) {
                orderItemContainer.subServiceBlockParameters[i].subServiceBlockParameter.mapTo(lineItemDS.blockParameters[i]);
                // Added to unroll values to block parameters
                var values = ds_ws.getBlockValuesAsArray(orderItemContainer.subServiceBlockParameters[i].subServiceBlockParameter.cwDocId);
                for( var v=0; v < values.length; v++){
                  lineItemDS.blockParameters[i].value[v] = values[v].blockValue;
                }
            }
        }
    }


    return lineItemDS;
  ]]></script>
</script>