<?xml version="1.0" encoding="UTF-8" ?>
<binding filenameHash="accd38947ba2a49c8e97e78e0b9ef4d0" versionHash="eccbc87e4b5ce2fe28308fd9f2a7baf3" name="wsws.bindingForExpediterIF_JS_WHOLESALE">
  <extensionList>
    <extension name="operation_CustomerInformationUpdate" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          debugPrintln(stcc.getSysdateForLog() + "Received CustomerInformationUpdate with input = " + (input == null ? "null" : input.toXML()));

                var response = null;
                var errors = basicValidation_ (input);
                if (errors != null) {
                      response = (createResponse_ (input, errors));
                }
                else {
                      response = (processRequest_ (input));
                }

                stcc.checkPayloadToCRMSize(response, "wsws:operation_CustomerInformationUpdate");

                return response;


                //
                //  basicValidation_
                //
                function basicValidation_ (input) {

                      if (input == undefined || input == null || input.metadataType != "wsws:customerInformationUpdate") {
                            return (xcutl.createError ("InvalidInput", "wsws:customerInformationUpdate"));
                      }

                      if (input.businessUnit != "Wholesale") {
                            return (xcutl.createError ("InvalidBusinessUnit", input.businessUnit));
                      }

                }            // b a s i c V a l i d a t i o n _

                //
                //  processRequest_
                //
                function processRequest_ (input) {

                      // starting Process
                      var processId = Process.startProcess ("stcw:customerInfoUpdate", null);
                      var patchResults = rpts.patchAsynchMessageLog (processId, "crmCustomerInformationUpdate");

                      Process.sendMessageToProcess (processId, null, "wsws:ifExpedtier_WHOLESALE/operation_CustomerInformationUpdate", input);

                      return (createResponse_ (input));

                }            // p r o c e s s R e q u e s t _

                //
                //  createResponse_
                //
                function createResponse_ (input, error) {

                      var response = new DataStructure ("wsws:customerInformationUpdateAcknowledgement");
                      response.businessUnit  = input.businessUnit;
                      response.accountNumber = input.accountNumber;
                      if(error != null) {
                            response.status.errorCode = error.code;
                            response.status.errorDescription = stcc.limitStringLengthToCRMValue(error.text);
                            response.status.errorType = "FUNCTIONAL";
                            response.status.status = "ERROR";
                      }
                      else {
                            response.status.status = "SUCCESS";
                      }

          debugPrintln(stcc.getSysdateForLog() + "Creating response in CustomerInformationUpdate = " + response.toXML());

                      return (response);

                }      // c r e a t e R e s p o n s e _
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_SubmitOrder" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          debugPrintln(stcc.getSysdateForLog() + "Received SubmitOrder with input = " + (input == null ? "null" : input.toXML()));
          debugPrintln(stcc.getSysdateForLog() + "MsgId = " + UserProfile.getMsgLogId());

                var response = null;
                var errors = basicValidation_ (input);
                if (errors != null) {
                      response = (createResponse_ (input, errors));
                }
                else {
                      response = (processOrderRequest_ (input));
                }

                stcc.checkPayloadToCRMSize(response, "wsws:operation_SubmitOrder");

                return response;



                //
                //  basicValidation_
                //
                function basicValidation_ (input) {

                      if (input == undefined || input == null || input.metadataType != "wsws:submitOrder") {
                            return (xcutl.createError ("InvalidInput", "wsws:submitOrder"));
                      }

                      if (input.businessUnit != "Wholesale") {
                            return (xcutl.createError ("InvalidBusinessUnit", input.businessUnit));
                      }

                      return (null);

                }            // b a s i c V a l i d a t i o n _

                //
                //  processOrderRequest_
                //
                function processOrderRequest_ (input) {

                      var document = stcw.storeGenericProcessMessage(null, "RECEIVED_SUBMIT_ORDER", input);

                      var processDocument = new Document("stcw:checkProcessDocument");
                      processDocument.genericProcessMsgDocId = document.id;

                      var processId = Process.startProcess ("stcw:checkSubmitOrder", processDocument);
                      var patchResults = rpts.patchAsynchMessageLog (processId, "expediterValidation");

          debugPrintln(stcc.getSysdateForLog() + "SubmitOrder <" + input.orderNumber + ">: processId = " + processId);

                      return (createResponse_ (input));

                }            // p r o c e s s O r d e r R e q u e s t _

                //
                //  createResponse_
                //
                function createResponse_ (input, error) {

                      var response = new DataStructure ("wsws:submitOrderResponse");
                      response.businessUnit = input.businessUnit;
                      response.orderNumber = input.orderNumber;
                      if(error != null) {
                            response.status.errorCode = error.code;
                            response.status.errorDescription = stcc.limitStringLengthToCRMValue(error.text);
                            response.status.errorType = "FUNCTIONAL";
                            response.status.status = "ERROR";
                      }
                      else {
                            response.status.status = "SUCCESS";
                      }


          debugPrintln(stcc.getSysdateForLog() + "Creating response in SubmitOrder = " + response.toXML());
                      return (response);

                }      // c r e a t e R e s p o n s e _
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_SubmitOrder$Input" type="ext">
      <element>Message</element>
      <elementItemMap>
        <elementItem key="use">literal</elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_SubmitOrder$Output" type="ext">
      <element>Message</element>
      <elementItemMap>
        <elementItem key="use">literal</elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_UpdateOrder" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          debugPrintln(stcc.getSysdateForLog() + "Received UpdateOrder with input = " + (input == null ? "null" : input.toXML()));

                var response = null;
                var errors = basicValidation_ (input);
                if (errors != null) {
                      response = (createResponse_ (input, errors));
                }
                else {
                      response = (processUpdateOrderRequest_ (input));
                }

                stcc.checkPayloadToCRMSize(response, "wsws:operation_UpdateOrder");

                return response;

                //
                //  basicValidation_
                //
                function basicValidation_ (input) {

                      if (input == undefined || input == null || input.metadataType != "wsws:updateOrder") {
                            return (xcutl.createError ("InvalidInput", "wsws:updateOrder"));
                      }

                      if (input.businessUnit != "Wholesale") {
                            return (xcutl.createError ("InvalidBusinessUnit", input.businessUnit));
                      }


                }            // b a s i c V a l i d a t i o n _

                //
                //  processUpdateOrderRequest_
                //
                function processUpdateOrderRequest_ (input) {

                      var document = stcw.storeGenericProcessMessage(null, "RECEIVED_UPDATE_ORDER", input);

                      var processDocument = new Document("stcw:checkProcessDocument");
                      processDocument.genericProcessMsgDocId = document.id;

                      var processId = Process.startProcess ("stcw:checkUpdateOrder", processDocument);

          debugPrintln(stcc.getSysdateForLog() + "UpdateOrder <" + input.orderNumber + ">: processId = " + processId);

                      return createResponse_ (input);
                }            // p r o c e s s U p d a t e O r d e r R e q u e s t _

                //
                //  createResponse_
                //
                function createResponse_ (input, error) {

                      var response = new DataStructure ("wsws:updateOrderResponse");

                      response.businessUnit = input.businessUnit;
                      response.orderNumber = input.orderNumber;
                      if(error != null) {
                            response.status.errorCode = error.code;
                            response.status.errorDescription = stcc.limitStringLengthToCRMValue(error.text);
                            response.status.errorType = "FUNCTIONAL";
                            response.status.status = "ERROR";
                      }
                      else {
                            response.status.status = "SUCCESS";
                      }

          debugPrintln(stcc.getSysdateForLog() + "Creating response in UpdateOrder = " + response.toXML());
                      return (response);

                }      // c r e a t e R e s p o n s e _
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_UpdateOrder$Input" type="ext">
      <element>Message</element>
      <elementItemMap>
        <elementItem key="use">literal</elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_UpdateOrder$Output" type="ext">
      <element>Message</element>
      <elementItemMap>
        <elementItem key="use">literal</elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_QuoteValidation" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          debugPrintln(stcc.getSysdateForLog() + "Received ValidateQuote with input = " + (input == null ? "null" : input.toXML()));

                var errors = basicValidation_ (input);
                if (errors == null) {
                      startProcess_ (input);
                }
                var response = (createResponse_ (input, errors));

                stcc.checkPayloadToCRMSize(response, "wsws:operation_QuoteValidation");

                return response;

                //
                //  basicValidation_
                //
                function basicValidation_ (input) {

                      if (input == undefined || input == null || input.metadataType != "wsws:quoteValidation") {
                            return (xcutl.createError ("InvalidInput", "wsws:quoteValidation"));
                      }

                      if (input.businessUnit != "Wholesale") {
                            return (xcutl.createError ("InvalidBusinessUnit", input.businessUnit));
                      }

                      if(input.lineItems == null || input.lineItems.length == 0) {
                            return (xcutl.createError ("NoServiceFound"));
                      }

                      var ip;
                      for (var i=0;i<input.lineItems.length;i++) {
                      ip = input.lineItems[i];
                            if (ip.serviceStatus != "Add") {
                                  if ((ip.feasibilityStatus != "Feasible")&&(ip.feasibilityStatus != "Not Feasible")&&(ip.feasibilityStatus != "Planned Feasible")) {
                                        return (xcutl.createError ("Invalid feasibilityStatus"));
                                  }
                            }
                            else {
                                  if (ip.feasibilityStatus) {
                                        return (xcutl.createError ("Invalid feasibilityStatus"));
                                  }
                            }
                      }

                      return (null);

                }            // b a s i c V a l i d a t i o n _



                //
                //  startProcess_
                //
                function startProcess_ (input) {
                      var document = stcw.storeGenericProcessMessage(null, "RECEIVED_QUOTE", input);

                      var processDocument = new Document("stcw:checkProcessDocument");
                      processDocument.genericProcessMsgDocId = document.id;
                      // adding the msgId to processDocument so to assign the registered event
                      // to each childQuote process started for the received parent quote
                      processDocument.cwMsgId = UserProfile.getMsgLogId();

                      var processId = Process.startProcess ("stcw:checkReceivedQuote", processDocument);
                      var patchResults = rpts.patchAsynchMessageLog (processId, "expediterValidation");

          debugPrintln(stcc.getSysdateForLog() + "Quote <" + input.quoteNumber + ">: processId = " + processId);
                }            // s t a r t P r o c e s s _

                //
                //  createResponse_
                //
                function createResponse_ (input, error) {

                      var response = new DataStructure ("wsws:quoteValidationResponse");
                      response.businessUnit = input.businessUnit;
                      response.quoteNumber = input.quoteNumber;
                      if(error != null) {
                            response.status.errorCode = error.code;
                            response.status.errorDescription = stcc.limitStringLengthToCRMValue(error.text);
                            response.status.errorType = "FUNCTIONAL";
                            response.status.status = "ERROR";
                      }
                      else {
                            response.status.status = "SUCCESS";
                      }

          debugPrintln(stcc.getSysdateForLog() + "Creating response in ValidateQuote = " + response.toXML());
                      return (response);

                }      // c r e a t e R e s p o n s e _
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_QuoteValidation$Output" type="ext">
      <element>Message</element>
      <elementItemMap>
        <elementItem key="use">literal</elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_ReportFailure" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          debugPrintln(stcc.getSysdateForLog() + "Received ReportFailure with input = " + (input == null ? "null" : input.toXML()));

                var response = null;
                var errors = basicValidation_ (input);
                if (errors != null) {
                      response = (createResponse_ (input, errors));
                }
                else {
                      insertReportFailureData_(input);
                      response = (createResponse_ (input));
                }

                stcc.checkPayloadToCRMSize(response, "wsws:operation_ReportFailure");

                return response;


                //
                //  basicValidation_
                //
                function basicValidation_ (input) {

                      if (input == undefined || input == null || input.metadataType != "wsws:reportFailure") {
                            return (xcutl.createError ("InvalidInput", "wsws:reportFailure"));
                      }

                      return (null);

                }            // b a s i c V a l i d a t i o n _

                //
                //  insertReportFailureData_
                //
                function insertReportFailureData_ (input) {

                      var doc              = new Document ("stcw:reportFailureData");
                      doc.errorCode        = input.errorCode;
                      doc.errorDescription = input.errorDescription;
                      doc.errorType        = input.errorType;
                      doc.functionName     = input.functionName;
                      doc.sourceErrorCode  = input.sourceErrorCode;
                      doc.status           = input.status;
                      doc.save();

                }      // i n s e r t R e p o r t F a i l u r e D a t a _

                //
                //  createResponse_
                //
                function createResponse_ (input, error) {

                      var response = new DataStructure ("wsws:reportFailureAcknowledgement");
                      if(error != null) {
                            response.errorCode = error.code;
                            response.errorDescription = stcc.limitStringLengthToCRMValue(error.text);
                            response.errorType = "FUNCTIONAL";
                            response.status = "ERROR";
                      }
                      else {
                            response.status = "SUCCESS";
                      }


          debugPrintln(stcc.getSysdateForLog() + "Creating response in ReportFailure = " + response.toXML());
                      return (response);

                }      // c r e a t e R e s p o n s e _
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_ReportFailure$Input" type="ext">
      <element>Message</element>
      <elementItemMap>
        <elementItem key="use">literal</elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_ReportFailure$Output" type="ext">
      <element>Message</element>
      <elementItemMap>
        <elementItem key="use">literal</elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_SiteInformationUpdateAck" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          debugPrintln(stcc.getSysdateForLog() + "Received SiteInformationUpdate with input = " + (input == null ? "null" : input.toXML()));

                var response = null;
                var errors = basicValidation_ (input);
                if (errors != null) {
                      response = (createResponse_ (input, errors));
                }
                else {
                      var processId = stcw.findProcessIdForSiteInfoUpdate(input.siteID);
                      if (processId == null) {
          debugPrintln(stcc.getSysdateForLog() + "Unable to find Process for SiteInformationUpdate = '" + input.siteID + "'");
                            response = (createResponse_ (input));
                      }
                      else {
                            response = (processInputData_ (input, processId, "stcw:siteInformationUpdate"));
                      }
                }

                stcc.checkPayloadToCRMSize(response, "wsws:operation_SiteInformationUpdateAck");

                return response;

                //
                //  basicValidation_
                //
                function basicValidation_ (input) {

                      if (input == undefined || input == null || input.metadataType != "wsws:siteInformationUpdateAcknowledgement") {
                            return (xcutl.createError ("InvalidInput", "wsws:siteInformationUpdateAcknowledgement"));
                      }

                      if (input.businessUnit != "Wholesale") {
                            return (xcutl.createError ("InvalidBusinessUnit", input.businessUnit));
                      }

                      var validationResult = input.validate(1, true);
                      if(validationResult != null) {
                            var error = new DataStructure ("xcutl:Error");
                            error.code = validationResult[0];
                            error.text = validationResult[1];
                            return error;
                      }


                      return (null);

                }            // b a s i c V a l i d a t i o n _

                //
                //  processInputData_
                //
                function processInputData_ (input, processId, processType) {

                      Global.logDebug ("wsws:ifExpedtier_WHOLESALE/operation_SiteInformationUpdateAck () - sending to process " + processId + " input='" + input.toXML() + "'");

                      var patchResults = rpts.patchAsynchMessageLog (processId, "eaiReceiveSiteInfoUpdateAck");

                      Process.sendMessageToProcess (processId, null, "wsws:ifExpedtier_WHOLESALE/operation_SiteInformationUpdateAck", input);

                      return (createResponse_ (input));

                }            // p r o c e s s I n p u t D a t a _

                //
                //  createResponse_
                //
                function createResponse_ (input, error) {

                      var response = new DataStructure ("wsws:siteInformationUpdateAcknowledgementResponse");
                      if(error == null) {
                            response.status = "SUCCESS";
                      }
                      else {
                            response.errorCode = error.code;
                            response.errorDescription = stcc.limitStringLengthToCRMValue(error.text);
                            response.errorType = "FUNCTIONAL";
                            response.status = "ERROR";
                      }

          debugPrintln(stcc.getSysdateForLog() + "Creating response in SiteInformationUpdate = " + response.toXML());

                      return (response);

                }      // c r e a t e R e s p o n s e _
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_SiteInformationUpdateAck$Input" type="ext">
      <element>Message</element>
      <elementItemMap>
        <elementItem key="use">literal</elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_SiteInformationUpdateAck$Output" type="ext">
      <element>Message</element>
      <elementItemMap>
        <elementItem key="use">literal</elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_RestorationAcknowledgement" type="ext">
      <element>Operation</element>
      <elementItemMap>
        <elementItem key="script"><![CDATA[
          debugPrintln(stcc.getSysdateForLog() + "Received RestorationAcknowledgement with input = " + (input == null ? "null" : input.toXML()));

                var response = null;
                var errors = basicValidation_ (input);
                if (errors != null) {
                      response = (createResponse_ (input, errors));
                }
                else {
                      var processId = stcw.findProcessIdForRestoration(input.maintOrderNumber);
                      if (processId == null) {
          debugPrintln(stcc.getSysdateForLog() + "Unable to find Process for Restoration = '" + input.maintOrderNumber + "'");
                            response = (createResponse_ (input));
                      }
                      else {
                            response = (processInputData_ (input, processId, "stcw:restoration"));
                      }
                }

                stcc.checkPayloadToCRMSize(response, "wsws:operation_RestorationAcknowledgement");

                return response;

                //
                //  basicValidation_
                //
                function basicValidation_ (input) {

                      if (input == undefined || input == null || input.metadataType != "wsws:restorationAcknowledgement") {
                            return (xcutl.createError ("InvalidInput", "wsws:restorationAcknowledgement"));
                      }

                      if (input.businessUnit != "Wholesale") {
                            return (xcutl.createError ("InvalidBusinessUnit", input.businessUnit));
                      }

                      var validationResult = input.validate(1, true);
                      if(validationResult != null) {
                            var error = new DataStructure ("xcutl:Error");
                            error.code = validationResult[0];
                            error.text = validationResult[1];
                            return error;
                      }


                      return (null);

                }            // b a s i c V a l i d a t i o n _

                //
                //  processInputData_
                //
                function processInputData_ (input, order, processType) {

                      Global.logDebug ("wsws:ifExpedtier_WHOLESALE/operation_RestorationAcknowledgement () - sending to process " + processId + " input='" + input.toXML() + "'");

                      var patchResults = rpts.patchAsynchMessageLog (processId, "eaiReceiveRestorationAck");

                      Process.sendMessageToProcess (processId, null, "wsws:ifExpedtier_WHOLESALE/operation_RestorationAcknowledgement", input);

                      return (createResponse_ (input));

                }            // p r o c e s s I n p u t D a t a _

                //
                //  createResponse_
                //
                function createResponse_ (input, error) {

                      var response = new DataStructure ("wsws:restorationAcknowledgementResponse");
                      if(error == null) {
                            response.status = "SUCCESS";
                      }
                      else {
                            response.errorCode = error.code;
                            response.errorDescription = stcc.limitStringLengthToCRMValue(error.text);
                            response.errorType = "FUNCTIONAL";
                            response.status = "ERROR";
                      }

          debugPrintln(stcc.getSysdateForLog() + "Creating response in RestorationAcknowledgement = " + response.toXML());

                      return (response);

                }      // c r e a t e R e s p o n s e _
        ]]></elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_RestorationAcknowledgement$Input" type="ext">
      <element>Message</element>
      <elementItemMap>
        <elementItem key="use">literal</elementItem>
      </elementItemMap>
    </extension>
    <extension name="operation_RestorationAcknowledgement$Output" type="ext">
      <element>Message</element>
      <elementItemMap>
        <elementItem key="use">literal</elementItem>
      </elementItemMap>
    </extension>
  </extensionList>
  <guid>{05659f14-39b3-adf3-d3d5-0f3777faf19b}</guid>
  <interface>iface_wsws.ifExpedtier_WHOLESALE</interface>
  <label>bindingForExpediterIF_JS_WHOLESALE</label>
  <metaVersion>3</metaVersion>
  <provider>prov_cwf.jsprov</provider>
</binding>