<?xml version="1.0" encoding="UTF-8" ?>
<script filenameHash="24ee165e2b5787aeab14914c90b6b1fd" versionHash="a87ff679a2f3e71d9181a67b7542122c" name="stcw.addOSUNVPairs">
  <label>Add OSU NV Pairs</label>
  <metaVersion>4</metaVersion>
  <parameterList>
    <parameter name="osuEvent" type="rifp">
      <type>dstruct_com.conceptwave.system.DataStructure</type>
    </parameter>
    <parameter name="orderNumber" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="orderType" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="targetSubType" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="circPathInstId" type="rifp">
      <type>dtype_granite.INST_ID_16</type>
    </parameter>
    <parameter name="resourceInstId" type="rifp">
      <type>dtype_granite.INST_ID_16</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    var cimwFieldMappingsSearchDoc = new Document("cimw.searchFieldMappingsDoc");
    cimwFieldMappingsSearchDoc.ORDER_TYPE = orderType;
    cimwFieldMappingsSearchDoc.TARGET_SUBTYPE = targetSubType;
    cimwFieldMappingsSearchDoc.PATH_EXISTS = 'Y';

    var cimwFieldMappingsList = Finder.runFinder("cimw.fieldMappingsFinder", "select", cimwFieldMappingsSearchDoc);
    if(cimwFieldMappingsList != null && cimwFieldMappingsList.size > 0) {
        var nvPairProcessed = new String();
        var countAdded = 0;
        for(var i=0; i<cimwFieldMappingsList.size; i++) {
            if(nvPairProcessed.indexOf(cimwFieldMappingsList[i].TARGET) < 0) {
                var nvPair = new DataStructure("wgws.nameValuePair");
                nvPair.name = cimwFieldMappingsList[i].TARGET;
                nvPair.value = getValueFromGranite_(cimwFieldMappingsList[i].SOURCE);
                if(nvPair.value == null && cimwFieldMappingsList[i].DEFAULT_VALUE != null) {
                    nvPair.value = cimwFieldMappingsList[i].DEFAULT_VALUE;
                }
                osuEvent.nameValue[countAdded] = nvPair;

                nvPairProcessed += (nvPair.name + "##");
                countAdded++;
            }
            else {
                Global.logDebug ("addOSUNVPairs - nvPair :" + cimwFieldMappingsList[i].TARGET + " already processed");
            }
        }
    }

    return osuEvent;


    function getValueFromGranite_(sourceField) {
        var value = null;

        var indexPipe = sourceField.indexOf("|");
        if(indexPipe > 0) {
            // it's an UDA
            if(sourceField.startsWith("e2ePATH")) {
                // UDA in CIRC_PATH_ATTR_SETTINGS
                var udaGroup = sourceField.substr("e2ePATH".length, indexPipe - "e2ePATH".length);
                var udaName = sourceField.substr(indexPipe + 1);

                value = granite.getUDAValueFor("PATH", circPathInstId, udaGroup, udaName);
            }
            else if (sourceField.startsWith("AMO")) {
                // UDA in RESOURCE_ATTR_SETTINGS
                var udaGroup = sourceField.substr("AMO".length, indexPipe - "AMO".length);
                var udaName = sourceField.substr(indexPipe + 1);

                value = granite.getUDAValueFor("AMO", resourceInstId, udaGroup, udaName);
            }
            else {
                Global.logDebug ("addOSUNVPairs - found unexpected source in CIMW Field_Mapping:" + sourceField);
            }
        }
        else {
            // it's a field
            if(sourceField.startsWith("e2ePATH")) {
                // it's a field of the Path
                var path = granite.getPath(circPathInstId);
                if(path != null) {
                    var fieldName = sourceField.substr("e2ePATH".length);
                    if(fieldName == "circPathHumId") {
                        value = path.CIRC_PATH_HUM_ID;
                    }
                    else {
                         Global.logDebug ("addOSUNVPairs - found unexpected source in CIMW Field_Mapping:" + sourceField);
                    }
                }
            }
            else if(sourceField.startsWith("AMO")) {
                // it's a field of the AMO
                var amo = granite.getAMO(resourceInstId);
                if(amo != null) {
                    var fieldName = sourceField.substr("AMO".length);
                    if(fieldName == "name") {
                        value = amo.NAME;
                    }
                    else {
                         Global.logDebug ("addOSUNVPairs - found unexpected source in CIMW Field_Mapping:" + sourceField);
                    }
                }

            }
            else if(sourceField.startsWith("aSITE")) {
                // it's the name of the A-Site of the path
                var path = granite.getPath(circPathInstId);
                if(path != null) {
                    var fieldName = sourceField.substr("aSITE".length);
                    if(fieldName == "siteHumId") {
                        var site = granite.getSite(path.A_SIDE_SITE_ID);
                        if(site != null) {
                            value = site.SITE_HUM_ID;
                        }
                    }
                    else {
                         Global.logDebug ("addOSUNVPairs - found unexpected source in CIMW Field_Mapping:" + sourceField);
                    }
                }
            }
            else if(sourceField.startsWith("zSITE")) {
                // it's the name of the A-Site of the path
                var path = granite.getPath(circPathInstId);
                if(path != null) {
                    var fieldName = sourceField.substr("zSITE".length);
                    if(fieldName == "siteHumId") {
                        var site = granite.getSite(path.Z_SIDE_SITE_ID);
                        if(site != null) {
                            value = site.SITE_HUM_ID;
                        }
                    }
                    else {
                         Global.logDebug ("addOSUNVPairs - found unexpected source in CIMW Field_Mapping:" + sourceField);
                    }
                }

            }

        }


        return value;
    }
  ]]></script>
</script>