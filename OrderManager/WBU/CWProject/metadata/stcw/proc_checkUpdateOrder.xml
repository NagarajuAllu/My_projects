<?xml version="1.0" encoding="UTF-8" ?>
<process filenameHash="985283280c5229d8f785a748e6cb23a9" versionHash="eccbc87e4b5ce2fe28308fd9f2a7baf3" name="stcw.checkUpdateOrder">
  <activity name="start" type="seqActivity">
    <guid>{05be7cdc-1df8-0057-1e39-aad61427b6a4}</guid>
    <label>Start</label>
    <x>108.34766</x>
    <y>31.0</y>
    <childList>
      <child name="validateIncomingOrder" type="scriptActivity">
        <guid>{089002f2-4d4b-f422-aa84-218b4d85669c}</guid>
        <label>Validate Incoming Order</label>
        <x>244.34766</x>
        <y>14.0</y>
        <methodList>
          <method name="cwOnProcActBefore" type="action">
            <category>before</category>
            <guid>{0a296dd0-6a30-262d-568e-5d1a0d397b83}</guid>
            <system>true</system>
            <script><![CDATA[
              rpts.updateHistoryEvent (this, "expediterValidation");

              var input = stcw.findGenericProcessMessageById (this.process.processDocument.genericProcessMsgDocId, "wsws:updateOrder");
              debugPrintln(stcc.getSysdateForLog() + "Received UpdateOrder with input = " + (input == null ? "null" : input.toXML()));

                    this.process.processDocument.orderNumber = input.orderNumber;

                    var errors = basicValidation_ (input);
                    if (errors == null) {
                          if(stcw.isCancelOrderRequest (input) || stcw.isReviseOrderRequest (input))  {
                                errors = validateUpdateOrder_ (input);
                          }
                          else {
                                errors = xcutl.createError ("UnsupportedOperation", "operation_UpdateOrder", input.orderNumber, input.orderStatus);
                          }
                    }

                    if(errors == null) {
                          this.process.processDocument.ackResult = "SUCCESS";
                    }
                    else {
                          this.process.processDocument.ackResult = "ERROR";
                          this.process.processDocument.ErrorCode = errors.code;
                          this.process.processDocument.ErrorText = errors.text;
                    }


                    //
                    //  basicValidation_
                    //
                    function basicValidation_ (input) {

                          if (input == undefined || input == null || input.metadataType != "wsws:updateOrder")
                                return (xcutl.createError ("InvalidInput", "wsws:updateOrder"));

                          if (input.businessUnit != "Wholesale") {
                                return (xcutl.createError ("InvalidBusinessUnit", input.businessUnit));
                          }

                          var validationResult = input.validate(1, true);
                          if(validationResult != null) {
                                var error = new DataStructure ("xcutl:Error");
                                error.code = validationResult[0];
                                error.text = validationResult[1];
                                return error;
                          }

                          var attributesToMonitor = ["changeRequestType", "segmentFlag"];
                          for(var i=0; i<attributesToMonitor.length; i++) {
                              var valueFound = input[attributesToMonitor[i]];
                              if(! stcw.validatePickListValue(attributesToMonitor[i], valueFound)) {
                                  error      = new DataStructure ("xcutl:Error");
                                  error.code = "DE1107";
                                  error.text = Global.translateText("DE1107", null, attributesToMonitor[i]);
                                  return error;
                              }
                          }

                          if(input.service != null) {
                              var attributesToMonitor = ["segmentFlag"];
                              for(var i=0; i<attributesToMonitor.length; i++) {
                                  var valueFound = input.service[attributesToMonitor[i]];
                                  if(! stcw.validatePickListValue(attributesToMonitor[i], valueFound)) {
                                      error      = new DataStructure ("xcutl:Error");
                                      error.code = "DE1107";
                                      error.text = Global.translateText("DE1107", null, attributesToMonitor[i]);
                                      return error;
                                  }
                              }
                          }

                          return (null);

                    }            // b a s i c V a l i d a t i o n _

                    //
                    // validateUpdateOrder_
                    //
                    function validateUpdateOrder_ (input) {

                          // order does not exist
                          var order = stcw.findOrderByNumber (input.orderNumber);
                          if (order == null)
                                return (xcutl.createError ("UpdOrderNotFound", input.orderNumber));

                          // order status is complete
                          if (stcw.isOrderProcessComplete (order))
                                return (xcutl.createError ("UpdOrderComplete", input.orderNumber));

                          // order has been cancelled
                          if (stcw.isOrderCancelled (order))
                                return (xcutl.createError ("UpdOrderCancel", input.orderNumber));

                          /******

                            Removed according to Raj request - see mail 24/06/2011

                          // quote number is specified but does not exist
                          if (stcc.stringHasValue (input.quoteNumber) && stcw.findQuoteByParentQuoteNumberAndRowId (input.quoteNumber) == null) {
                                return (xcutl.createError ("QuoteForOrderNotFound", input.orderNumber, input.quoteNumber));
                          }

                          // According to mail sent to Maksym & Ravi 05/06/2010, we expect reservationNumber at Order level and Service level are the same
                          // so, if it's set to Order number we use this, else we try to use the Service one.
                          var reservationNumber = null;
                          if (stcc.stringHasValue (input.reservationNumber)) {
                                // default using Order level one
                                reservationNumber = input.reservationNumber;

                                if(stcc.stringHasValue(input.service.reservationNumber)) {
                                      if(input.service.reservationNumber != reservationNumber) {
                                            // Both exist but they are different, so error!
                                            return (xcutl.createError ("DifferentReservationNumber", input.orderNumber, reservationNumber, input.service.reservationNumber));
                                      }
                                }
                          }
                          else {
                                if(stcc.stringHasValue(input.service.reservationNumber)) {
                                      // using Service level one
                                      reservationNumber = input.service.reservationNumber;
                                }
                          }

                          if(reservationNumber != null) {
                                var quote = stcw.findReservation (reservationNumber);

                                // reservation number is specified but does not exist
                                if(quote == null) {
                                      return (xcutl.createError ("ReservationNotFound", input.orderNumber, reservationNumber));
                                }

                                var countNotCancelledOrder = stcw.countNotCancelledOrderByReservation(reservationNumber);
                                if(countNotCancelledOrder == quote.header.quantity) {
                                      return (xcutl.createError ("AllReservationUsed", reservationNumber));
                                }
                          }

                          ****/

                          return (null);

                    }            // v a l i d a t e U p d a t e O r d e r _
            ]]></script>
          </method>
          <method name="cwOnProcActCond" type="action">
            <category>cond</category>
            <guid>{0748c2ee-7ed0-3876-5591-67fce8a22e90}</guid>
            <system>true</system>
            <script><![CDATA[
              rpts.createHistoryEvent (this);
              return (true);
            ]]></script>
          </method>
        </methodList>
      </child>
      <child name="isOrderValid" type="switchActivity">
        <guid>{0bb8256b-71bd-975c-d645-e40f4a798fbe}</guid>
        <label>Is Order Valid?</label>
        <x>357.34766</x>
        <y>17.0</y>
        <childList>
          <child name="yes" type="caseActivity">
            <guid>{01852c2e-004c-7eb4-2029-1e950e9c4067}</guid>
            <label>Yes</label>
            <x>0.0</x>
            <y>0.0</y>
            <childList>
              <child name="start" type="seqActivity">
                <guid>{0e6bd0e8-59bc-9944-450e-a9d9f58c1f70}</guid>
                <label>Start</label>
                <x>357.34766</x>
                <y>134.0</y>
                <childList>
                  <child name="startProcessManagement" type="scriptActivity">
                    <guid>{0abea91d-2b32-3659-0e00-72f363dc20e2}</guid>
                    <label>Start Process Management</label>
                    <x>344.34766</x>
                    <y>232.0</y>
                    <methodList>
                      <method name="cwOnProcActBefore" type="action">
                        <category>before</category>
                        <guid>{0679474a-09fe-5c5a-cfd2-a9a70088fd06}</guid>
                        <system>true</system>
                        <script><![CDATA[
                          rpts.updateHistoryEvent (this, "startProcessManagement");

                          var input = stcw.findGenericProcessMessageById (this.process.processDocument.genericProcessMsgDocId, "wsws:updateOrder");
                          var order = stcw.findOrderByNumber (this.process.processDocument.orderNumber);

                          if(stcw.isCancelOrderRequest (input))  {
                                stcw.addVersionToOrder (order, "CANCEL");
                          }
                          else {
                                stcw.addVersionToOrder (order, "REVISE");
                          }
                          // resetting the flag to skip send granite
                          order.header.skipSendToGranite = "N";
                          order.save ();

                          // patching all already stored events of this process with the order number
                          stcw.assignProcessEventsToOrder(this.process.id, order.header.cwOrderId);

                          var processId = Process.startProcess ("stcw:updateOrder", order.header.cwOrderId);
                          var patchResults = rpts.patchAsynchMessageLog (processId, "crmUpdateOrder");

                          Process.sendMessageToProcess (processId, null, "wsws:ifExpedtier_WHOLESALE/operation_UpdateOrder", input);
                        ]]></script>
                      </method>
                      <method name="cwOnProcActCond" type="action">
                        <category>cond</category>
                        <guid>{061eafac-dcae-d598-8e9b-54340dc22034}</guid>
                        <system>true</system>
                        <script><![CDATA[
                          rpts.createHistoryEvent (this);
                          return (true);
                        ]]></script>
                      </method>
                    </methodList>
                  </child>
                </childList>
              </child>
            </childList>
            <methodList>
              <method name="cwOnProcActCond" type="action">
                <category>cond</category>
                <guid>{01943eb8-83e2-3992-184e-3ada25fe63f9}</guid>
                <system>true</system>
                <script><![CDATA[return (this.process.processDocument.ackResult == "SUCCESS");]]></script>
              </method>
            </methodList>
          </child>
          <child name="no" type="caseActivity">
            <guid>{06e297d4-9f53-df98-b5fc-3c1182c03e12}</guid>
            <label>No</label>
            <x>127.34766</x>
            <y>237.0</y>
            <childList>
              <child name="start" type="seqActivity">
                <guid>{075c0e90-fe0b-2143-415f-98807426ca1b}</guid>
                <label>Start</label>
                <x>476.34766</x>
                <y>26.0</y>
                <childList>
                  <child name="startProcessToSendFailureAck" type="scriptActivity">
                    <guid>{0a7bd214-24b7-23ad-e794-9bb1625236f5}</guid>
                    <label>Start Process To Send Failure Ack</label>
                    <x>599.34766</x>
                    <y>7.0</y>
                    <methodList>
                      <method name="cwOnProcActBefore" type="action">
                        <category>before</category>
                        <guid>{02f07421-d0b3-ee7c-4c35-1aa1586d3579}</guid>
                        <system>true</system>
                        <script><![CDATA[
                          rpts.updateHistoryEvent (this, "failureFromExpediter");

                          var newProcessDocument            = new Document("stcw:sendFailureAckForOrderDoc");
                          newProcessDocument.ErrorCode      = this.process.processDocument.ErrorCode;
                          newProcessDocument.ErrorText      = this.process.processDocument.ErrorText;
                          newProcessDocument.orderNumber    = this.process.processDocument.orderNumber;

                          var processId = Process.startProcess ("stcw:sendFailureOrderAckToCrm", newProcessDocument);
                          debugPrintln(stcc.getSysdateForLog() + "Start Process 'sendFailureOrderAckToCrm' <" + newProcessDocument.orderNumber + ">: processId = " + processId);

                                stcw.createRejectedOrder(this.process.processDocument.orderNumber,
                                                                     "Expediter",
                                                                     this.process.processDocument.ErrorText);
                        ]]></script>
                      </method>
                      <method name="cwOnProcActCond" type="action">
                        <category>cond</category>
                        <guid>{046feac8-fd7b-3a52-778c-9bd0a04bd02d}</guid>
                        <system>true</system>
                        <script><![CDATA[
                          rpts.createHistoryEvent (this);
                          return (true);
                        ]]></script>
                      </method>
                    </methodList>
                  </child>
                  <child name="end" type="completeActivity">
                    <guid>{07175c26-57d9-6b62-8408-1de63254d2ca}</guid>
                    <label>End</label>
                    <x>730.34766</x>
                    <y>27.0</y>
                  </child>
                </childList>
              </child>
            </childList>
          </child>
        </childList>
      </child>
      <child name="end" type="completeActivity">
        <guid>{0bd5e273-9a88-d0d1-2cc3-2305b70df101}</guid>
        <label>End</label>
        <x>363.34766</x>
        <y>347.41406</y>
        <methodList>
          <method name="cwOnProcActBefore" type="action">
            <category>before</category>
            <guid>{092d5f7b-8080-82db-202b-9143a7f3d31b}</guid>
            <system>true</system>
            <script><![CDATA[
              rpts.updateHistoryEvent (this, "completedCheckUpdateOrder");
              debugPrintln(stcc.getSysdateForLog() + "[" + this.process.id + "] - CheckUpdateOrder - COMPLETED!!!");
            ]]></script>
          </method>
          <method name="cwOnProcActCond" type="action">
            <category>cond</category>
            <guid>{0e438ccf-fd40-964b-0714-9ab9768a69c8}</guid>
            <system>true</system>
            <script><![CDATA[
              rpts.createHistoryEvent (this);
              return (true);
            ]]></script>
          </method>
        </methodList>
      </child>
    </childList>
    <methodList>
      <method name="cwOnProcActBefore" type="action">
        <category>before</category>
        <guid>{0d16c4ed-357c-d28e-ef6e-96d7c6af73cd}</guid>
        <system>true</system>
        <script><![CDATA[debugPrintln(stcc.getSysdateForLog() + "[" + this.process.id + "] - CheckUpdateOrder - Start ...");]]></script>
      </method>
    </methodList>
  </activity>
  <curRevision>true</curRevision>
  <document>doc_stcw.checkProcessDocument</document>
  <guid>{0be5c1c6-aafe-cc62-7c79-388a56ea3cf4}</guid>
  <highlight>66</highlight>
  <label>Check Update Order</label>
  <metaVersion>3</metaVersion>
  <priority>8</priority>
  <revision>3</revision>
  <type>User</type>
</process>