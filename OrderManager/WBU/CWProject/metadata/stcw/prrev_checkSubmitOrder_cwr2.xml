<?xml version="1.0" encoding="UTF-8" ?>
<process__revision filenameHash="6b5a01f87d5d46e75188cfe63a861a5a" versionHash="eccbc87e4b5ce2fe28308fd9f2a7baf3" name="stcw.checkSubmitOrder_cwr2">
  <activity name="start" type="seqActivity">
    <guid>{05cf28fb-be9e-d6ce-efde-870f45739eb6}</guid>
    <label>Start</label>
    <x>108.34766</x>
    <y>31.0</y>
    <childList>
      <child name="validateIncomingOrder" type="scriptActivity">
        <guid>{03a5d019-a89e-d529-fdc8-5d7f1b1b366d}</guid>
        <label>Validate Incoming Order</label>
        <x>244.34766</x>
        <y>14.0</y>
        <methodList>
          <method name="cwOnProcActBefore" type="action">
            <category>before</category>
            <guid>{0a296dd0-6a30-262d-568e-5d1a0d397b83}</guid>
            <system>true</system>
            <script><![CDATA[
              rpts.updateHistoryEvent (this, "expediterValidation");

              var input = stcw.findGenericProcessMessageById (this.process.processDocument.genericProcessMsgDocId, "wsws:submitOrder");
              debugPrintln(stcc.getSysdateForLog() + "Received SubmitOrder with input = " + (input == null ? "null" : input.toXML()));

                    this.process.processDocument.orderNumber = input.orderNumber;


                    var errors = basicValidation_ (input);
                    if (errors == null) {
                          if (stcw.isInstallOrderRequest (input)) {
                                errors = validateInstallOrder_ (input);
                          }
                          else if (stcw.isChangeOrderRequest (input)) {
                                errors = validateChangeOrder_ (input);
                          }
                          else if (stcw.isDisconnectOrderRequest (input)) {
                                errors = validateDisconnectOrder_ (input);
                          }
                          else {
                                errors = xcutl.createError ("UnsupportedOperation", "operation_SubmitOrder", input.orderNumber, input.orderType);
                          }
                    }


                    if(errors == null) {
                          this.process.processDocument.ackResult = "SUCCESS";
                    }
                    else {
                          this.process.processDocument.ackResult = "ERROR";
                          this.process.processDocument.ErrorCode = errors.code;
                          this.process.processDocument.ErrorText = errors.text;
                    }


                    //
                    //  basicValidation_
                    //
                    function basicValidation_ (input) {

                          if (input.businessUnit != "Wholesale") {
                                return (xcutl.createError ("InvalidBusinessUnit", input.businessUnit));
                          }

                          var validationResult = input.validate(1, true);
                          if(validationResult != null) {
                                var error = new DataStructure ("xcutl:Error");
                                error.code = validationResult[0];
                                error.text = validationResult[1];
                                return error;
                          }

                          return (null);

                    }            // b a s i c V a l i d a t i o n _

                    //
                    // validateInstallOrder_
                    //
                    function validateInstallOrder_ (input) {

                          // order already exists
                          var order = stcw.findOrderByNumber (input.orderNumber);
                          if (order != null) {
                                return (xcutl.createError ("OrderExists", input.orderNumber));
                          }

                          // quote number is specified but does not exist
                          if (stcc.stringHasValue (input.quoteNumber) && stcw.findQuoteByParentQuoteNumberAndRowId (input.quoteNumber) == null) {
                                return (xcutl.createError ("QuoteForOrderNotFound", input.orderNumber, input.quoteNumber));
                          }

                          // According to mail sent to Maksym & Ravi 05/06/2010, we expect reservationNumber at Order level and Service level are the same
                          // so, if it's set to Order number we use this, else we try to use the Service one.
                          var reservationNumber = null;
                          if (stcc.stringHasValue (input.reservationNumber)) {
                                // default using Order level one
                                reservationNumber = input.reservationNumber;

                                if(stcc.stringHasValue(input.service.reservationNumber)) {
                                      if(input.service.reservationNumber != reservationNumber) {
                                            // Both exist but they are different, so error!
                                            return (xcutl.createError ("DifferentReservationNumber", input.orderNumber, reservationNumber, input.service.reservationNumber));
                                      }
                                }
                          }
                          else {
                                if(stcc.stringHasValue(input.service.reservationNumber)) {
                                      // using Service level one
                                      reservationNumber = input.service.reservationNumber;
                                }
                          }

                          if(reservationNumber != null) {
                                var quote = stcw.findReservation (reservationNumber);

                                // reservation number is specified but does not exist
                                if(quote == null) {
                                      return (xcutl.createError ("ReservationNotFound", input.orderNumber, reservationNumber));
                                }

                                var countNotCancelledOrder = stcw.countNotCancelledOrderByReservation(reservationNumber);
                                if(countNotCancelledOrder == quote.header.quantity) {
                                      return (xcutl.createError ("AllReservationUsed", reservationNumber));
                                }
                          }

                    }            // v a l i d a t e I n s t a l l O r d e r _

                    //
                    // validateChangeOrder_
                    //
                    function validateChangeOrder_ (input) {

                          // order already exists
                          var order = stcw.findOrderByNumber (input.orderNumber);
                          if (order != null)
                                return (xcutl.createError ("OrderExists", input.orderNumber));

                    }            // v a l i d a t e C h a n g e O r d e r _

                    //
                    // validateDisconnectOrder_
                    //
                    function validateDisconnectOrder_ (input) {

                          // order already exists
                          var order = stcw.findOrderByNumber (input.orderNumber);
                          if (order != null)
                                return (xcutl.createError ("OrderExists", input.orderNumber));

                    }            // v a l i d a t e D i s c o n n  e c t O r d e r _
            ]]></script>
          </method>
          <method name="cwOnProcActCond" type="action">
            <category>cond</category>
            <guid>{0748c2ee-7ed0-3876-5591-67fce8a22e90}</guid>
            <system>true</system>
            <script><![CDATA[
              rpts.createHistoryEvent (this);
              return (true);
            ]]></script>
          </method>
        </methodList>
      </child>
      <child name="isOrderValid" type="switchActivity">
        <guid>{0c95b3d1-e6c5-9139-c339-bc34f97678d0}</guid>
        <label>Is Order Valid?</label>
        <x>357.34766</x>
        <y>17.0</y>
        <childList>
          <child name="yes" type="caseActivity">
            <guid>{090e3b6d-9330-663f-5218-206b740bbcb4}</guid>
            <label>Yes</label>
            <x>0.0</x>
            <y>0.0</y>
            <childList>
              <child name="start" type="seqActivity">
                <guid>{06c26457-e875-cb72-855a-c7993dede14c}</guid>
                <label>Start</label>
                <x>357.34766</x>
                <y>134.0</y>
                <childList>
                  <child name="startProcessManagement" type="scriptActivity">
                    <guid>{01244f2e-e7a3-1936-a935-94d5aa136a12}</guid>
                    <label>Start Process Management</label>
                    <x>344.34766</x>
                    <y>233.0</y>
                    <methodList>
                      <method name="cwOnProcActBefore" type="action">
                        <category>before</category>
                        <guid>{0679474a-09fe-5c5a-cfd2-a9a70088fd06}</guid>
                        <system>true</system>
                        <script><![CDATA[
                          rpts.updateHistoryEvent (this, "startProcessManagement");

                          var input = stcw.findGenericProcessMessageById (this.process.processDocument.genericProcessMsgDocId, "wsws:submitOrder");

                          var order = stcw.createWholesaleOrder(input);
                          Global.logDebug("Order is " + order.toXML());
                          order.save();

                          // patching all already stored events of this process with the order number
                          stcw.assignProcessEventsToOrder(this.process.id, order.header.cwOrderId);

                          // starting Process
                          var processId = Process.startProcess ("stcw:submitOrder", order.header.cwOrderId);

                          Process.sendMessageToProcess (processId, null, "wsws:ifExpedtier_WHOLESALE/operation_SubmitOrder", input);
                        ]]></script>
                      </method>
                      <method name="cwOnProcActCond" type="action">
                        <category>cond</category>
                        <guid>{0b569d57-7417-ff58-ea1c-b495221dfbdd}</guid>
                        <system>true</system>
                        <script><![CDATA[
                          rpts.createHistoryEvent (this);
                          return (true);
                        ]]></script>
                      </method>
                    </methodList>
                  </child>
                </childList>
              </child>
            </childList>
            <methodList>
              <method name="cwOnProcActCond" type="action">
                <category>cond</category>
                <guid>{01943eb8-83e2-3992-184e-3ada25fe63f9}</guid>
                <system>true</system>
                <script><![CDATA[return (this.process.processDocument.ackResult == "SUCCESS");]]></script>
              </method>
            </methodList>
          </child>
          <child name="no" type="caseActivity">
            <guid>{0041e939-4bde-e37e-a64f-c172ac879114}</guid>
            <label>No</label>
            <x>127.34766</x>
            <y>237.0</y>
            <childList>
              <child name="start" type="seqActivity">
                <guid>{0d5b8b00-ec28-ea20-4cda-cfef9ad741f5}</guid>
                <label>Start</label>
                <x>476.34766</x>
                <y>26.0</y>
                <childList>
                  <child name="startProcessToSendFailureAck" type="scriptActivity">
                    <guid>{0d70430c-5024-86af-b36e-86a8e22cd4fa}</guid>
                    <label>Start Process To Send Failure Ack</label>
                    <x>599.34766</x>
                    <y>7.0</y>
                    <methodList>
                      <method name="cwOnProcActBefore" type="action">
                        <category>before</category>
                        <guid>{02f07421-d0b3-ee7c-4c35-1aa1586d3579}</guid>
                        <system>true</system>
                        <script><![CDATA[
                          rpts.updateHistoryEvent (this, "failureFromExpediter");

                          var newProcessDocument            = new Document("stcw:sendFailureAckForOrderDoc");
                          newProcessDocument.ErrorCode      = this.process.processDocument.ErrorCode;
                          newProcessDocument.ErrorText      = this.process.processDocument.ErrorText;
                          newProcessDocument.orderNumber    = this.process.processDocument.orderNumber;

                          var processId = Process.startProcess ("stcw:sendFailureOrderAckToCrm", newProcessDocument);
                          debugPrintln(stcc.getSysdateForLog() + "Start Process 'sendFailureOrderAckToCrm' <" + newProcessDocument.orderNumber + ">: processId = " + processId);

                                stcw.createRejectedOrder(this.process.processDocument.orderNumber,
                                                                     "Expediter",
                                                                     this.process.processDocument.ErrorText);
                        ]]></script>
                      </method>
                      <method name="cwOnProcActCond" type="action">
                        <category>cond</category>
                        <guid>{046feac8-fd7b-3a52-778c-9bd0a04bd02d}</guid>
                        <system>true</system>
                        <script><![CDATA[
                          rpts.createHistoryEvent (this);
                          return (true);
                        ]]></script>
                      </method>
                    </methodList>
                  </child>
                  <child name="end" type="completeActivity">
                    <guid>{0ceff746-5d73-611a-7495-faa12ca11f5d}</guid>
                    <label>End</label>
                    <x>730.34766</x>
                    <y>27.0</y>
                  </child>
                </childList>
              </child>
            </childList>
          </child>
        </childList>
      </child>
      <child name="end" type="completeActivity">
        <guid>{0a900ec1-fcbb-20eb-c9cb-981b4731b0f7}</guid>
        <label>End</label>
        <x>363.34766</x>
        <y>381.41406</y>
        <methodList>
          <method name="cwOnProcActBefore" type="action">
            <category>before</category>
            <guid>{092d5f7b-8080-82db-202b-9143a7f3d31b}</guid>
            <system>true</system>
            <script><![CDATA[
              rpts.updateHistoryEvent (this, "completedCheckSubmitOrder");
              debugPrintln(stcc.getSysdateForLog() + "[" + this.process.id + "] - CheckSubmitOrder - COMPLETED!!!");
            ]]></script>
          </method>
          <method name="cwOnProcActCond" type="action">
            <category>cond</category>
            <guid>{0e438ccf-fd40-964b-0714-9ab9768a69c8}</guid>
            <system>true</system>
            <script><![CDATA[
              rpts.createHistoryEvent (this);
              return (true);
            ]]></script>
          </method>
        </methodList>
      </child>
    </childList>
    <methodList>
      <method name="cwOnProcActBefore" type="action">
        <category>before</category>
        <guid>{0d16c4ed-357c-d28e-ef6e-96d7c6af73cd}</guid>
        <system>true</system>
        <script><![CDATA[debugPrintln(stcc.getSysdateForLog() + "[" + this.process.id + "] - CheckSubmitOrder - Start ...");]]></script>
      </method>
    </methodList>
  </activity>
  <document>doc_stcw.checkProcessDocument</document>
  <label>Check Submit Order</label>
  <metaVersion>3</metaVersion>
  <priority>8</priority>
  <process>proc_stcw.checkSubmitOrder</process>
  <revision>2</revision>
  <type>User</type>
</process__revision>